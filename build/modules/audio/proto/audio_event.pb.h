// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_event.proto

#ifndef PROTOBUF_INCLUDED_audio_5fevent_2eproto
#define PROTOBUF_INCLUDED_audio_5fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "audio_common.pb.h"
#include "header.pb.h"
#include "pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_audio_5fevent_2eproto 

namespace protobuf_audio_5fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_audio_5fevent_2eproto
namespace apollo {
namespace audio {
class AudioEvent;
class AudioEventDefaultTypeInternal;
extern AudioEventDefaultTypeInternal _AudioEvent_default_instance_;
}  // namespace audio
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::audio::AudioEvent* Arena::CreateMaybeMessage<::apollo::audio::AudioEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace audio {

// ===================================================================

class AudioEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.audio.AudioEvent) */ {
 public:
  AudioEvent();
  virtual ~AudioEvent();

  AudioEvent(const AudioEvent& from);

  inline AudioEvent& operator=(const AudioEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioEvent(AudioEvent&& from) noexcept
    : AudioEvent() {
    *this = ::std::move(from);
  }

  inline AudioEvent& operator=(AudioEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioEvent* internal_default_instance() {
    return reinterpret_cast<const AudioEvent*>(
               &_AudioEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AudioEvent* other);
  friend void swap(AudioEvent& a, AudioEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioEvent* New() const final {
    return CreateMaybeMessage<AudioEvent>(NULL);
  }

  AudioEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioEvent& from);
  void MergeFrom(const AudioEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.Pose pose = 7;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 7;
  private:
  const ::apollo::common::Pose& _internal_pose() const;
  public:
  const ::apollo::common::Pose& pose() const;
  ::apollo::common::Pose* release_pose();
  ::apollo::common::Pose* mutable_pose();
  void set_allocated_pose(::apollo::common::Pose* pose);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  bool has_moving_result() const;
  void clear_moving_result();
  static const int kMovingResultFieldNumber = 3;
  ::apollo::audio::MovingResult moving_result() const;
  void set_moving_result(::apollo::audio::MovingResult value);

  // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
  bool has_audio_type() const;
  void clear_audio_type();
  static const int kAudioTypeFieldNumber = 4;
  ::apollo::audio::AudioType audio_type() const;
  void set_audio_type(::apollo::audio::AudioType value);

  // optional bool siren_is_on = 5;
  bool has_siren_is_on() const;
  void clear_siren_is_on();
  static const int kSirenIsOnFieldNumber = 5;
  bool siren_is_on() const;
  void set_siren_is_on(bool value);

  // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
  bool has_audio_direction() const;
  void clear_audio_direction();
  static const int kAudioDirectionFieldNumber = 6;
  ::apollo::audio::AudioDirection audio_direction() const;
  void set_audio_direction(::apollo::audio::AudioDirection value);

  // @@protoc_insertion_point(class_scope:apollo.audio.AudioEvent)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_id();
  void clear_has_id();
  void set_has_moving_result();
  void clear_has_moving_result();
  void set_has_audio_type();
  void clear_has_audio_type();
  void set_has_siren_is_on();
  void clear_has_siren_is_on();
  void set_has_audio_direction();
  void clear_has_audio_direction();
  void set_has_pose();
  void clear_has_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::Pose* pose_;
  ::google::protobuf::int32 id_;
  int moving_result_;
  int audio_type_;
  bool siren_is_on_;
  int audio_direction_;
  friend struct ::protobuf_audio_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioEvent

// optional .apollo.common.Header header = 1;
inline bool AudioEvent::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioEvent::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioEvent::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& AudioEvent::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& AudioEvent::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* AudioEvent::release_header() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioEvent.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* AudioEvent::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioEvent.header)
  return header_;
}
inline void AudioEvent::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioEvent.header)
}

// optional int32 id = 2;
inline bool AudioEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AudioEvent::id() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.id)
  return id_;
}
inline void AudioEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.id)
}

// optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
inline bool AudioEvent::has_moving_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioEvent::set_has_moving_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioEvent::clear_has_moving_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioEvent::clear_moving_result() {
  moving_result_ = 0;
  clear_has_moving_result();
}
inline ::apollo::audio::MovingResult AudioEvent::moving_result() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.moving_result)
  return static_cast< ::apollo::audio::MovingResult >(moving_result_);
}
inline void AudioEvent::set_moving_result(::apollo::audio::MovingResult value) {
  assert(::apollo::audio::MovingResult_IsValid(value));
  set_has_moving_result();
  moving_result_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.moving_result)
}

// optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
inline bool AudioEvent::has_audio_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioEvent::set_has_audio_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioEvent::clear_has_audio_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioEvent::clear_audio_type() {
  audio_type_ = 0;
  clear_has_audio_type();
}
inline ::apollo::audio::AudioType AudioEvent::audio_type() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.audio_type)
  return static_cast< ::apollo::audio::AudioType >(audio_type_);
}
inline void AudioEvent::set_audio_type(::apollo::audio::AudioType value) {
  assert(::apollo::audio::AudioType_IsValid(value));
  set_has_audio_type();
  audio_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.audio_type)
}

// optional bool siren_is_on = 5;
inline bool AudioEvent::has_siren_is_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioEvent::set_has_siren_is_on() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioEvent::clear_has_siren_is_on() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioEvent::clear_siren_is_on() {
  siren_is_on_ = false;
  clear_has_siren_is_on();
}
inline bool AudioEvent::siren_is_on() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.siren_is_on)
  return siren_is_on_;
}
inline void AudioEvent::set_siren_is_on(bool value) {
  set_has_siren_is_on();
  siren_is_on_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.siren_is_on)
}

// optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
inline bool AudioEvent::has_audio_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioEvent::set_has_audio_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AudioEvent::clear_has_audio_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AudioEvent::clear_audio_direction() {
  audio_direction_ = 0;
  clear_has_audio_direction();
}
inline ::apollo::audio::AudioDirection AudioEvent::audio_direction() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.audio_direction)
  return static_cast< ::apollo::audio::AudioDirection >(audio_direction_);
}
inline void AudioEvent::set_audio_direction(::apollo::audio::AudioDirection value) {
  assert(::apollo::audio::AudioDirection_IsValid(value));
  set_has_audio_direction();
  audio_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioEvent.audio_direction)
}

// optional .apollo.common.Pose pose = 7;
inline bool AudioEvent::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioEvent::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioEvent::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Pose& AudioEvent::_internal_pose() const {
  return *pose_;
}
inline const ::apollo::common::Pose& AudioEvent::pose() const {
  const ::apollo::common::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:apollo.audio.AudioEvent.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Pose*>(
      &::apollo::common::_Pose_default_instance_);
}
inline ::apollo::common::Pose* AudioEvent::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioEvent.pose)
  clear_has_pose();
  ::apollo::common::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::apollo::common::Pose* AudioEvent::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioEvent.pose)
  return pose_;
}
inline void AudioEvent::set_allocated_pose(::apollo::common::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioEvent.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_audio_5fevent_2eproto
