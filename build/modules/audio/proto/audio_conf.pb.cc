// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_conf.proto

#include "audio_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_audio_5fconf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_audio_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopicConf;
}  // namespace protobuf_audio_5fconf_2eproto
namespace apollo {
namespace audio {
class TopicConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicConf>
      _instance;
} _TopicConf_default_instance_;
class AudioConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioConf>
      _instance;
} _AudioConf_default_instance_;
}  // namespace audio
}  // namespace apollo
namespace protobuf_audio_5fconf_2eproto {
static void InitDefaultsTopicConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::audio::_TopicConf_default_instance_;
    new (ptr) ::apollo::audio::TopicConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::audio::TopicConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TopicConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTopicConf}, {}};

static void InitDefaultsAudioConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::audio::_AudioConf_default_instance_;
    new (ptr) ::apollo::audio::AudioConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::audio::AudioConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AudioConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAudioConf}, {
      &protobuf_audio_5fconf_2eproto::scc_info_TopicConf.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TopicConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioConf.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, audio_data_topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, audio_detection_topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, localization_topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, audio_event_topic_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::TopicConf, perception_topic_name_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioConf, topic_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioConf, respeaker_extrinsics_path_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::audio::TopicConf)},
  { 15, 22, sizeof(::apollo::audio::AudioConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::audio::_TopicConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::audio::_AudioConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "audio_conf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020audio_conf.proto\022\014apollo.audio\"\256\001\n\tTop"
      "icConf\022\035\n\025audio_data_topic_name\030\001 \001(\t\022\"\n"
      "\032audio_detection_topic_name\030\002 \001(\t\022\037\n\027loc"
      "alization_topic_name\030\003 \001(\t\022\036\n\026audio_even"
      "t_topic_name\030\004 \001(\t\022\035\n\025perception_topic_n"
      "ame\030\005 \001(\t\"[\n\tAudioConf\022+\n\ntopic_conf\030\001 \001"
      "(\0132\027.apollo.audio.TopicConf\022!\n\031respeaker"
      "_extrinsics_path\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "audio_conf.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_audio_5fconf_2eproto
namespace apollo {
namespace audio {

// ===================================================================

void TopicConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicConf::kAudioDataTopicNameFieldNumber;
const int TopicConf::kAudioDetectionTopicNameFieldNumber;
const int TopicConf::kLocalizationTopicNameFieldNumber;
const int TopicConf::kAudioEventTopicNameFieldNumber;
const int TopicConf::kPerceptionTopicNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicConf::TopicConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_audio_5fconf_2eproto::scc_info_TopicConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.audio.TopicConf)
}
TopicConf::TopicConf(const TopicConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_data_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_data_topic_name()) {
    audio_data_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_topic_name_);
  }
  audio_detection_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_detection_topic_name()) {
    audio_detection_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_detection_topic_name_);
  }
  localization_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localization_topic_name()) {
    localization_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_topic_name_);
  }
  audio_event_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_event_topic_name()) {
    audio_event_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_event_topic_name_);
  }
  perception_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_perception_topic_name()) {
    perception_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_topic_name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.audio.TopicConf)
}

void TopicConf::SharedCtor() {
  audio_data_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_detection_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_event_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perception_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicConf::~TopicConf() {
  // @@protoc_insertion_point(destructor:apollo.audio.TopicConf)
  SharedDtor();
}

void TopicConf::SharedDtor() {
  audio_data_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_detection_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_event_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perception_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopicConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TopicConf::descriptor() {
  ::protobuf_audio_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicConf& TopicConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_audio_5fconf_2eproto::scc_info_TopicConf.base);
  return *internal_default_instance();
}


void TopicConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.audio.TopicConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      audio_data_topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      audio_detection_topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      localization_topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      audio_event_topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      perception_topic_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopicConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.audio.TopicConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string audio_data_topic_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_data_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_data_topic_name().data(), static_cast<int>(this->audio_data_topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.TopicConf.audio_data_topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_detection_topic_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_detection_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_detection_topic_name().data(), static_cast<int>(this->audio_detection_topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.TopicConf.audio_detection_topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localization_topic_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_topic_name().data(), static_cast<int>(this->localization_topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.TopicConf.localization_topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string audio_event_topic_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_event_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_event_topic_name().data(), static_cast<int>(this->audio_event_topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.TopicConf.audio_event_topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string perception_topic_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_perception_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->perception_topic_name().data(), static_cast<int>(this->perception_topic_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.TopicConf.perception_topic_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.audio.TopicConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.audio.TopicConf)
  return false;
#undef DO_
}

void TopicConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.audio.TopicConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string audio_data_topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_data_topic_name().data(), static_cast<int>(this->audio_data_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_data_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->audio_data_topic_name(), output);
  }

  // optional string audio_detection_topic_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_detection_topic_name().data(), static_cast<int>(this->audio_detection_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_detection_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audio_detection_topic_name(), output);
  }

  // optional string localization_topic_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic_name().data(), static_cast<int>(this->localization_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.localization_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->localization_topic_name(), output);
  }

  // optional string audio_event_topic_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_event_topic_name().data(), static_cast<int>(this->audio_event_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_event_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->audio_event_topic_name(), output);
  }

  // optional string perception_topic_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->perception_topic_name().data(), static_cast<int>(this->perception_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.perception_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->perception_topic_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.audio.TopicConf)
}

::google::protobuf::uint8* TopicConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.audio.TopicConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string audio_data_topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_data_topic_name().data(), static_cast<int>(this->audio_data_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_data_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->audio_data_topic_name(), target);
  }

  // optional string audio_detection_topic_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_detection_topic_name().data(), static_cast<int>(this->audio_detection_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_detection_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audio_detection_topic_name(), target);
  }

  // optional string localization_topic_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic_name().data(), static_cast<int>(this->localization_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.localization_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->localization_topic_name(), target);
  }

  // optional string audio_event_topic_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_event_topic_name().data(), static_cast<int>(this->audio_event_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.audio_event_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audio_event_topic_name(), target);
  }

  // optional string perception_topic_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->perception_topic_name().data(), static_cast<int>(this->perception_topic_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.TopicConf.perception_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->perception_topic_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.audio.TopicConf)
  return target;
}

size_t TopicConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.audio.TopicConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string audio_data_topic_name = 1;
    if (has_audio_data_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_data_topic_name());
    }

    // optional string audio_detection_topic_name = 2;
    if (has_audio_detection_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_detection_topic_name());
    }

    // optional string localization_topic_name = 3;
    if (has_localization_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_topic_name());
    }

    // optional string audio_event_topic_name = 4;
    if (has_audio_event_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_event_topic_name());
    }

    // optional string perception_topic_name = 5;
    if (has_perception_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->perception_topic_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.audio.TopicConf)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.audio.TopicConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.audio.TopicConf)
    MergeFrom(*source);
  }
}

void TopicConf::MergeFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.audio.TopicConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_audio_data_topic_name();
      audio_data_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_audio_detection_topic_name();
      audio_detection_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_detection_topic_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_localization_topic_name();
      localization_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_topic_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_audio_event_topic_name();
      audio_event_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_event_topic_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_perception_topic_name();
      perception_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_topic_name_);
    }
  }
}

void TopicConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.audio.TopicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicConf::CopyFrom(const TopicConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.audio.TopicConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConf::IsInitialized() const {
  return true;
}

void TopicConf::Swap(TopicConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicConf::InternalSwap(TopicConf* other) {
  using std::swap;
  audio_data_topic_name_.Swap(&other->audio_data_topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_detection_topic_name_.Swap(&other->audio_detection_topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localization_topic_name_.Swap(&other->localization_topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_event_topic_name_.Swap(&other->audio_event_topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  perception_topic_name_.Swap(&other->perception_topic_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TopicConf::GetMetadata() const {
  protobuf_audio_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AudioConf::InitAsDefaultInstance() {
  ::apollo::audio::_AudioConf_default_instance_._instance.get_mutable()->topic_conf_ = const_cast< ::apollo::audio::TopicConf*>(
      ::apollo::audio::TopicConf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioConf::kTopicConfFieldNumber;
const int AudioConf::kRespeakerExtrinsicsPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioConf::AudioConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_audio_5fconf_2eproto::scc_info_AudioConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.audio.AudioConf)
}
AudioConf::AudioConf(const AudioConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  respeaker_extrinsics_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_respeaker_extrinsics_path()) {
    respeaker_extrinsics_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respeaker_extrinsics_path_);
  }
  if (from.has_topic_conf()) {
    topic_conf_ = new ::apollo::audio::TopicConf(*from.topic_conf_);
  } else {
    topic_conf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.audio.AudioConf)
}

void AudioConf::SharedCtor() {
  respeaker_extrinsics_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_conf_ = NULL;
}

AudioConf::~AudioConf() {
  // @@protoc_insertion_point(destructor:apollo.audio.AudioConf)
  SharedDtor();
}

void AudioConf::SharedDtor() {
  respeaker_extrinsics_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete topic_conf_;
}

void AudioConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AudioConf::descriptor() {
  ::protobuf_audio_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioConf& AudioConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_audio_5fconf_2eproto::scc_info_AudioConf.base);
  return *internal_default_instance();
}


void AudioConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.audio.AudioConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      respeaker_extrinsics_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(topic_conf_ != NULL);
      topic_conf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.audio.AudioConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.audio.TopicConf topic_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string respeaker_extrinsics_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_respeaker_extrinsics_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->respeaker_extrinsics_path().data(), static_cast<int>(this->respeaker_extrinsics_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.audio.AudioConf.respeaker_extrinsics_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.audio.AudioConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.audio.AudioConf)
  return false;
#undef DO_
}

void AudioConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.audio.AudioConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.audio.TopicConf topic_conf = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_topic_conf(), output);
  }

  // optional string respeaker_extrinsics_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->respeaker_extrinsics_path().data(), static_cast<int>(this->respeaker_extrinsics_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.AudioConf.respeaker_extrinsics_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->respeaker_extrinsics_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.audio.AudioConf)
}

::google::protobuf::uint8* AudioConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.audio.AudioConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.audio.TopicConf topic_conf = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_topic_conf(), deterministic, target);
  }

  // optional string respeaker_extrinsics_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->respeaker_extrinsics_path().data(), static_cast<int>(this->respeaker_extrinsics_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.audio.AudioConf.respeaker_extrinsics_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->respeaker_extrinsics_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.audio.AudioConf)
  return target;
}

size_t AudioConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.audio.AudioConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string respeaker_extrinsics_path = 2;
    if (has_respeaker_extrinsics_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->respeaker_extrinsics_path());
    }

    // optional .apollo.audio.TopicConf topic_conf = 1;
    if (has_topic_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *topic_conf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.audio.AudioConf)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.audio.AudioConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.audio.AudioConf)
    MergeFrom(*source);
  }
}

void AudioConf::MergeFrom(const AudioConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.audio.AudioConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_respeaker_extrinsics_path();
      respeaker_extrinsics_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respeaker_extrinsics_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_topic_conf()->::apollo::audio::TopicConf::MergeFrom(from.topic_conf());
    }
  }
}

void AudioConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.audio.AudioConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioConf::CopyFrom(const AudioConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.audio.AudioConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioConf::IsInitialized() const {
  return true;
}

void AudioConf::Swap(AudioConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioConf::InternalSwap(AudioConf* other) {
  using std::swap;
  respeaker_extrinsics_path_.Swap(&other->respeaker_extrinsics_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topic_conf_, other->topic_conf_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AudioConf::GetMetadata() const {
  protobuf_audio_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace audio
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::audio::TopicConf* Arena::CreateMaybeMessage< ::apollo::audio::TopicConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::audio::TopicConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::audio::AudioConf* Arena::CreateMaybeMessage< ::apollo::audio::AudioConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::audio::AudioConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
