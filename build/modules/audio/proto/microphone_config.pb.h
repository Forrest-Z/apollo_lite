// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: microphone_config.proto

#ifndef PROTOBUF_INCLUDED_microphone_5fconfig_2eproto
#define PROTOBUF_INCLUDED_microphone_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_microphone_5fconfig_2eproto 

namespace protobuf_microphone_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_microphone_5fconfig_2eproto
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
class MicrophoneConfig;
class MicrophoneConfigDefaultTypeInternal;
extern MicrophoneConfigDefaultTypeInternal _MicrophoneConfig_default_instance_;
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::microphone::config::MicrophoneConfig* Arena::CreateMaybeMessage<::apollo::drivers::microphone::config::MicrophoneConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {

enum MicrophoneConfig_MicrophoneModel {
  MicrophoneConfig_MicrophoneModel_UNKNOWN = 0,
  MicrophoneConfig_MicrophoneModel_RESPEAKER = 1
};
bool MicrophoneConfig_MicrophoneModel_IsValid(int value);
const MicrophoneConfig_MicrophoneModel MicrophoneConfig_MicrophoneModel_MicrophoneModel_MIN = MicrophoneConfig_MicrophoneModel_UNKNOWN;
const MicrophoneConfig_MicrophoneModel MicrophoneConfig_MicrophoneModel_MicrophoneModel_MAX = MicrophoneConfig_MicrophoneModel_RESPEAKER;
const int MicrophoneConfig_MicrophoneModel_MicrophoneModel_ARRAYSIZE = MicrophoneConfig_MicrophoneModel_MicrophoneModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* MicrophoneConfig_MicrophoneModel_descriptor();
inline const ::std::string& MicrophoneConfig_MicrophoneModel_Name(MicrophoneConfig_MicrophoneModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    MicrophoneConfig_MicrophoneModel_descriptor(), value);
}
inline bool MicrophoneConfig_MicrophoneModel_Parse(
    const ::std::string& name, MicrophoneConfig_MicrophoneModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MicrophoneConfig_MicrophoneModel>(
    MicrophoneConfig_MicrophoneModel_descriptor(), name, value);
}
enum ChannelType {
  UNKNOWN = 0,
  ASR = 1,
  RAW = 2,
  PLAYBACK = 3
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = UNKNOWN;
const ChannelType ChannelType_MAX = PLAYBACK;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class MicrophoneConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.microphone.config.MicrophoneConfig) */ {
 public:
  MicrophoneConfig();
  virtual ~MicrophoneConfig();

  MicrophoneConfig(const MicrophoneConfig& from);

  inline MicrophoneConfig& operator=(const MicrophoneConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MicrophoneConfig(MicrophoneConfig&& from) noexcept
    : MicrophoneConfig() {
    *this = ::std::move(from);
  }

  inline MicrophoneConfig& operator=(MicrophoneConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MicrophoneConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MicrophoneConfig* internal_default_instance() {
    return reinterpret_cast<const MicrophoneConfig*>(
               &_MicrophoneConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MicrophoneConfig* other);
  friend void swap(MicrophoneConfig& a, MicrophoneConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MicrophoneConfig* New() const final {
    return CreateMaybeMessage<MicrophoneConfig>(NULL);
  }

  MicrophoneConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MicrophoneConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MicrophoneConfig& from);
  void MergeFrom(const MicrophoneConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MicrophoneConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MicrophoneConfig_MicrophoneModel MicrophoneModel;
  static const MicrophoneModel UNKNOWN =
    MicrophoneConfig_MicrophoneModel_UNKNOWN;
  static const MicrophoneModel RESPEAKER =
    MicrophoneConfig_MicrophoneModel_RESPEAKER;
  static inline bool MicrophoneModel_IsValid(int value) {
    return MicrophoneConfig_MicrophoneModel_IsValid(value);
  }
  static const MicrophoneModel MicrophoneModel_MIN =
    MicrophoneConfig_MicrophoneModel_MicrophoneModel_MIN;
  static const MicrophoneModel MicrophoneModel_MAX =
    MicrophoneConfig_MicrophoneModel_MicrophoneModel_MAX;
  static const int MicrophoneModel_ARRAYSIZE =
    MicrophoneConfig_MicrophoneModel_MicrophoneModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MicrophoneModel_descriptor() {
    return MicrophoneConfig_MicrophoneModel_descriptor();
  }
  static inline const ::std::string& MicrophoneModel_Name(MicrophoneModel value) {
    return MicrophoneConfig_MicrophoneModel_Name(value);
  }
  static inline bool MicrophoneModel_Parse(const ::std::string& name,
      MicrophoneModel* value) {
    return MicrophoneConfig_MicrophoneModel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  int channel_type_size() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 1;
  ::apollo::drivers::microphone::config::ChannelType channel_type(int index) const;
  void set_channel_type(int index, ::apollo::drivers::microphone::config::ChannelType value);
  void add_channel_type(::apollo::drivers::microphone::config::ChannelType value);
  const ::google::protobuf::RepeatedField<int>& channel_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_channel_type();

  // optional string channel_name = 7;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 7;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional string frame_id = 8;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 8;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
  bool has_microphone_model() const;
  void clear_microphone_model();
  static const int kMicrophoneModelFieldNumber = 2;
  ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel microphone_model() const;
  void set_microphone_model(::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel value);

  // optional int32 chunk = 3;
  bool has_chunk() const;
  void clear_chunk();
  static const int kChunkFieldNumber = 3;
  ::google::protobuf::int32 chunk() const;
  void set_chunk(::google::protobuf::int32 value);

  // optional float sample_rate = 4;
  bool has_sample_rate() const;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 4;
  float sample_rate() const;
  void set_sample_rate(float value);

  // optional float record_seconds = 5;
  bool has_record_seconds() const;
  void clear_record_seconds();
  static const int kRecordSecondsFieldNumber = 5;
  float record_seconds() const;
  void set_record_seconds(float value);

  // optional int32 sample_width = 6;
  bool has_sample_width() const;
  void clear_sample_width();
  static const int kSampleWidthFieldNumber = 6;
  ::google::protobuf::int32 sample_width() const;
  void set_sample_width(::google::protobuf::int32 value);

  // optional float mic_distance = 9;
  bool has_mic_distance() const;
  void clear_mic_distance();
  static const int kMicDistanceFieldNumber = 9;
  float mic_distance() const;
  void set_mic_distance(float value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.microphone.config.MicrophoneConfig)
 private:
  void set_has_microphone_model();
  void clear_has_microphone_model();
  void set_has_chunk();
  void clear_has_chunk();
  void set_has_sample_rate();
  void clear_has_sample_rate();
  void set_has_record_seconds();
  void clear_has_record_seconds();
  void set_has_sample_width();
  void clear_has_sample_width();
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_frame_id();
  void clear_has_frame_id();
  void set_has_mic_distance();
  void clear_has_mic_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> channel_type_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  int microphone_model_;
  ::google::protobuf::int32 chunk_;
  float sample_rate_;
  float record_seconds_;
  ::google::protobuf::int32 sample_width_;
  float mic_distance_;
  friend struct ::protobuf_microphone_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MicrophoneConfig

// optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
inline bool MicrophoneConfig::has_microphone_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MicrophoneConfig::set_has_microphone_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MicrophoneConfig::clear_has_microphone_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MicrophoneConfig::clear_microphone_model() {
  microphone_model_ = 0;
  clear_has_microphone_model();
}
inline ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel MicrophoneConfig::microphone_model() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.microphone_model)
  return static_cast< ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel >(microphone_model_);
}
inline void MicrophoneConfig::set_microphone_model(::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel value) {
  assert(::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel_IsValid(value));
  set_has_microphone_model();
  microphone_model_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.microphone_model)
}

// optional int32 chunk = 3;
inline bool MicrophoneConfig::has_chunk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MicrophoneConfig::set_has_chunk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MicrophoneConfig::clear_has_chunk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MicrophoneConfig::clear_chunk() {
  chunk_ = 0;
  clear_has_chunk();
}
inline ::google::protobuf::int32 MicrophoneConfig::chunk() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.chunk)
  return chunk_;
}
inline void MicrophoneConfig::set_chunk(::google::protobuf::int32 value) {
  set_has_chunk();
  chunk_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.chunk)
}

// optional float sample_rate = 4;
inline bool MicrophoneConfig::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MicrophoneConfig::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MicrophoneConfig::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MicrophoneConfig::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline float MicrophoneConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.sample_rate)
  return sample_rate_;
}
inline void MicrophoneConfig::set_sample_rate(float value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.sample_rate)
}

// optional float record_seconds = 5;
inline bool MicrophoneConfig::has_record_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MicrophoneConfig::set_has_record_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MicrophoneConfig::clear_has_record_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MicrophoneConfig::clear_record_seconds() {
  record_seconds_ = 0;
  clear_has_record_seconds();
}
inline float MicrophoneConfig::record_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.record_seconds)
  return record_seconds_;
}
inline void MicrophoneConfig::set_record_seconds(float value) {
  set_has_record_seconds();
  record_seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.record_seconds)
}

// optional int32 sample_width = 6;
inline bool MicrophoneConfig::has_sample_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MicrophoneConfig::set_has_sample_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MicrophoneConfig::clear_has_sample_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MicrophoneConfig::clear_sample_width() {
  sample_width_ = 0;
  clear_has_sample_width();
}
inline ::google::protobuf::int32 MicrophoneConfig::sample_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.sample_width)
  return sample_width_;
}
inline void MicrophoneConfig::set_sample_width(::google::protobuf::int32 value) {
  set_has_sample_width();
  sample_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.sample_width)
}

// optional string channel_name = 7;
inline bool MicrophoneConfig::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MicrophoneConfig::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MicrophoneConfig::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MicrophoneConfig::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& MicrophoneConfig::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
  return channel_name_.GetNoArena();
}
inline void MicrophoneConfig::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
}
#if LANG_CXX11
inline void MicrophoneConfig::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
}
#endif
inline void MicrophoneConfig::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
}
inline void MicrophoneConfig::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
}
inline ::std::string* MicrophoneConfig::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MicrophoneConfig::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
  if (!has_channel_name()) {
    return NULL;
  }
  clear_has_channel_name();
  return channel_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MicrophoneConfig::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.microphone.config.MicrophoneConfig.channel_name)
}

// optional string frame_id = 8;
inline bool MicrophoneConfig::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MicrophoneConfig::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MicrophoneConfig::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MicrophoneConfig::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& MicrophoneConfig::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
  return frame_id_.GetNoArena();
}
inline void MicrophoneConfig::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
}
#if LANG_CXX11
inline void MicrophoneConfig::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
}
#endif
inline void MicrophoneConfig::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
}
inline void MicrophoneConfig::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
}
inline ::std::string* MicrophoneConfig::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MicrophoneConfig::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
  if (!has_frame_id()) {
    return NULL;
  }
  clear_has_frame_id();
  return frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MicrophoneConfig::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.microphone.config.MicrophoneConfig.frame_id)
}

// optional float mic_distance = 9;
inline bool MicrophoneConfig::has_mic_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MicrophoneConfig::set_has_mic_distance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MicrophoneConfig::clear_has_mic_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MicrophoneConfig::clear_mic_distance() {
  mic_distance_ = 0;
  clear_has_mic_distance();
}
inline float MicrophoneConfig::mic_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.mic_distance)
  return mic_distance_;
}
inline void MicrophoneConfig::set_mic_distance(float value) {
  set_has_mic_distance();
  mic_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.mic_distance)
}

// repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
inline int MicrophoneConfig::channel_type_size() const {
  return channel_type_.size();
}
inline void MicrophoneConfig::clear_channel_type() {
  channel_type_.Clear();
}
inline ::apollo::drivers::microphone::config::ChannelType MicrophoneConfig::channel_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.MicrophoneConfig.channel_type)
  return static_cast< ::apollo::drivers::microphone::config::ChannelType >(channel_type_.Get(index));
}
inline void MicrophoneConfig::set_channel_type(int index, ::apollo::drivers::microphone::config::ChannelType value) {
  assert(::apollo::drivers::microphone::config::ChannelType_IsValid(value));
  channel_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.MicrophoneConfig.channel_type)
}
inline void MicrophoneConfig::add_channel_type(::apollo::drivers::microphone::config::ChannelType value) {
  assert(::apollo::drivers::microphone::config::ChannelType_IsValid(value));
  channel_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.microphone.config.MicrophoneConfig.channel_type)
}
inline const ::google::protobuf::RepeatedField<int>&
MicrophoneConfig::channel_type() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.microphone.config.MicrophoneConfig.channel_type)
  return channel_type_;
}
inline ::google::protobuf::RepeatedField<int>*
MicrophoneConfig::mutable_channel_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.microphone.config.MicrophoneConfig.channel_type)
  return &channel_type_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel>() {
  return ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::microphone::config::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::microphone::config::ChannelType>() {
  return ::apollo::drivers::microphone::config::ChannelType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_microphone_5fconfig_2eproto
