// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_event.proto

#include "audio_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_header_2eproto
namespace protobuf_pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_pose_2eproto
namespace apollo {
namespace audio {
class AudioEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioEvent>
      _instance;
} _AudioEvent_default_instance_;
}  // namespace audio
}  // namespace apollo
namespace protobuf_audio_5fevent_2eproto {
static void InitDefaultsAudioEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::audio::_AudioEvent_default_instance_;
    new (ptr) ::apollo::audio::AudioEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::audio::AudioEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AudioEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAudioEvent}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_pose_2eproto::scc_info_Pose.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AudioEvent.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, moving_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, audio_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, siren_is_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, audio_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::audio::AudioEvent, pose_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::audio::AudioEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::audio::_AudioEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "audio_event.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021audio_event.proto\022\014apollo.audio\032\022audio"
      "_common.proto\032\014header.proto\032\npose.proto\""
      "\270\002\n\nAudioEvent\022%\n\006header\030\001 \001(\0132\025.apollo."
      "common.Header\022\n\n\002id\030\002 \001(\005\022:\n\rmoving_resu"
      "lt\030\003 \001(\0162\032.apollo.audio.MovingResult:\007UN"
      "KNOWN\0229\n\naudio_type\030\004 \001(\0162\027.apollo.audio"
      ".AudioType:\014UNKNOWN_TYPE\022\023\n\013siren_is_on\030"
      "\005 \001(\010\022H\n\017audio_direction\030\006 \001(\0162\034.apollo."
      "audio.AudioDirection:\021UNKNOWN_DIRECTION\022"
      "!\n\004pose\030\007 \001(\0132\023.apollo.common.Pose"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "audio_event.proto", &protobuf_RegisterTypes);
  ::protobuf_audio_5fcommon_2eproto::AddDescriptors();
  ::protobuf_header_2eproto::AddDescriptors();
  ::protobuf_pose_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_audio_5fevent_2eproto
namespace apollo {
namespace audio {

// ===================================================================

void AudioEvent::InitAsDefaultInstance() {
  ::apollo::audio::_AudioEvent_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::audio::_AudioEvent_default_instance_._instance.get_mutable()->pose_ = const_cast< ::apollo::common::Pose*>(
      ::apollo::common::Pose::internal_default_instance());
}
void AudioEvent::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void AudioEvent::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioEvent::kHeaderFieldNumber;
const int AudioEvent::kIdFieldNumber;
const int AudioEvent::kMovingResultFieldNumber;
const int AudioEvent::kAudioTypeFieldNumber;
const int AudioEvent::kSirenIsOnFieldNumber;
const int AudioEvent::kAudioDirectionFieldNumber;
const int AudioEvent::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioEvent::AudioEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_audio_5fevent_2eproto::scc_info_AudioEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.audio.AudioEvent)
}
AudioEvent::AudioEvent(const AudioEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::apollo::common::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(audio_direction_));
  // @@protoc_insertion_point(copy_constructor:apollo.audio.AudioEvent)
}

void AudioEvent::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_direction_) -
      reinterpret_cast<char*>(&header_)) + sizeof(audio_direction_));
}

AudioEvent::~AudioEvent() {
  // @@protoc_insertion_point(destructor:apollo.audio.AudioEvent)
  SharedDtor();
}

void AudioEvent::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
}

void AudioEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AudioEvent::descriptor() {
  ::protobuf_audio_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioEvent& AudioEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_audio_5fevent_2eproto::scc_info_AudioEvent.base);
  return *internal_default_instance();
}


void AudioEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.audio.AudioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_direction_) -
        reinterpret_cast<char*>(&id_)) + sizeof(audio_direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.audio.AudioEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::audio::MovingResult_IsValid(value)) {
            set_moving_result(static_cast< ::apollo::audio::MovingResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::audio::AudioType_IsValid(value)) {
            set_audio_type(static_cast< ::apollo::audio::AudioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool siren_is_on = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_siren_is_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &siren_is_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::audio::AudioDirection_IsValid(value)) {
            set_audio_direction(static_cast< ::apollo::audio::AudioDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Pose pose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.audio.AudioEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.audio.AudioEvent)
  return false;
#undef DO_
}

void AudioEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.audio.AudioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->moving_result(), output);
  }

  // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->audio_type(), output);
  }

  // optional bool siren_is_on = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->siren_is_on(), output);
  }

  // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->audio_direction(), output);
  }

  // optional .apollo.common.Pose pose = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.audio.AudioEvent)
}

::google::protobuf::uint8* AudioEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.audio.AudioEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->moving_result(), target);
  }

  // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->audio_type(), target);
  }

  // optional bool siren_is_on = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->siren_is_on(), target);
  }

  // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->audio_direction(), target);
  }

  // optional .apollo.common.Pose pose = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pose(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.audio.AudioEvent)
  return target;
}

size_t AudioEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.audio.AudioEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.Pose pose = 7;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
    if (has_moving_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moving_result());
    }

    // optional .apollo.audio.AudioType audio_type = 4 [default = UNKNOWN_TYPE];
    if (has_audio_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_type());
    }

    // optional bool siren_is_on = 5;
    if (has_siren_is_on()) {
      total_size += 1 + 1;
    }

    // optional .apollo.audio.AudioDirection audio_direction = 6 [default = UNKNOWN_DIRECTION];
    if (has_audio_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_direction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.audio.AudioEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.audio.AudioEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.audio.AudioEvent)
    MergeFrom(*source);
  }
}

void AudioEvent::MergeFrom(const AudioEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.audio.AudioEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::apollo::common::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      moving_result_ = from.moving_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_type_ = from.audio_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      siren_is_on_ = from.siren_is_on_;
    }
    if (cached_has_bits & 0x00000040u) {
      audio_direction_ = from.audio_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.audio.AudioEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioEvent::CopyFrom(const AudioEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.audio.AudioEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEvent::IsInitialized() const {
  return true;
}

void AudioEvent::Swap(AudioEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioEvent::InternalSwap(AudioEvent* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(id_, other->id_);
  swap(moving_result_, other->moving_result_);
  swap(audio_type_, other->audio_type_);
  swap(siren_is_on_, other->siren_is_on_);
  swap(audio_direction_, other->audio_direction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AudioEvent::GetMetadata() const {
  protobuf_audio_5fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_audio_5fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace audio
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::audio::AudioEvent* Arena::CreateMaybeMessage< ::apollo::audio::AudioEvent >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::audio::AudioEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
