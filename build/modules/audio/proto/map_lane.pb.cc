// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_lane.proto

#include "map_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Curve;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_map_5fid_2eproto
namespace protobuf_map_5flane_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5flane_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneBoundaryType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5flane_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneSampleAssociation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5flane_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaneBoundary;
}  // namespace protobuf_map_5flane_2eproto
namespace apollo {
namespace hdmap {
class LaneBoundaryTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryType>
      _instance;
} _LaneBoundaryType_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary>
      _instance;
} _LaneBoundary_default_instance_;
class LaneSampleAssociationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSampleAssociation>
      _instance;
} _LaneSampleAssociation_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace protobuf_map_5flane_2eproto {
static void InitDefaultsLaneBoundaryType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LaneBoundaryType_default_instance_;
    new (ptr) ::apollo::hdmap::LaneBoundaryType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LaneBoundaryType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneBoundaryType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneBoundaryType}, {}};

static void InitDefaultsLaneBoundary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LaneBoundary_default_instance_;
    new (ptr) ::apollo::hdmap::LaneBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LaneBoundary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaneBoundary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaneBoundary}, {
      &protobuf_map_5fgeometry_2eproto::scc_info_Curve.base,
      &protobuf_map_5flane_2eproto::scc_info_LaneBoundaryType.base,}};

static void InitDefaultsLaneSampleAssociation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LaneSampleAssociation_default_instance_;
    new (ptr) ::apollo::hdmap::LaneSampleAssociation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LaneSampleAssociation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneSampleAssociation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneSampleAssociation}, {}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Lane_default_instance_;
    new (ptr) ::apollo::hdmap::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLane}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Curve.base,
      &protobuf_map_5flane_2eproto::scc_info_LaneBoundary.base,
      &protobuf_map_5flane_2eproto::scc_info_LaneSampleAssociation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundaryType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSampleAssociation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, types_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, virtual__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, boundary_type_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, width_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, central_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, predecessor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, successor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, left_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, right_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, left_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, right_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, left_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, right_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, left_road_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, right_road_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Lane, self_reverse_lane_id_),
  0,
  1,
  2,
  3,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  7,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::hdmap::LaneBoundaryType)},
  { 9, 18, sizeof(::apollo::hdmap::LaneBoundary)},
  { 22, 29, sizeof(::apollo::hdmap::LaneSampleAssociation)},
  { 31, 58, sizeof(::apollo::hdmap::Lane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_LaneBoundaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_LaneBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_LaneSampleAssociation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Lane_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_lane.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016map_lane.proto\022\014apollo.hdmap\032\014map_id.p"
      "roto\032\022map_geometry.proto\"\313\001\n\020LaneBoundar"
      "yType\022\t\n\001s\030\001 \001(\001\0222\n\005types\030\002 \003(\0162#.apollo"
      ".hdmap.LaneBoundaryType.Type\"x\n\004Type\022\013\n\007"
      "UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW\020\001\022\020\n\014DOTTED_W"
      "HITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017\n\013SOLID_WHITE\020"
      "\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CURB\020\006\"\212\001\n\014LaneB"
      "oundary\022\"\n\005curve\030\001 \001(\0132\023.apollo.hdmap.Cu"
      "rve\022\016\n\006length\030\002 \001(\001\022\017\n\007virtual\030\003 \001(\010\0225\n\r"
      "boundary_type\030\004 \003(\0132\036.apollo.hdmap.LaneB"
      "oundaryType\"1\n\025LaneSampleAssociation\022\t\n\001"
      "s\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\"\356\t\n\004Lane\022\034\n\002id\030\001 "
      "\001(\0132\020.apollo.hdmap.Id\022*\n\rcentral_curve\030\002"
      " \001(\0132\023.apollo.hdmap.Curve\0221\n\rleft_bounda"
      "ry\030\003 \001(\0132\032.apollo.hdmap.LaneBoundary\0222\n\016"
      "right_boundary\030\004 \001(\0132\032.apollo.hdmap.Lane"
      "Boundary\022\016\n\006length\030\005 \001(\001\022\023\n\013speed_limit\030"
      "\006 \001(\001\022$\n\noverlap_id\030\007 \003(\0132\020.apollo.hdmap"
      ".Id\022(\n\016predecessor_id\030\010 \003(\0132\020.apollo.hdm"
      "ap.Id\022&\n\014successor_id\030\t \003(\0132\020.apollo.hdm"
      "ap.Id\0227\n\035left_neighbor_forward_lane_id\030\n"
      " \003(\0132\020.apollo.hdmap.Id\0228\n\036right_neighbor"
      "_forward_lane_id\030\013 \003(\0132\020.apollo.hdmap.Id"
      "\022)\n\004type\030\014 \001(\0162\033.apollo.hdmap.Lane.LaneT"
      "ype\022)\n\004turn\030\r \001(\0162\033.apollo.hdmap.Lane.La"
      "neTurn\0227\n\035left_neighbor_reverse_lane_id\030"
      "\016 \003(\0132\020.apollo.hdmap.Id\0228\n\036right_neighbo"
      "r_reverse_lane_id\030\017 \003(\0132\020.apollo.hdmap.I"
      "d\022%\n\013junction_id\030\020 \001(\0132\020.apollo.hdmap.Id"
      "\0228\n\013left_sample\030\021 \003(\0132#.apollo.hdmap.Lan"
      "eSampleAssociation\0229\n\014right_sample\030\022 \003(\013"
      "2#.apollo.hdmap.LaneSampleAssociation\0223\n"
      "\tdirection\030\023 \001(\0162 .apollo.hdmap.Lane.Lan"
      "eDirection\022=\n\020left_road_sample\030\024 \003(\0132#.a"
      "pollo.hdmap.LaneSampleAssociation\022>\n\021rig"
      "ht_road_sample\030\025 \003(\0132#.apollo.hdmap.Lane"
      "SampleAssociation\022.\n\024self_reverse_lane_i"
      "d\030\026 \003(\0132\020.apollo.hdmap.Id\"[\n\010LaneType\022\010\n"
      "\004NONE\020\001\022\020\n\014CITY_DRIVING\020\002\022\n\n\006BIKING\020\003\022\014\n"
      "\010SIDEWALK\020\004\022\013\n\007PARKING\020\005\022\014\n\010SHOULDER\020\006\"B"
      "\n\010LaneTurn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN\020\002\022\016"
      "\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004\";\n\rLaneDirect"
      "ion\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\022\017\n\013BIDIRE"
      "CTION\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_lane.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5flane_2eproto
namespace apollo {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::CURB;
const LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
const LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
const int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[1];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneType Lane::NONE;
const Lane_LaneType Lane::CITY_DRIVING;
const Lane_LaneType Lane::BIKING;
const Lane_LaneType Lane::SIDEWALK;
const Lane_LaneType Lane::PARKING;
const Lane_LaneType Lane::SHOULDER;
const Lane_LaneType Lane::LaneType_MIN;
const Lane_LaneType Lane::LaneType_MAX;
const int Lane::LaneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[2];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurn Lane::NO_TURN;
const Lane_LaneTurn Lane::LEFT_TURN;
const Lane_LaneTurn Lane::RIGHT_TURN;
const Lane_LaneTurn Lane::U_TURN;
const Lane_LaneTurn Lane::LaneTurn_MIN;
const Lane_LaneTurn Lane::LaneTurn_MAX;
const int Lane::LaneTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[3];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneDirection Lane::FORWARD;
const Lane_LaneDirection Lane::BACKWARD;
const Lane_LaneDirection Lane::BIDIRECTION;
const Lane_LaneDirection Lane::LaneDirection_MIN;
const Lane_LaneDirection Lane::LaneDirection_MAX;
const int Lane::LaneDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LaneBoundaryType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryType::kSFieldNumber;
const int LaneBoundaryType::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryType::LaneBoundaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5flane_2eproto::scc_info_LaneBoundaryType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneBoundaryType)
}

void LaneBoundaryType::SharedCtor() {
  s_ = 0;
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneBoundaryType)
  SharedDtor();
}

void LaneBoundaryType::SharedDtor() {
}

void LaneBoundaryType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundaryType::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryType& LaneBoundaryType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5flane_2eproto::scc_info_LaneBoundaryType.base);
  return *internal_default_instance();
}


void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LaneBoundaryType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::LaneBoundaryType_Type_IsValid(value)) {
            add_types(static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::apollo::hdmap::LaneBoundaryType_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LaneBoundaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LaneBoundaryType)
  return false;
#undef DO_
}

void LaneBoundaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LaneBoundaryType)
}

::google::protobuf::uint8* LaneBoundaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->types_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneBoundaryType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LaneBoundaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LaneBoundaryType)
    MergeFrom(*source);
  }
}

void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.has_s()) {
    set_s(from.s());
  }
}

void LaneBoundaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::Swap(LaneBoundaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  using std::swap;
  types_.InternalSwap(&other->types_);
  swap(s_, other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundaryType::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary::InitAsDefaultInstance() {
  ::apollo::hdmap::_LaneBoundary_default_instance_._instance.get_mutable()->curve_ = const_cast< ::apollo::hdmap::Curve*>(
      ::apollo::hdmap::Curve::internal_default_instance());
}
void LaneBoundary::clear_curve() {
  if (curve_ != NULL) curve_->Clear();
  clear_has_curve();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary::kCurveFieldNumber;
const int LaneBoundary::kLengthFieldNumber;
const int LaneBoundary::kVirtualFieldNumber;
const int LaneBoundary::kBoundaryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary::LaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5flane_2eproto::scc_info_LaneBoundary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      boundary_type_(from.boundary_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::apollo::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual__) -
    reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  ::memset(&curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual__) -
      reinterpret_cast<char*>(&curve_)) + sizeof(virtual__));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete curve_;
}

void LaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary& LaneBoundary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5flane_2eproto::scc_info_LaneBoundary.base);
  return *internal_default_instance();
}


void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual__) -
        reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LaneBoundary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool virtual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_virtual_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boundary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LaneBoundary)
  return false;
#undef DO_
}

void LaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_curve(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->virtual_(), output);
  }

  // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->boundary_type(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LaneBoundary)
}

::google::protobuf::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_curve(), deterministic, target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->virtual_(), target);
  }

  // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->boundary_type(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary_type(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional bool virtual = 3;
    if (has_virtual_()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_type_.MergeFrom(from.boundary_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual__ = from.virtual__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::Swap(LaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  CastToBase(&boundary_type_)->InternalSwap(CastToBase(&other->boundary_type_));
  swap(curve_, other->curve_);
  swap(length_, other->length_);
  swap(virtual__, other->virtual__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSampleAssociation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSampleAssociation::kSFieldNumber;
const int LaneSampleAssociation::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSampleAssociation::LaneSampleAssociation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5flane_2eproto::scc_info_LaneSampleAssociation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LaneSampleAssociation)
}
LaneSampleAssociation::LaneSampleAssociation(const LaneSampleAssociation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&s_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneSampleAssociation)
}

void LaneSampleAssociation::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&s_)) + sizeof(width_));
}

LaneSampleAssociation::~LaneSampleAssociation() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneSampleAssociation)
  SharedDtor();
}

void LaneSampleAssociation::SharedDtor() {
}

void LaneSampleAssociation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSampleAssociation::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSampleAssociation& LaneSampleAssociation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5flane_2eproto::scc_info_LaneSampleAssociation.base);
  return *internal_default_instance();
}


void LaneSampleAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&s_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSampleAssociation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LaneSampleAssociation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LaneSampleAssociation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LaneSampleAssociation)
  return false;
#undef DO_
}

void LaneSampleAssociation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LaneSampleAssociation)
}

::google::protobuf::uint8* LaneSampleAssociation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneSampleAssociation)
  return target;
}

size_t LaneSampleAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneSampleAssociation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSampleAssociation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSampleAssociation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSampleAssociation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LaneSampleAssociation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LaneSampleAssociation)
    MergeFrom(*source);
  }
}

void LaneSampleAssociation::MergeFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSampleAssociation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSampleAssociation::CopyFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSampleAssociation::IsInitialized() const {
  return true;
}

void LaneSampleAssociation::Swap(LaneSampleAssociation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSampleAssociation::InternalSwap(LaneSampleAssociation* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSampleAssociation::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::apollo::hdmap::_Lane_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  ::apollo::hdmap::_Lane_default_instance_._instance.get_mutable()->central_curve_ = const_cast< ::apollo::hdmap::Curve*>(
      ::apollo::hdmap::Curve::internal_default_instance());
  ::apollo::hdmap::_Lane_default_instance_._instance.get_mutable()->left_boundary_ = const_cast< ::apollo::hdmap::LaneBoundary*>(
      ::apollo::hdmap::LaneBoundary::internal_default_instance());
  ::apollo::hdmap::_Lane_default_instance_._instance.get_mutable()->right_boundary_ = const_cast< ::apollo::hdmap::LaneBoundary*>(
      ::apollo::hdmap::LaneBoundary::internal_default_instance());
  ::apollo::hdmap::_Lane_default_instance_._instance.get_mutable()->junction_id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}
void Lane::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Lane::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->Clear();
  clear_has_central_curve();
}
void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
void Lane::clear_successor_id() {
  successor_id_.Clear();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->Clear();
  clear_has_junction_id();
}
void Lane::clear_self_reverse_lane_id() {
  self_reverse_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kCentralCurveFieldNumber;
const int Lane::kLeftBoundaryFieldNumber;
const int Lane::kRightBoundaryFieldNumber;
const int Lane::kLengthFieldNumber;
const int Lane::kSpeedLimitFieldNumber;
const int Lane::kOverlapIdFieldNumber;
const int Lane::kPredecessorIdFieldNumber;
const int Lane::kSuccessorIdFieldNumber;
const int Lane::kLeftNeighborForwardLaneIdFieldNumber;
const int Lane::kRightNeighborForwardLaneIdFieldNumber;
const int Lane::kTypeFieldNumber;
const int Lane::kTurnFieldNumber;
const int Lane::kLeftNeighborReverseLaneIdFieldNumber;
const int Lane::kRightNeighborReverseLaneIdFieldNumber;
const int Lane::kJunctionIdFieldNumber;
const int Lane::kLeftSampleFieldNumber;
const int Lane::kRightSampleFieldNumber;
const int Lane::kDirectionFieldNumber;
const int Lane::kLeftRoadSampleFieldNumber;
const int Lane::kRightRoadSampleFieldNumber;
const int Lane::kSelfReverseLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5flane_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_),
      predecessor_id_(from.predecessor_id_),
      successor_id_(from.successor_id_),
      left_neighbor_forward_lane_id_(from.left_neighbor_forward_lane_id_),
      right_neighbor_forward_lane_id_(from.right_neighbor_forward_lane_id_),
      left_neighbor_reverse_lane_id_(from.left_neighbor_reverse_lane_id_),
      right_neighbor_reverse_lane_id_(from.right_neighbor_reverse_lane_id_),
      left_sample_(from.left_sample_),
      right_sample_(from.right_sample_),
      left_road_sample_(from.left_road_sample_),
      right_road_sample_(from.right_road_sample_),
      self_reverse_lane_id_(from.self_reverse_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_central_curve()) {
    central_curve_ = new ::apollo::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = NULL;
  }
  if (from.has_left_boundary()) {
    left_boundary_ = new ::apollo::hdmap::LaneBoundary(*from.left_boundary_);
  } else {
    left_boundary_ = NULL;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::apollo::hdmap::LaneBoundary(*from.right_boundary_);
  } else {
    right_boundary_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::apollo::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&length_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Lane)
}

void Lane::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_limit_));
  direction_ = 1;
  type_ = 1;
  turn_ = 1;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete central_curve_;
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5flane_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  predecessor_id_.Clear();
  successor_id_.Clear();
  left_neighbor_forward_lane_id_.Clear();
  right_neighbor_forward_lane_id_.Clear();
  left_neighbor_reverse_lane_id_.Clear();
  right_neighbor_reverse_lane_id_.Clear();
  left_sample_.Clear();
  right_sample_.Clear();
  left_road_sample_.Clear();
  right_road_sample_.Clear();
  self_reverse_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(central_curve_ != NULL);
      central_curve_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_boundary_ != NULL);
      left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_boundary_ != NULL);
      right_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&length_)) + sizeof(speed_limit_));
    direction_ = 1;
  }
  if (cached_has_bits & 768u) {
    type_ = 1;
    turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Curve central_curve = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id overlap_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id predecessor_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predecessor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id successor_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_successor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Lane.LaneType type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneType_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneTurn_IsValid(value)) {
            set_turn(static_cast< ::apollo::hdmap::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Id junction_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneDirection_IsValid(value)) {
            set_direction(static_cast< ::apollo::hdmap::Lane_LaneDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id self_reverse_lane_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_self_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .apollo.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_central_curve(), output);
  }

  // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_left_boundary(), output);
  }

  // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_right_boundary(), output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .apollo.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->overlap_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->predecessor_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id successor_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->successor_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->left_neighbor_forward_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->right_neighbor_forward_lane_id(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->turn(), output);
  }

  // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->left_neighbor_reverse_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->right_neighbor_reverse_lane_id(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_junction_id(), output);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->left_sample(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->right_sample(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->direction(), output);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_road_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->left_road_sample(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_road_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->right_road_sample(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id self_reverse_lane_id = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_reverse_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->self_reverse_lane_id(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .apollo.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_central_curve(), deterministic, target);
  }

  // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_left_boundary(), deterministic, target);
  }

  // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_right_boundary(), deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .apollo.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->predecessor_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id successor_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->successor_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->left_neighbor_forward_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->right_neighbor_forward_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->turn(), target);
  }

  // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->left_neighbor_reverse_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->right_neighbor_reverse_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_junction_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->left_sample(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->right_sample(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->direction(), target);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_road_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->left_road_sample(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_road_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->right_road_sample(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id self_reverse_lane_id = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_reverse_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->self_reverse_lane_id(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Id overlap_id = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id predecessor_id = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->predecessor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predecessor_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id successor_id = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->successor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->successor_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_neighbor_forward_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_neighbor_forward_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_neighbor_reverse_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_neighbor_reverse_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->left_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_sample(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->right_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_sample(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->left_road_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_road_sample(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->right_road_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_road_sample(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id self_reverse_lane_id = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->self_reverse_lane_id_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->self_reverse_lane_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.Curve central_curve = 2;
    if (has_central_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *central_curve_);
    }

    // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
    if (has_left_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_boundary_);
    }

    // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
    if (has_right_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_boundary_);
    }

    // optional .apollo.hdmap.Id junction_id = 16;
    if (has_junction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *junction_id_);
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.hdmap.Lane.LaneType type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  successor_id_.MergeFrom(from.successor_id_);
  left_neighbor_forward_lane_id_.MergeFrom(from.left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.MergeFrom(from.right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.MergeFrom(from.left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.MergeFrom(from.right_neighbor_reverse_lane_id_);
  left_sample_.MergeFrom(from.left_sample_);
  right_sample_.MergeFrom(from.right_sample_);
  left_road_sample_.MergeFrom(from.left_road_sample_);
  right_road_sample_.MergeFrom(from.right_road_sample_);
  self_reverse_lane_id_.MergeFrom(from.self_reverse_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_central_curve()->::apollo::hdmap::Curve::MergeFrom(from.central_curve());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_left_boundary()->::apollo::hdmap::LaneBoundary::MergeFrom(from.left_boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_right_boundary()->::apollo::hdmap::LaneBoundary::MergeFrom(from.right_boundary());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      turn_ = from.turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  CastToBase(&overlap_id_)->InternalSwap(CastToBase(&other->overlap_id_));
  CastToBase(&predecessor_id_)->InternalSwap(CastToBase(&other->predecessor_id_));
  CastToBase(&successor_id_)->InternalSwap(CastToBase(&other->successor_id_));
  CastToBase(&left_neighbor_forward_lane_id_)->InternalSwap(CastToBase(&other->left_neighbor_forward_lane_id_));
  CastToBase(&right_neighbor_forward_lane_id_)->InternalSwap(CastToBase(&other->right_neighbor_forward_lane_id_));
  CastToBase(&left_neighbor_reverse_lane_id_)->InternalSwap(CastToBase(&other->left_neighbor_reverse_lane_id_));
  CastToBase(&right_neighbor_reverse_lane_id_)->InternalSwap(CastToBase(&other->right_neighbor_reverse_lane_id_));
  CastToBase(&left_sample_)->InternalSwap(CastToBase(&other->left_sample_));
  CastToBase(&right_sample_)->InternalSwap(CastToBase(&other->right_sample_));
  CastToBase(&left_road_sample_)->InternalSwap(CastToBase(&other->left_road_sample_));
  CastToBase(&right_road_sample_)->InternalSwap(CastToBase(&other->right_road_sample_));
  CastToBase(&self_reverse_lane_id_)->InternalSwap(CastToBase(&other->self_reverse_lane_id_));
  swap(id_, other->id_);
  swap(central_curve_, other->central_curve_);
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_, other->right_boundary_);
  swap(junction_id_, other->junction_id_);
  swap(length_, other->length_);
  swap(speed_limit_, other->speed_limit_);
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(turn_, other->turn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::LaneBoundaryType* Arena::CreateMaybeMessage< ::apollo::hdmap::LaneBoundaryType >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LaneBoundaryType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::LaneBoundary* Arena::CreateMaybeMessage< ::apollo::hdmap::LaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LaneBoundary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::LaneSampleAssociation* Arena::CreateMaybeMessage< ::apollo::hdmap::LaneSampleAssociation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LaneSampleAssociation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Lane* Arena::CreateMaybeMessage< ::apollo::hdmap::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Lane >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
