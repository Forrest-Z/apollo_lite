// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_common.proto

#ifndef PROTOBUF_INCLUDED_audio_5fcommon_2eproto
#define PROTOBUF_INCLUDED_audio_5fcommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_audio_5fcommon_2eproto 

namespace protobuf_audio_5fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_audio_5fcommon_2eproto
namespace apollo {
namespace audio {
}  // namespace audio
}  // namespace apollo
namespace apollo {
namespace audio {

enum MovingResult {
  UNKNOWN = 0,
  APPROACHING = 1,
  DEPARTING = 2,
  STATIONARY = 3
};
bool MovingResult_IsValid(int value);
const MovingResult MovingResult_MIN = UNKNOWN;
const MovingResult MovingResult_MAX = STATIONARY;
const int MovingResult_ARRAYSIZE = MovingResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovingResult_descriptor();
inline const ::std::string& MovingResult_Name(MovingResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovingResult_descriptor(), value);
}
inline bool MovingResult_Parse(
    const ::std::string& name, MovingResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovingResult>(
    MovingResult_descriptor(), name, value);
}
enum AudioType {
  UNKNOWN_TYPE = 0,
  POLICE = 1,
  AMBULANCE = 2,
  FIRETRUCK = 3
};
bool AudioType_IsValid(int value);
const AudioType AudioType_MIN = UNKNOWN_TYPE;
const AudioType AudioType_MAX = FIRETRUCK;
const int AudioType_ARRAYSIZE = AudioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioType_descriptor();
inline const ::std::string& AudioType_Name(AudioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioType_descriptor(), value);
}
inline bool AudioType_Parse(
    const ::std::string& name, AudioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioType>(
    AudioType_descriptor(), name, value);
}
enum AudioDirection {
  UNKNOWN_DIRECTION = 0,
  FRONT = 1,
  LEFT = 2,
  BACK = 3,
  RIGHT = 4
};
bool AudioDirection_IsValid(int value);
const AudioDirection AudioDirection_MIN = UNKNOWN_DIRECTION;
const AudioDirection AudioDirection_MAX = RIGHT;
const int AudioDirection_ARRAYSIZE = AudioDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioDirection_descriptor();
inline const ::std::string& AudioDirection_Name(AudioDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioDirection_descriptor(), value);
}
inline bool AudioDirection_Parse(
    const ::std::string& name, AudioDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioDirection>(
    AudioDirection_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::audio::MovingResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::MovingResult>() {
  return ::apollo::audio::MovingResult_descriptor();
}
template <> struct is_proto_enum< ::apollo::audio::AudioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::AudioType>() {
  return ::apollo::audio::AudioType_descriptor();
}
template <> struct is_proto_enum< ::apollo::audio::AudioDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::audio::AudioDirection>() {
  return ::apollo::audio::AudioDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_audio_5fcommon_2eproto
