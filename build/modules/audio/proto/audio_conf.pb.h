// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_conf.proto

#ifndef PROTOBUF_INCLUDED_audio_5fconf_2eproto
#define PROTOBUF_INCLUDED_audio_5fconf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_audio_5fconf_2eproto 

namespace protobuf_audio_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_audio_5fconf_2eproto
namespace apollo {
namespace audio {
class AudioConf;
class AudioConfDefaultTypeInternal;
extern AudioConfDefaultTypeInternal _AudioConf_default_instance_;
class TopicConf;
class TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
}  // namespace audio
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::audio::AudioConf* Arena::CreateMaybeMessage<::apollo::audio::AudioConf>(Arena*);
template<> ::apollo::audio::TopicConf* Arena::CreateMaybeMessage<::apollo::audio::TopicConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace audio {

// ===================================================================

class TopicConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.audio.TopicConf) */ {
 public:
  TopicConf();
  virtual ~TopicConf();

  TopicConf(const TopicConf& from);

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicConf(TopicConf&& from) noexcept
    : TopicConf() {
    *this = ::std::move(from);
  }

  inline TopicConf& operator=(TopicConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicConf* internal_default_instance() {
    return reinterpret_cast<const TopicConf*>(
               &_TopicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicConf* other);
  friend void swap(TopicConf& a, TopicConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicConf* New() const final {
    return CreateMaybeMessage<TopicConf>(NULL);
  }

  TopicConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicConf& from);
  void MergeFrom(const TopicConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string audio_data_topic_name = 1;
  bool has_audio_data_topic_name() const;
  void clear_audio_data_topic_name();
  static const int kAudioDataTopicNameFieldNumber = 1;
  const ::std::string& audio_data_topic_name() const;
  void set_audio_data_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_data_topic_name(::std::string&& value);
  #endif
  void set_audio_data_topic_name(const char* value);
  void set_audio_data_topic_name(const char* value, size_t size);
  ::std::string* mutable_audio_data_topic_name();
  ::std::string* release_audio_data_topic_name();
  void set_allocated_audio_data_topic_name(::std::string* audio_data_topic_name);

  // optional string audio_detection_topic_name = 2;
  bool has_audio_detection_topic_name() const;
  void clear_audio_detection_topic_name();
  static const int kAudioDetectionTopicNameFieldNumber = 2;
  const ::std::string& audio_detection_topic_name() const;
  void set_audio_detection_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_detection_topic_name(::std::string&& value);
  #endif
  void set_audio_detection_topic_name(const char* value);
  void set_audio_detection_topic_name(const char* value, size_t size);
  ::std::string* mutable_audio_detection_topic_name();
  ::std::string* release_audio_detection_topic_name();
  void set_allocated_audio_detection_topic_name(::std::string* audio_detection_topic_name);

  // optional string localization_topic_name = 3;
  bool has_localization_topic_name() const;
  void clear_localization_topic_name();
  static const int kLocalizationTopicNameFieldNumber = 3;
  const ::std::string& localization_topic_name() const;
  void set_localization_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_localization_topic_name(::std::string&& value);
  #endif
  void set_localization_topic_name(const char* value);
  void set_localization_topic_name(const char* value, size_t size);
  ::std::string* mutable_localization_topic_name();
  ::std::string* release_localization_topic_name();
  void set_allocated_localization_topic_name(::std::string* localization_topic_name);

  // optional string audio_event_topic_name = 4;
  bool has_audio_event_topic_name() const;
  void clear_audio_event_topic_name();
  static const int kAudioEventTopicNameFieldNumber = 4;
  const ::std::string& audio_event_topic_name() const;
  void set_audio_event_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_event_topic_name(::std::string&& value);
  #endif
  void set_audio_event_topic_name(const char* value);
  void set_audio_event_topic_name(const char* value, size_t size);
  ::std::string* mutable_audio_event_topic_name();
  ::std::string* release_audio_event_topic_name();
  void set_allocated_audio_event_topic_name(::std::string* audio_event_topic_name);

  // optional string perception_topic_name = 5;
  bool has_perception_topic_name() const;
  void clear_perception_topic_name();
  static const int kPerceptionTopicNameFieldNumber = 5;
  const ::std::string& perception_topic_name() const;
  void set_perception_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_perception_topic_name(::std::string&& value);
  #endif
  void set_perception_topic_name(const char* value);
  void set_perception_topic_name(const char* value, size_t size);
  ::std::string* mutable_perception_topic_name();
  ::std::string* release_perception_topic_name();
  void set_allocated_perception_topic_name(::std::string* perception_topic_name);

  // @@protoc_insertion_point(class_scope:apollo.audio.TopicConf)
 private:
  void set_has_audio_data_topic_name();
  void clear_has_audio_data_topic_name();
  void set_has_audio_detection_topic_name();
  void clear_has_audio_detection_topic_name();
  void set_has_localization_topic_name();
  void clear_has_localization_topic_name();
  void set_has_audio_event_topic_name();
  void clear_has_audio_event_topic_name();
  void set_has_perception_topic_name();
  void clear_has_perception_topic_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr audio_data_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr audio_detection_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr localization_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr audio_event_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr perception_topic_name_;
  friend struct ::protobuf_audio_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.audio.AudioConf) */ {
 public:
  AudioConf();
  virtual ~AudioConf();

  AudioConf(const AudioConf& from);

  inline AudioConf& operator=(const AudioConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioConf(AudioConf&& from) noexcept
    : AudioConf() {
    *this = ::std::move(from);
  }

  inline AudioConf& operator=(AudioConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioConf* internal_default_instance() {
    return reinterpret_cast<const AudioConf*>(
               &_AudioConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AudioConf* other);
  friend void swap(AudioConf& a, AudioConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioConf* New() const final {
    return CreateMaybeMessage<AudioConf>(NULL);
  }

  AudioConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioConf& from);
  void MergeFrom(const AudioConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string respeaker_extrinsics_path = 2;
  bool has_respeaker_extrinsics_path() const;
  void clear_respeaker_extrinsics_path();
  static const int kRespeakerExtrinsicsPathFieldNumber = 2;
  const ::std::string& respeaker_extrinsics_path() const;
  void set_respeaker_extrinsics_path(const ::std::string& value);
  #if LANG_CXX11
  void set_respeaker_extrinsics_path(::std::string&& value);
  #endif
  void set_respeaker_extrinsics_path(const char* value);
  void set_respeaker_extrinsics_path(const char* value, size_t size);
  ::std::string* mutable_respeaker_extrinsics_path();
  ::std::string* release_respeaker_extrinsics_path();
  void set_allocated_respeaker_extrinsics_path(::std::string* respeaker_extrinsics_path);

  // optional .apollo.audio.TopicConf topic_conf = 1;
  bool has_topic_conf() const;
  void clear_topic_conf();
  static const int kTopicConfFieldNumber = 1;
  private:
  const ::apollo::audio::TopicConf& _internal_topic_conf() const;
  public:
  const ::apollo::audio::TopicConf& topic_conf() const;
  ::apollo::audio::TopicConf* release_topic_conf();
  ::apollo::audio::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::audio::TopicConf* topic_conf);

  // @@protoc_insertion_point(class_scope:apollo.audio.AudioConf)
 private:
  void set_has_topic_conf();
  void clear_has_topic_conf();
  void set_has_respeaker_extrinsics_path();
  void clear_has_respeaker_extrinsics_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr respeaker_extrinsics_path_;
  ::apollo::audio::TopicConf* topic_conf_;
  friend struct ::protobuf_audio_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicConf

// optional string audio_data_topic_name = 1;
inline bool TopicConf::has_audio_data_topic_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicConf::set_has_audio_data_topic_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicConf::clear_has_audio_data_topic_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicConf::clear_audio_data_topic_name() {
  audio_data_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_data_topic_name();
}
inline const ::std::string& TopicConf::audio_data_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_data_topic_name)
  return audio_data_topic_name_.GetNoArena();
}
inline void TopicConf::set_audio_data_topic_name(const ::std::string& value) {
  set_has_audio_data_topic_name();
  audio_data_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_data_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_audio_data_topic_name(::std::string&& value) {
  set_has_audio_data_topic_name();
  audio_data_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.TopicConf.audio_data_topic_name)
}
#endif
inline void TopicConf::set_audio_data_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_data_topic_name();
  audio_data_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.TopicConf.audio_data_topic_name)
}
inline void TopicConf::set_audio_data_topic_name(const char* value, size_t size) {
  set_has_audio_data_topic_name();
  audio_data_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.TopicConf.audio_data_topic_name)
}
inline ::std::string* TopicConf::mutable_audio_data_topic_name() {
  set_has_audio_data_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_data_topic_name)
  return audio_data_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_audio_data_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_data_topic_name)
  if (!has_audio_data_topic_name()) {
    return NULL;
  }
  clear_has_audio_data_topic_name();
  return audio_data_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_audio_data_topic_name(::std::string* audio_data_topic_name) {
  if (audio_data_topic_name != NULL) {
    set_has_audio_data_topic_name();
  } else {
    clear_has_audio_data_topic_name();
  }
  audio_data_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_data_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_data_topic_name)
}

// optional string audio_detection_topic_name = 2;
inline bool TopicConf::has_audio_detection_topic_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicConf::set_has_audio_detection_topic_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicConf::clear_has_audio_detection_topic_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicConf::clear_audio_detection_topic_name() {
  audio_detection_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_detection_topic_name();
}
inline const ::std::string& TopicConf::audio_detection_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_detection_topic_name)
  return audio_detection_topic_name_.GetNoArena();
}
inline void TopicConf::set_audio_detection_topic_name(const ::std::string& value) {
  set_has_audio_detection_topic_name();
  audio_detection_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_detection_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_audio_detection_topic_name(::std::string&& value) {
  set_has_audio_detection_topic_name();
  audio_detection_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.TopicConf.audio_detection_topic_name)
}
#endif
inline void TopicConf::set_audio_detection_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_detection_topic_name();
  audio_detection_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.TopicConf.audio_detection_topic_name)
}
inline void TopicConf::set_audio_detection_topic_name(const char* value, size_t size) {
  set_has_audio_detection_topic_name();
  audio_detection_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.TopicConf.audio_detection_topic_name)
}
inline ::std::string* TopicConf::mutable_audio_detection_topic_name() {
  set_has_audio_detection_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_detection_topic_name)
  return audio_detection_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_audio_detection_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_detection_topic_name)
  if (!has_audio_detection_topic_name()) {
    return NULL;
  }
  clear_has_audio_detection_topic_name();
  return audio_detection_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_audio_detection_topic_name(::std::string* audio_detection_topic_name) {
  if (audio_detection_topic_name != NULL) {
    set_has_audio_detection_topic_name();
  } else {
    clear_has_audio_detection_topic_name();
  }
  audio_detection_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_detection_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_detection_topic_name)
}

// optional string localization_topic_name = 3;
inline bool TopicConf::has_localization_topic_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicConf::set_has_localization_topic_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicConf::clear_has_localization_topic_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicConf::clear_localization_topic_name() {
  localization_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_topic_name();
}
inline const ::std::string& TopicConf::localization_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.localization_topic_name)
  return localization_topic_name_.GetNoArena();
}
inline void TopicConf::set_localization_topic_name(const ::std::string& value) {
  set_has_localization_topic_name();
  localization_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.localization_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_localization_topic_name(::std::string&& value) {
  set_has_localization_topic_name();
  localization_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.TopicConf.localization_topic_name)
}
#endif
inline void TopicConf::set_localization_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localization_topic_name();
  localization_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.TopicConf.localization_topic_name)
}
inline void TopicConf::set_localization_topic_name(const char* value, size_t size) {
  set_has_localization_topic_name();
  localization_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.TopicConf.localization_topic_name)
}
inline ::std::string* TopicConf::mutable_localization_topic_name() {
  set_has_localization_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.localization_topic_name)
  return localization_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_localization_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.localization_topic_name)
  if (!has_localization_topic_name()) {
    return NULL;
  }
  clear_has_localization_topic_name();
  return localization_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_localization_topic_name(::std::string* localization_topic_name) {
  if (localization_topic_name != NULL) {
    set_has_localization_topic_name();
  } else {
    clear_has_localization_topic_name();
  }
  localization_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.localization_topic_name)
}

// optional string audio_event_topic_name = 4;
inline bool TopicConf::has_audio_event_topic_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicConf::set_has_audio_event_topic_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicConf::clear_has_audio_event_topic_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicConf::clear_audio_event_topic_name() {
  audio_event_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_event_topic_name();
}
inline const ::std::string& TopicConf::audio_event_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.audio_event_topic_name)
  return audio_event_topic_name_.GetNoArena();
}
inline void TopicConf::set_audio_event_topic_name(const ::std::string& value) {
  set_has_audio_event_topic_name();
  audio_event_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.audio_event_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_audio_event_topic_name(::std::string&& value) {
  set_has_audio_event_topic_name();
  audio_event_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.TopicConf.audio_event_topic_name)
}
#endif
inline void TopicConf::set_audio_event_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_event_topic_name();
  audio_event_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.TopicConf.audio_event_topic_name)
}
inline void TopicConf::set_audio_event_topic_name(const char* value, size_t size) {
  set_has_audio_event_topic_name();
  audio_event_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.TopicConf.audio_event_topic_name)
}
inline ::std::string* TopicConf::mutable_audio_event_topic_name() {
  set_has_audio_event_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.audio_event_topic_name)
  return audio_event_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_audio_event_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.audio_event_topic_name)
  if (!has_audio_event_topic_name()) {
    return NULL;
  }
  clear_has_audio_event_topic_name();
  return audio_event_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_audio_event_topic_name(::std::string* audio_event_topic_name) {
  if (audio_event_topic_name != NULL) {
    set_has_audio_event_topic_name();
  } else {
    clear_has_audio_event_topic_name();
  }
  audio_event_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_event_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.audio_event_topic_name)
}

// optional string perception_topic_name = 5;
inline bool TopicConf::has_perception_topic_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicConf::set_has_perception_topic_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicConf::clear_has_perception_topic_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicConf::clear_perception_topic_name() {
  perception_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_perception_topic_name();
}
inline const ::std::string& TopicConf::perception_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.audio.TopicConf.perception_topic_name)
  return perception_topic_name_.GetNoArena();
}
inline void TopicConf::set_perception_topic_name(const ::std::string& value) {
  set_has_perception_topic_name();
  perception_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.TopicConf.perception_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_perception_topic_name(::std::string&& value) {
  set_has_perception_topic_name();
  perception_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.TopicConf.perception_topic_name)
}
#endif
inline void TopicConf::set_perception_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_perception_topic_name();
  perception_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.TopicConf.perception_topic_name)
}
inline void TopicConf::set_perception_topic_name(const char* value, size_t size) {
  set_has_perception_topic_name();
  perception_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.TopicConf.perception_topic_name)
}
inline ::std::string* TopicConf::mutable_perception_topic_name() {
  set_has_perception_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.audio.TopicConf.perception_topic_name)
  return perception_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_perception_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.audio.TopicConf.perception_topic_name)
  if (!has_perception_topic_name()) {
    return NULL;
  }
  clear_has_perception_topic_name();
  return perception_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_perception_topic_name(::std::string* perception_topic_name) {
  if (perception_topic_name != NULL) {
    set_has_perception_topic_name();
  } else {
    clear_has_perception_topic_name();
  }
  perception_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), perception_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.TopicConf.perception_topic_name)
}

// -------------------------------------------------------------------

// AudioConf

// optional .apollo.audio.TopicConf topic_conf = 1;
inline bool AudioConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->Clear();
  clear_has_topic_conf();
}
inline const ::apollo::audio::TopicConf& AudioConf::_internal_topic_conf() const {
  return *topic_conf_;
}
inline const ::apollo::audio::TopicConf& AudioConf::topic_conf() const {
  const ::apollo::audio::TopicConf* p = topic_conf_;
  // @@protoc_insertion_point(field_get:apollo.audio.AudioConf.topic_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::audio::TopicConf*>(
      &::apollo::audio::_TopicConf_default_instance_);
}
inline ::apollo::audio::TopicConf* AudioConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::audio::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
inline ::apollo::audio::TopicConf* AudioConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::audio::TopicConf>(GetArenaNoVirtual());
    topic_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioConf.topic_conf)
  return topic_conf_;
}
inline void AudioConf::set_allocated_topic_conf(::apollo::audio::TopicConf* topic_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete topic_conf_;
  }
  if (topic_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioConf.topic_conf)
}

// optional string respeaker_extrinsics_path = 2;
inline bool AudioConf::has_respeaker_extrinsics_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioConf::set_has_respeaker_extrinsics_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioConf::clear_has_respeaker_extrinsics_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioConf::clear_respeaker_extrinsics_path() {
  respeaker_extrinsics_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_respeaker_extrinsics_path();
}
inline const ::std::string& AudioConf::respeaker_extrinsics_path() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioConf.respeaker_extrinsics_path)
  return respeaker_extrinsics_path_.GetNoArena();
}
inline void AudioConf::set_respeaker_extrinsics_path(const ::std::string& value) {
  set_has_respeaker_extrinsics_path();
  respeaker_extrinsics_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.audio.AudioConf.respeaker_extrinsics_path)
}
#if LANG_CXX11
inline void AudioConf::set_respeaker_extrinsics_path(::std::string&& value) {
  set_has_respeaker_extrinsics_path();
  respeaker_extrinsics_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.audio.AudioConf.respeaker_extrinsics_path)
}
#endif
inline void AudioConf::set_respeaker_extrinsics_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_respeaker_extrinsics_path();
  respeaker_extrinsics_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.audio.AudioConf.respeaker_extrinsics_path)
}
inline void AudioConf::set_respeaker_extrinsics_path(const char* value, size_t size) {
  set_has_respeaker_extrinsics_path();
  respeaker_extrinsics_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.audio.AudioConf.respeaker_extrinsics_path)
}
inline ::std::string* AudioConf::mutable_respeaker_extrinsics_path() {
  set_has_respeaker_extrinsics_path();
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioConf.respeaker_extrinsics_path)
  return respeaker_extrinsics_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioConf::release_respeaker_extrinsics_path() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioConf.respeaker_extrinsics_path)
  if (!has_respeaker_extrinsics_path()) {
    return NULL;
  }
  clear_has_respeaker_extrinsics_path();
  return respeaker_extrinsics_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioConf::set_allocated_respeaker_extrinsics_path(::std::string* respeaker_extrinsics_path) {
  if (respeaker_extrinsics_path != NULL) {
    set_has_respeaker_extrinsics_path();
  } else {
    clear_has_respeaker_extrinsics_path();
  }
  respeaker_extrinsics_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), respeaker_extrinsics_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioConf.respeaker_extrinsics_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_audio_5fconf_2eproto
