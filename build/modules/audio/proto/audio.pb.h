// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio.proto

#ifndef PROTOBUF_INCLUDED_audio_2eproto
#define PROTOBUF_INCLUDED_audio_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "microphone_config.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_audio_2eproto 

namespace protobuf_audio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_audio_2eproto
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
class AudioData;
class AudioDataDefaultTypeInternal;
extern AudioDataDefaultTypeInternal _AudioData_default_instance_;
class ChannelData;
class ChannelDataDefaultTypeInternal;
extern ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::microphone::config::AudioData* Arena::CreateMaybeMessage<::apollo::drivers::microphone::config::AudioData>(Arena*);
template<> ::apollo::drivers::microphone::config::ChannelData* Arena::CreateMaybeMessage<::apollo::drivers::microphone::config::ChannelData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {

// ===================================================================

class ChannelData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.microphone.config.ChannelData) */ {
 public:
  ChannelData();
  virtual ~ChannelData();

  ChannelData(const ChannelData& from);

  inline ChannelData& operator=(const ChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelData(ChannelData&& from) noexcept
    : ChannelData() {
    *this = ::std::move(from);
  }

  inline ChannelData& operator=(ChannelData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelData* internal_default_instance() {
    return reinterpret_cast<const ChannelData*>(
               &_ChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChannelData* other);
  friend void swap(ChannelData& a, ChannelData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelData* New() const final {
    return CreateMaybeMessage<ChannelData>(NULL);
  }

  ChannelData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelData& from);
  void MergeFrom(const ChannelData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 1;
  ::apollo::drivers::microphone::config::ChannelType channel_type() const;
  void set_channel_type(::apollo::drivers::microphone::config::ChannelType value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.microphone.config.ChannelData)
 private:
  void set_has_channel_type();
  void clear_has_channel_type();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int channel_type_;
  friend struct ::protobuf_audio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.microphone.config.AudioData) */ {
 public:
  AudioData();
  virtual ~AudioData();

  AudioData(const AudioData& from);

  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioData(AudioData&& from) noexcept
    : AudioData() {
    *this = ::std::move(from);
  }

  inline AudioData& operator=(AudioData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioData* internal_default_instance() {
    return reinterpret_cast<const AudioData*>(
               &_AudioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AudioData* other);
  friend void swap(AudioData& a, AudioData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioData* New() const final {
    return CreateMaybeMessage<AudioData>(NULL);
  }

  AudioData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioData& from);
  void MergeFrom(const AudioData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.drivers.microphone.config.ChannelData channel_data = 3;
  int channel_data_size() const;
  void clear_channel_data();
  static const int kChannelDataFieldNumber = 3;
  ::apollo::drivers::microphone::config::ChannelData* mutable_channel_data(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::drivers::microphone::config::ChannelData >*
      mutable_channel_data();
  const ::apollo::drivers::microphone::config::ChannelData& channel_data(int index) const;
  ::apollo::drivers::microphone::config::ChannelData* add_channel_data();
  const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::microphone::config::ChannelData >&
      channel_data() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.drivers.microphone.config.MicrophoneConfig microphone_config = 2;
  bool has_microphone_config() const;
  void clear_microphone_config();
  static const int kMicrophoneConfigFieldNumber = 2;
  private:
  const ::apollo::drivers::microphone::config::MicrophoneConfig& _internal_microphone_config() const;
  public:
  const ::apollo::drivers::microphone::config::MicrophoneConfig& microphone_config() const;
  ::apollo::drivers::microphone::config::MicrophoneConfig* release_microphone_config();
  ::apollo::drivers::microphone::config::MicrophoneConfig* mutable_microphone_config();
  void set_allocated_microphone_config(::apollo::drivers::microphone::config::MicrophoneConfig* microphone_config);

  // @@protoc_insertion_point(class_scope:apollo.drivers.microphone.config.AudioData)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_microphone_config();
  void clear_has_microphone_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::drivers::microphone::config::ChannelData > channel_data_;
  ::apollo::common::Header* header_;
  ::apollo::drivers::microphone::config::MicrophoneConfig* microphone_config_;
  friend struct ::protobuf_audio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelData

// optional .apollo.drivers.microphone.config.ChannelType channel_type = 1;
inline bool ChannelData::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelData::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelData::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelData::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::apollo::drivers::microphone::config::ChannelType ChannelData::channel_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.ChannelData.channel_type)
  return static_cast< ::apollo::drivers::microphone::config::ChannelType >(channel_type_);
}
inline void ChannelData::set_channel_type(::apollo::drivers::microphone::config::ChannelType value) {
  assert(::apollo::drivers::microphone::config::ChannelType_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.ChannelData.channel_type)
}

// optional bytes data = 2;
inline bool ChannelData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ChannelData::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.ChannelData.data)
  return data_.GetNoArena();
}
inline void ChannelData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.microphone.config.ChannelData.data)
}
#if LANG_CXX11
inline void ChannelData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.microphone.config.ChannelData.data)
}
#endif
inline void ChannelData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.microphone.config.ChannelData.data)
}
inline void ChannelData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.microphone.config.ChannelData.data)
}
inline ::std::string* ChannelData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.ChannelData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelData::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.microphone.config.ChannelData.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.microphone.config.ChannelData.data)
}

// -------------------------------------------------------------------

// AudioData

// optional .apollo.common.Header header = 1;
inline bool AudioData::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioData::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioData::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& AudioData::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& AudioData::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.AudioData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* AudioData::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.microphone.config.AudioData.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* AudioData::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.AudioData.header)
  return header_;
}
inline void AudioData::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.microphone.config.AudioData.header)
}

// optional .apollo.drivers.microphone.config.MicrophoneConfig microphone_config = 2;
inline bool AudioData::has_microphone_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioData::set_has_microphone_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioData::clear_has_microphone_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::microphone::config::MicrophoneConfig& AudioData::_internal_microphone_config() const {
  return *microphone_config_;
}
inline const ::apollo::drivers::microphone::config::MicrophoneConfig& AudioData::microphone_config() const {
  const ::apollo::drivers::microphone::config::MicrophoneConfig* p = microphone_config_;
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.AudioData.microphone_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::microphone::config::MicrophoneConfig*>(
      &::apollo::drivers::microphone::config::_MicrophoneConfig_default_instance_);
}
inline ::apollo::drivers::microphone::config::MicrophoneConfig* AudioData::release_microphone_config() {
  // @@protoc_insertion_point(field_release:apollo.drivers.microphone.config.AudioData.microphone_config)
  clear_has_microphone_config();
  ::apollo::drivers::microphone::config::MicrophoneConfig* temp = microphone_config_;
  microphone_config_ = NULL;
  return temp;
}
inline ::apollo::drivers::microphone::config::MicrophoneConfig* AudioData::mutable_microphone_config() {
  set_has_microphone_config();
  if (microphone_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::microphone::config::MicrophoneConfig>(GetArenaNoVirtual());
    microphone_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.AudioData.microphone_config)
  return microphone_config_;
}
inline void AudioData::set_allocated_microphone_config(::apollo::drivers::microphone::config::MicrophoneConfig* microphone_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(microphone_config_);
  }
  if (microphone_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      microphone_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, microphone_config, submessage_arena);
    }
    set_has_microphone_config();
  } else {
    clear_has_microphone_config();
  }
  microphone_config_ = microphone_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.microphone.config.AudioData.microphone_config)
}

// repeated .apollo.drivers.microphone.config.ChannelData channel_data = 3;
inline int AudioData::channel_data_size() const {
  return channel_data_.size();
}
inline void AudioData::clear_channel_data() {
  channel_data_.Clear();
}
inline ::apollo::drivers::microphone::config::ChannelData* AudioData::mutable_channel_data(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.microphone.config.AudioData.channel_data)
  return channel_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::drivers::microphone::config::ChannelData >*
AudioData::mutable_channel_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.microphone.config.AudioData.channel_data)
  return &channel_data_;
}
inline const ::apollo::drivers::microphone::config::ChannelData& AudioData::channel_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.microphone.config.AudioData.channel_data)
  return channel_data_.Get(index);
}
inline ::apollo::drivers::microphone::config::ChannelData* AudioData::add_channel_data() {
  // @@protoc_insertion_point(field_add:apollo.drivers.microphone.config.AudioData.channel_data)
  return channel_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::microphone::config::ChannelData >&
AudioData::channel_data() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.microphone.config.AudioData.channel_data)
  return channel_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_audio_2eproto
