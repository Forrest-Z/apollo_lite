// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio0.proto

#ifndef PROTOBUF_INCLUDED_audio0_2eproto
#define PROTOBUF_INCLUDED_audio0_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "audio_common.pb.h"
#include "geometry.pb.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_audio0_2eproto 

namespace protobuf_audio0_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_audio0_2eproto
namespace apollo {
namespace audio {
class AudioDetection;
class AudioDetectionDefaultTypeInternal;
extern AudioDetectionDefaultTypeInternal _AudioDetection_default_instance_;
}  // namespace audio
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::audio::AudioDetection* Arena::CreateMaybeMessage<::apollo::audio::AudioDetection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace audio {

// ===================================================================

class AudioDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.audio.AudioDetection) */ {
 public:
  AudioDetection();
  virtual ~AudioDetection();

  AudioDetection(const AudioDetection& from);

  inline AudioDetection& operator=(const AudioDetection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioDetection(AudioDetection&& from) noexcept
    : AudioDetection() {
    *this = ::std::move(from);
  }

  inline AudioDetection& operator=(AudioDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioDetection* internal_default_instance() {
    return reinterpret_cast<const AudioDetection*>(
               &_AudioDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AudioDetection* other);
  friend void swap(AudioDetection& a, AudioDetection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioDetection* New() const final {
    return CreateMaybeMessage<AudioDetection>(NULL);
  }

  AudioDetection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioDetection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioDetection& from);
  void MergeFrom(const AudioDetection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.Point3D position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  public:
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional bool is_siren = 2;
  bool has_is_siren() const;
  void clear_is_siren();
  static const int kIsSirenFieldNumber = 2;
  bool is_siren() const;
  void set_is_siren(bool value);

  // optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
  bool has_moving_result() const;
  void clear_moving_result();
  static const int kMovingResultFieldNumber = 3;
  ::apollo::audio::MovingResult moving_result() const;
  void set_moving_result(::apollo::audio::MovingResult value);

  // optional double source_degree = 5;
  bool has_source_degree() const;
  void clear_source_degree();
  static const int kSourceDegreeFieldNumber = 5;
  double source_degree() const;
  void set_source_degree(double value);

  // @@protoc_insertion_point(class_scope:apollo.audio.AudioDetection)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_is_siren();
  void clear_has_is_siren();
  void set_has_moving_result();
  void clear_has_moving_result();
  void set_has_position();
  void clear_has_position();
  void set_has_source_degree();
  void clear_has_source_degree();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::Point3D* position_;
  bool is_siren_;
  int moving_result_;
  double source_degree_;
  friend struct ::protobuf_audio0_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioDetection

// optional .apollo.common.Header header = 1;
inline bool AudioDetection::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioDetection::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioDetection::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& AudioDetection::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& AudioDetection::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.audio.AudioDetection.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* AudioDetection::release_header() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioDetection.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* AudioDetection::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioDetection.header)
  return header_;
}
inline void AudioDetection::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioDetection.header)
}

// optional bool is_siren = 2;
inline bool AudioDetection::has_is_siren() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioDetection::set_has_is_siren() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioDetection::clear_has_is_siren() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioDetection::clear_is_siren() {
  is_siren_ = false;
  clear_has_is_siren();
}
inline bool AudioDetection::is_siren() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioDetection.is_siren)
  return is_siren_;
}
inline void AudioDetection::set_is_siren(bool value) {
  set_has_is_siren();
  is_siren_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioDetection.is_siren)
}

// optional .apollo.audio.MovingResult moving_result = 3 [default = UNKNOWN];
inline bool AudioDetection::has_moving_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioDetection::set_has_moving_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioDetection::clear_has_moving_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioDetection::clear_moving_result() {
  moving_result_ = 0;
  clear_has_moving_result();
}
inline ::apollo::audio::MovingResult AudioDetection::moving_result() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioDetection.moving_result)
  return static_cast< ::apollo::audio::MovingResult >(moving_result_);
}
inline void AudioDetection::set_moving_result(::apollo::audio::MovingResult value) {
  assert(::apollo::audio::MovingResult_IsValid(value));
  set_has_moving_result();
  moving_result_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioDetection.moving_result)
}

// optional .apollo.common.Point3D position = 4;
inline bool AudioDetection::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioDetection::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioDetection::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Point3D& AudioDetection::_internal_position() const {
  return *position_;
}
inline const ::apollo::common::Point3D& AudioDetection::position() const {
  const ::apollo::common::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:apollo.audio.AudioDetection.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* AudioDetection::release_position() {
  // @@protoc_insertion_point(field_release:apollo.audio.AudioDetection.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* AudioDetection::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.audio.AudioDetection.position)
  return position_;
}
inline void AudioDetection::set_allocated_position(::apollo::common::Point3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.audio.AudioDetection.position)
}

// optional double source_degree = 5;
inline bool AudioDetection::has_source_degree() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioDetection::set_has_source_degree() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioDetection::clear_has_source_degree() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioDetection::clear_source_degree() {
  source_degree_ = 0;
  clear_has_source_degree();
}
inline double AudioDetection::source_degree() const {
  // @@protoc_insertion_point(field_get:apollo.audio.AudioDetection.source_degree)
  return source_degree_;
}
inline void AudioDetection::set_source_degree(double value) {
  set_has_source_degree();
  source_degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.audio.AudioDetection.source_degree)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_audio0_2eproto
