// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_geometry.proto

#include "map_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointENU;
}  // namespace protobuf_geometry_2eproto
namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LineSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CurveSegment;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace apollo {
namespace hdmap {
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class LineSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineSegment>
      _instance;
} _LineSegment_default_instance_;
class CurveSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurveSegment>
      _instance;
  const ::apollo::hdmap::LineSegment* line_segment_;
} _CurveSegment_default_instance_;
class CurveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Curve>
      _instance;
} _Curve_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace protobuf_map_5fgeometry_2eproto {
static void InitDefaultsPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Polygon_default_instance_;
    new (ptr) ::apollo::hdmap::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Polygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygon}, {
      &protobuf_geometry_2eproto::scc_info_PointENU.base,}};

static void InitDefaultsLineSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LineSegment_default_instance_;
    new (ptr) ::apollo::hdmap::LineSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LineSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LineSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLineSegment}, {
      &protobuf_geometry_2eproto::scc_info_PointENU.base,}};

static void InitDefaultsCurveSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_CurveSegment_default_instance_;
    new (ptr) ::apollo::hdmap::CurveSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::CurveSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CurveSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCurveSegment}, {
      &protobuf_map_5fgeometry_2eproto::scc_info_LineSegment.base,
      &protobuf_geometry_2eproto::scc_info_PointENU.base,}};

static void InitDefaultsCurve() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Curve_default_instance_;
    new (ptr) ::apollo::hdmap::Curve();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Curve::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Curve =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCurve}, {
      &protobuf_map_5fgeometry_2eproto::scc_info_CurveSegment.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LineSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurveSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Curve.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Polygon, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LineSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::LineSegment, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::apollo::hdmap::CurveSegmentDefaultTypeInternal, line_segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, start_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::CurveSegment, curve_type_),
  ~0u,
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Curve, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Curve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Curve, segment_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::hdmap::Polygon)},
  { 7, 13, sizeof(::apollo::hdmap::LineSegment)},
  { 14, 25, sizeof(::apollo::hdmap::CurveSegment)},
  { 30, 36, sizeof(::apollo::hdmap::Curve)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_LineSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_CurveSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Curve_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_geometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022map_geometry.proto\022\014apollo.hdmap\032\016geom"
      "etry.proto\"1\n\007Polygon\022&\n\005point\030\001 \003(\0132\027.a"
      "pollo.common.PointENU\"5\n\013LineSegment\022&\n\005"
      "point\030\001 \003(\0132\027.apollo.common.PointENU\"\254\001\n"
      "\014CurveSegment\0221\n\014line_segment\030\001 \001(\0132\031.ap"
      "ollo.hdmap.LineSegmentH\000\022\t\n\001s\030\006 \001(\001\022/\n\016s"
      "tart_position\030\007 \001(\0132\027.apollo.common.Poin"
      "tENU\022\017\n\007heading\030\010 \001(\001\022\016\n\006length\030\t \001(\001B\014\n"
      "\ncurve_type\"4\n\005Curve\022+\n\007segment\030\001 \003(\0132\032."
      "apollo.hdmap.CurveSegment"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_geometry.proto", &protobuf_RegisterTypes);
  ::protobuf_geometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace apollo {
namespace hdmap {

// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
void Polygon::clear_point() {
  point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Polygon)
}

void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Polygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.PointENU point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.PointENU point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LineSegment::InitAsDefaultInstance() {
}
void LineSegment::clear_point() {
  point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineSegment::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineSegment::LineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fgeometry_2eproto::scc_info_LineSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LineSegment)
}
LineSegment::LineSegment(const LineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LineSegment)
}

void LineSegment::SharedCtor() {
}

LineSegment::~LineSegment() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LineSegment)
  SharedDtor();
}

void LineSegment::SharedDtor() {
}

void LineSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LineSegment::descriptor() {
  ::protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineSegment& LineSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fgeometry_2eproto::scc_info_LineSegment.base);
  return *internal_default_instance();
}


void LineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.LineSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.PointENU point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.LineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.LineSegment)
  return false;
#undef DO_
}

void LineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.LineSegment)
}

::google::protobuf::uint8* LineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.PointENU point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LineSegment)
  return target;
}

size_t LineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.PointENU point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LineSegment)
    MergeFrom(*source);
  }
}

void LineSegment::MergeFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void LineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSegment::CopyFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment::IsInitialized() const {
  return true;
}

void LineSegment::Swap(LineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineSegment::InternalSwap(LineSegment* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LineSegment::GetMetadata() const {
  protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurveSegment::InitAsDefaultInstance() {
  ::apollo::hdmap::_CurveSegment_default_instance_.line_segment_ = const_cast< ::apollo::hdmap::LineSegment*>(
      ::apollo::hdmap::LineSegment::internal_default_instance());
  ::apollo::hdmap::_CurveSegment_default_instance_._instance.get_mutable()->start_position_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
void CurveSegment::set_allocated_line_segment(::apollo::hdmap::LineSegment* line_segment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_curve_type();
  if (line_segment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_segment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_segment, submessage_arena);
    }
    set_has_line_segment();
    curve_type_.line_segment_ = line_segment;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.CurveSegment.line_segment)
}
void CurveSegment::clear_start_position() {
  if (start_position_ != NULL) start_position_->Clear();
  clear_has_start_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveSegment::kLineSegmentFieldNumber;
const int CurveSegment::kSFieldNumber;
const int CurveSegment::kStartPositionFieldNumber;
const int CurveSegment::kHeadingFieldNumber;
const int CurveSegment::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveSegment::CurveSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fgeometry_2eproto::scc_info_CurveSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.CurveSegment)
}
CurveSegment::CurveSegment(const CurveSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_position()) {
    start_position_ = new ::apollo::common::PointENU(*from.start_position_);
  } else {
    start_position_ = NULL;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&s_)) + sizeof(length_));
  clear_has_curve_type();
  switch (from.curve_type_case()) {
    case kLineSegment: {
      mutable_line_segment()->::apollo::hdmap::LineSegment::MergeFrom(from.line_segment());
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.CurveSegment)
}

void CurveSegment::SharedCtor() {
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(length_));
  clear_has_curve_type();
}

CurveSegment::~CurveSegment() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.CurveSegment)
  SharedDtor();
}

void CurveSegment::SharedDtor() {
  if (this != internal_default_instance()) delete start_position_;
  if (has_curve_type()) {
    clear_curve_type();
  }
}

void CurveSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurveSegment::descriptor() {
  ::protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurveSegment& CurveSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fgeometry_2eproto::scc_info_CurveSegment.base);
  return *internal_default_instance();
}


void CurveSegment::clear_curve_type() {
// @@protoc_insertion_point(one_of_clear_start:apollo.hdmap.CurveSegment)
  switch (curve_type_case()) {
    case kLineSegment: {
      delete curve_type_.line_segment_;
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}


void CurveSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.CurveSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(start_position_ != NULL);
    start_position_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&s_)) + sizeof(length_));
  }
  clear_curve_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurveSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.CurveSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.LineSegment line_segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointENU start_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.CurveSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.CurveSegment)
  return false;
#undef DO_
}

void CurveSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.CurveSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apollo.hdmap.LineSegment line_segment = 1;
  if (has_line_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_line_segment(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double s = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional .apollo.common.PointENU start_position = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_start_position(), output);
  }

  // optional double heading = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading(), output);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.CurveSegment)
}

::google::protobuf::uint8* CurveSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.CurveSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apollo.hdmap.LineSegment line_segment = 1;
  if (has_line_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_line_segment(), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double s = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional .apollo.common.PointENU start_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_start_position(), deterministic, target);
  }

  // optional double heading = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.CurveSegment)
  return target;
}

size_t CurveSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.CurveSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.PointENU start_position = 7;
    if (has_start_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_position_);
    }

    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double heading = 8;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (has_length()) {
      total_size += 1 + 8;
    }

  }
  switch (curve_type_case()) {
    // optional .apollo.hdmap.LineSegment line_segment = 1;
    case kLineSegment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *curve_type_.line_segment_);
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurveSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.CurveSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CurveSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.CurveSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.CurveSegment)
    MergeFrom(*source);
  }
}

void CurveSegment::MergeFrom(const CurveSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.CurveSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start_position()->::apollo::common::PointENU::MergeFrom(from.start_position());
    }
    if (cached_has_bits & 0x00000002u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.curve_type_case()) {
    case kLineSegment: {
      mutable_line_segment()->::apollo::hdmap::LineSegment::MergeFrom(from.line_segment());
      break;
    }
    case CURVE_TYPE_NOT_SET: {
      break;
    }
  }
}

void CurveSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.CurveSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveSegment::CopyFrom(const CurveSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.CurveSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveSegment::IsInitialized() const {
  return true;
}

void CurveSegment::Swap(CurveSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveSegment::InternalSwap(CurveSegment* other) {
  using std::swap;
  swap(start_position_, other->start_position_);
  swap(s_, other->s_);
  swap(heading_, other->heading_);
  swap(length_, other->length_);
  swap(curve_type_, other->curve_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurveSegment::GetMetadata() const {
  protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Curve::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Curve::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Curve::Curve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fgeometry_2eproto::scc_info_Curve.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Curve)
}
Curve::Curve(const Curve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Curve)
}

void Curve::SharedCtor() {
}

Curve::~Curve() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Curve)
  SharedDtor();
}

void Curve::SharedDtor() {
}

void Curve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Curve::descriptor() {
  ::protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Curve& Curve::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fgeometry_2eproto::scc_info_Curve.base);
  return *internal_default_instance();
}


void Curve::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Curve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Curve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Curve)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.hdmap.CurveSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Curve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Curve)
  return false;
#undef DO_
}

void Curve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Curve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.CurveSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Curve)
}

::google::protobuf::uint8* Curve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Curve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.CurveSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segment(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Curve)
  return target;
}

size_t Curve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Curve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.CurveSegment segment = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segment(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Curve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Curve)
  GOOGLE_DCHECK_NE(&from, this);
  const Curve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Curve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Curve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Curve)
    MergeFrom(*source);
  }
}

void Curve::MergeFrom(const Curve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Curve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
}

void Curve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Curve::CopyFrom(const Curve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Curve::IsInitialized() const {
  return true;
}

void Curve::Swap(Curve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Curve::InternalSwap(Curve* other) {
  using std::swap;
  CastToBase(&segment_)->InternalSwap(CastToBase(&other->segment_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Curve::GetMetadata() const {
  protobuf_map_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Polygon* Arena::CreateMaybeMessage< ::apollo::hdmap::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Polygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::LineSegment* Arena::CreateMaybeMessage< ::apollo::hdmap::LineSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LineSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::CurveSegment* Arena::CreateMaybeMessage< ::apollo::hdmap::CurveSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::CurveSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Curve* Arena::CreateMaybeMessage< ::apollo::hdmap::Curve >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Curve >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
