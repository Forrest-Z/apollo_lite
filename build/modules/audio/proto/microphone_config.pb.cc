// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: microphone_config.proto

#include "microphone_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
class MicrophoneConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MicrophoneConfig>
      _instance;
} _MicrophoneConfig_default_instance_;
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
namespace protobuf_microphone_5fconfig_2eproto {
static void InitDefaultsMicrophoneConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::microphone::config::_MicrophoneConfig_default_instance_;
    new (ptr) ::apollo::drivers::microphone::config::MicrophoneConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::microphone::config::MicrophoneConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MicrophoneConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMicrophoneConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MicrophoneConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, microphone_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, record_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, sample_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, mic_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::microphone::config::MicrophoneConfig, channel_type_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::drivers::microphone::config::MicrophoneConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::microphone::config::_MicrophoneConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "microphone_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027microphone_config.proto\022 apollo.driver"
      "s.microphone.config\"\364\002\n\020MicrophoneConfig"
      "\022\\\n\020microphone_model\030\002 \001(\0162B.apollo.driv"
      "ers.microphone.config.MicrophoneConfig.M"
      "icrophoneModel\022\r\n\005chunk\030\003 \001(\005\022\023\n\013sample_"
      "rate\030\004 \001(\002\022\026\n\016record_seconds\030\005 \001(\002\022\024\n\014sa"
      "mple_width\030\006 \001(\005\022\024\n\014channel_name\030\007 \001(\t\022\020"
      "\n\010frame_id\030\010 \001(\t\022\024\n\014mic_distance\030\t \001(\002\022C"
      "\n\014channel_type\030\001 \003(\0162-.apollo.drivers.mi"
      "crophone.config.ChannelType\"-\n\017Microphon"
      "eModel\022\013\n\007UNKNOWN\020\000\022\r\n\tRESPEAKER\020\001*:\n\013Ch"
      "annelType\022\013\n\007UNKNOWN\020\000\022\007\n\003ASR\020\001\022\007\n\003RAW\020\002"
      "\022\014\n\010PLAYBACK\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "microphone_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_microphone_5fconfig_2eproto
namespace apollo {
namespace drivers {
namespace microphone {
namespace config {
const ::google::protobuf::EnumDescriptor* MicrophoneConfig_MicrophoneModel_descriptor() {
  protobuf_microphone_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_microphone_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool MicrophoneConfig_MicrophoneModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MicrophoneConfig_MicrophoneModel MicrophoneConfig::UNKNOWN;
const MicrophoneConfig_MicrophoneModel MicrophoneConfig::RESPEAKER;
const MicrophoneConfig_MicrophoneModel MicrophoneConfig::MicrophoneModel_MIN;
const MicrophoneConfig_MicrophoneModel MicrophoneConfig::MicrophoneModel_MAX;
const int MicrophoneConfig::MicrophoneModel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChannelType_descriptor() {
  protobuf_microphone_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_microphone_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MicrophoneConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MicrophoneConfig::kMicrophoneModelFieldNumber;
const int MicrophoneConfig::kChunkFieldNumber;
const int MicrophoneConfig::kSampleRateFieldNumber;
const int MicrophoneConfig::kRecordSecondsFieldNumber;
const int MicrophoneConfig::kSampleWidthFieldNumber;
const int MicrophoneConfig::kChannelNameFieldNumber;
const int MicrophoneConfig::kFrameIdFieldNumber;
const int MicrophoneConfig::kMicDistanceFieldNumber;
const int MicrophoneConfig::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MicrophoneConfig::MicrophoneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_microphone_5fconfig_2eproto::scc_info_MicrophoneConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.microphone.config.MicrophoneConfig)
}
MicrophoneConfig::MicrophoneConfig(const MicrophoneConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      channel_type_(from.channel_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  ::memcpy(&microphone_model_, &from.microphone_model_,
    static_cast<size_t>(reinterpret_cast<char*>(&mic_distance_) -
    reinterpret_cast<char*>(&microphone_model_)) + sizeof(mic_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.microphone.config.MicrophoneConfig)
}

void MicrophoneConfig::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&microphone_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mic_distance_) -
      reinterpret_cast<char*>(&microphone_model_)) + sizeof(mic_distance_));
}

MicrophoneConfig::~MicrophoneConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.microphone.config.MicrophoneConfig)
  SharedDtor();
}

void MicrophoneConfig::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MicrophoneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MicrophoneConfig::descriptor() {
  ::protobuf_microphone_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_microphone_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MicrophoneConfig& MicrophoneConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_microphone_5fconfig_2eproto::scc_info_MicrophoneConfig.base);
  return *internal_default_instance();
}


void MicrophoneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.microphone.config.MicrophoneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&microphone_model_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mic_distance_) -
        reinterpret_cast<char*>(&microphone_model_)) + sizeof(mic_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MicrophoneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.microphone.config.MicrophoneConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::microphone::config::ChannelType_IsValid(value)) {
            add_channel_type(static_cast< ::apollo::drivers::microphone::config::ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::drivers::microphone::config::ChannelType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_channel_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel_IsValid(value)) {
            set_microphone_model(static_cast< ::apollo::drivers::microphone::config::MicrophoneConfig_MicrophoneModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chunk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sample_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float record_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_record_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &record_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sample_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sample_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.microphone.config.MicrophoneConfig.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string frame_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.microphone.config.MicrophoneConfig.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mic_distance = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_mic_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mic_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.microphone.config.MicrophoneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.microphone.config.MicrophoneConfig)
  return false;
#undef DO_
}

void MicrophoneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.microphone.config.MicrophoneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  for (int i = 0, n = this->channel_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->microphone_model(), output);
  }

  // optional int32 chunk = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chunk(), output);
  }

  // optional float sample_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sample_rate(), output);
  }

  // optional float record_seconds = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->record_seconds(), output);
  }

  // optional int32 sample_width = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sample_width(), output);
  }

  // optional string channel_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->channel_name(), output);
  }

  // optional string frame_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->frame_id(), output);
  }

  // optional float mic_distance = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mic_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.microphone.config.MicrophoneConfig)
}

::google::protobuf::uint8* MicrophoneConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.microphone.config.MicrophoneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->channel_type_, target);

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->microphone_model(), target);
  }

  // optional int32 chunk = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chunk(), target);
  }

  // optional float sample_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sample_rate(), target);
  }

  // optional float record_seconds = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->record_seconds(), target);
  }

  // optional int32 sample_width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sample_width(), target);
  }

  // optional string channel_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->channel_name(), target);
  }

  // optional string frame_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.microphone.config.MicrophoneConfig.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->frame_id(), target);
  }

  // optional float mic_distance = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mic_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.microphone.config.MicrophoneConfig)
  return target;
}

size_t MicrophoneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.microphone.config.MicrophoneConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.drivers.microphone.config.ChannelType channel_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->channel_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string channel_name = 7;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string frame_id = 8;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional .apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel microphone_model = 2;
    if (has_microphone_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->microphone_model());
    }

    // optional int32 chunk = 3;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk());
    }

    // optional float sample_rate = 4;
    if (has_sample_rate()) {
      total_size += 1 + 4;
    }

    // optional float record_seconds = 5;
    if (has_record_seconds()) {
      total_size += 1 + 4;
    }

    // optional int32 sample_width = 6;
    if (has_sample_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_width());
    }

    // optional float mic_distance = 9;
    if (has_mic_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MicrophoneConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MicrophoneConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MicrophoneConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.microphone.config.MicrophoneConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.microphone.config.MicrophoneConfig)
    MergeFrom(*source);
  }
}

void MicrophoneConfig::MergeFrom(const MicrophoneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_type_.MergeFrom(from.channel_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      microphone_model_ = from.microphone_model_;
    }
    if (cached_has_bits & 0x00000008u) {
      chunk_ = from.chunk_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_rate_ = from.sample_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      record_seconds_ = from.record_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      sample_width_ = from.sample_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      mic_distance_ = from.mic_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicrophoneConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicrophoneConfig::CopyFrom(const MicrophoneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.microphone.config.MicrophoneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicrophoneConfig::IsInitialized() const {
  return true;
}

void MicrophoneConfig::Swap(MicrophoneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MicrophoneConfig::InternalSwap(MicrophoneConfig* other) {
  using std::swap;
  channel_type_.InternalSwap(&other->channel_type_);
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(microphone_model_, other->microphone_model_);
  swap(chunk_, other->chunk_);
  swap(sample_rate_, other->sample_rate_);
  swap(record_seconds_, other->record_seconds_);
  swap(sample_width_, other->sample_width_);
  swap(mic_distance_, other->mic_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MicrophoneConfig::GetMetadata() const {
  protobuf_microphone_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_microphone_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace microphone
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::microphone::config::MicrophoneConfig* Arena::CreateMaybeMessage< ::apollo::drivers::microphone::config::MicrophoneConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::microphone::config::MicrophoneConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
