// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization_status.proto

#include "localization_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {
class MsfSensorMsgStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsfSensorMsgStatus>
      _instance;
} _MsfSensorMsgStatus_default_instance_;
class MsfStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsfStatus>
      _instance;
} _MsfStatus_default_instance_;
}  // namespace localization
}  // namespace apollo
namespace protobuf_localization_5fstatus_2eproto {
static void InitDefaultsMsfSensorMsgStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::localization::_MsfSensorMsgStatus_default_instance_;
    new (ptr) ::apollo::localization::MsfSensorMsgStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::localization::MsfSensorMsgStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsfSensorMsgStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsfSensorMsgStatus}, {}};

static void InitDefaultsMsfStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::localization::_MsfStatus_default_instance_;
    new (ptr) ::apollo::localization::MsfStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::localization::MsfStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MsfStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMsfStatus}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MsfSensorMsgStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MsfStatus.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfSensorMsgStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfSensorMsgStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfSensorMsgStatus, imu_delay_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfSensorMsgStatus, imu_missing_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfSensorMsgStatus, imu_data_status_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, local_lidar_consistency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, gnss_consistency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, local_lidar_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, local_lidar_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, gnsspos_position_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::localization::MsfStatus, msf_running_status_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::localization::MsfSensorMsgStatus)},
  { 11, 22, sizeof(::apollo::localization::MsfStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::localization::_MsfSensorMsgStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::localization::_MsfStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "localization_status.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031localization_status.proto\022\023apollo.loca"
      "lization\"\334\001\n\022MsfSensorMsgStatus\022@\n\020imu_d"
      "elay_status\030\001 \001(\0162&.apollo.localization."
      "ImuMsgDelayStatus\022D\n\022imu_missing_status\030"
      "\002 \001(\0162(.apollo.localization.ImuMsgMissin"
      "gStatus\022>\n\017imu_data_status\030\003 \001(\0162%.apoll"
      "o.localization.ImuMsgDataStatus\"\251\003\n\tMsfS"
      "tatus\022K\n\027local_lidar_consistency\030\001 \001(\0162*"
      ".apollo.localization.LocalLidarConsisten"
      "cy\022>\n\020gnss_consistency\030\002 \001(\0162$.apollo.lo"
      "calization.GnssConsistency\022A\n\022local_lida"
      "r_status\030\003 \001(\0162%.apollo.localization.Loc"
      "alLidarStatus\022C\n\023local_lidar_quality\030\004 \001"
      "(\0162&.apollo.localization.LocalLidarQuali"
      "ty\022D\n\025gnsspos_position_type\030\005 \001(\0162%.apol"
      "lo.localization.GnssPositionType\022A\n\022msf_"
      "running_status\030\006 \001(\0162%.apollo.localizati"
      "on.MsfRunningStatus*\242\002\n\020LocalLidarStatus"
      "\022\032\n\026MSF_LOCAL_LIDAR_NORMAL\020\000\022\037\n\033MSF_LOCA"
      "L_LIDAR_MAP_MISSING\020\001\022&\n\"MSF_LOCAL_LIDAR"
      "_EXTRINSICS_MISSING\020\002\022&\n\"MSF_LOCAL_LIDAR"
      "_MAP_LOADING_FAILED\020\003\022\035\n\031MSF_LOCAL_LIDAR"
      "_NO_OUTPUT\020\004\022\036\n\032MSF_LOCAL_LIDAR_OUT_OF_M"
      "AP\020\005\022\034\n\030MSF_LOCAL_LIDAR_NOT_GOOD\020\006\022$\n MS"
      "F_LOCAL_LIDAR_UNDEFINED_STATUS\020\007*\202\001\n\021Loc"
      "alLidarQuality\022\035\n\031MSF_LOCAL_LIDAR_VERY_G"
      "OOD\020\000\022\030\n\024MSF_LOCAL_LIDAR_GOOD\020\001\022\033\n\027MSF_L"
      "OCAL_LIDAR_NOT_BAD\020\002\022\027\n\023MSF_LOCAL_LIDAR_"
      "BAD\020\003*\247\001\n\025LocalLidarConsistency\022\"\n\036MSF_L"
      "OCAL_LIDAR_CONSISTENCY_00\020\000\022\"\n\036MSF_LOCAL"
      "_LIDAR_CONSISTENCY_01\020\001\022\"\n\036MSF_LOCAL_LID"
      "AR_CONSISTENCY_02\020\002\022\"\n\036MSF_LOCAL_LIDAR_C"
      "ONSISTENCY_03\020\003*\205\001\n\017GnssConsistency\022\033\n\027M"
      "SF_GNSS_CONSISTENCY_00\020\000\022\033\n\027MSF_GNSS_CON"
      "SISTENCY_01\020\001\022\033\n\027MSF_GNSS_CONSISTENCY_02"
      "\020\002\022\033\n\027MSF_GNSS_CONSISTENCY_03\020\003*\261\004\n\020Gnss"
      "PositionType\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017\n\013"
      "FIXEDHEIGHT\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELANE"
      "\020\005\022\016\n\nNARROWLANE\020\006\022\024\n\020DOPPLER_VELOCITY\020\010"
      "\022\n\n\006SINGLE\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n\nP"
      "ROPOGATED\020\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020 \022"
      "\022\n\016IONOFREE_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022\n\n"
      "\006L1_INT\0200\022\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\0202\022"
      "\022\n\016RTK_DIRECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS"
      "_PSRSP\0205\022\017\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFLOA"
      "T\0207\022\020\n\014INS_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\0209\022"
      "\023\n\017INS_OMNISTAR_HP\020:\022\023\n\017INS_OMNISTAR_XP\020"
      ";\022\017\n\013OMNISTAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n\016P"
      "PP_CONVERGING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_Conv"
      "erging\020I\022\013\n\007INS_PPP\020J\022\014\n\010MSG_LOSS\020[*t\n\021I"
      "muMsgDelayStatus\022\024\n\020IMU_DELAY_NORMAL\020\000\022\017"
      "\n\013IMU_DELAY_1\020\001\022\017\n\013IMU_DELAY_2\020\002\022\017\n\013IMU_"
      "DELAY_3\020\003\022\026\n\022IMU_DELAY_ABNORMAL\020\004*\246\001\n\023Im"
      "uMsgMissingStatus\022\026\n\022IMU_MISSING_NORMAL\020"
      "\000\022\021\n\rIMU_MISSING_1\020\001\022\021\n\rIMU_MISSING_2\020\002\022"
      "\021\n\rIMU_MISSING_3\020\003\022\021\n\rIMU_MISSING_4\020\004\022\021\n"
      "\rIMU_MISSING_5\020\005\022\030\n\024IMU_MISSING_ABNORMAL"
      "\020\006*R\n\020ImuMsgDataStatus\022\023\n\017IMU_DATA_NORMA"
      "L\020\000\022\025\n\021IMU_DATA_ABNORMAL\020\001\022\022\n\016IMU_DATA_O"
      "THER\020\002*\254\004\n\020MsfRunningStatus\022\026\n\022MSF_SOL_L"
      "IDAR_GNSS\020\000\022\022\n\016MSF_SOL_X_GNSS\020\001\022\023\n\017MSF_S"
      "OL_LIDAR_X\020\002\022\024\n\020MSF_SOL_LIDAR_XX\020\003\022\025\n\021MS"
      "F_SOL_LIDAR_XXX\020\004\022\017\n\013MSF_SOL_X_X\020\005\022\020\n\014MS"
      "F_SOL_X_XX\020\006\022\021\n\rMSF_SOL_X_XXX\020\007\022\027\n\023MSF_S"
      "SOL_LIDAR_GNSS\020\010\022\023\n\017MSF_SSOL_X_GNSS\020\t\022\024\n"
      "\020MSF_SSOL_LIDAR_X\020\n\022\025\n\021MSF_SSOL_LIDAR_XX"
      "\020\013\022\026\n\022MSF_SSOL_LIDAR_XXX\020\014\022\020\n\014MSF_SSOL_X"
      "_X\020\r\022\021\n\rMSF_SSOL_X_XX\020\016\022\022\n\016MSF_SSOL_X_XX"
      "X\020\017\022\030\n\024MSF_NOSOL_LIDAR_GNSS\020\020\022\024\n\020MSF_NOS"
      "OL_X_GNSS\020\021\022\025\n\021MSF_NOSOL_LIDAR_X\020\022\022\026\n\022MS"
      "F_NOSOL_LIDAR_XX\020\023\022\027\n\023MSF_NOSOL_LIDAR_XX"
      "X\020\024\022\021\n\rMSF_NOSOL_X_X\020\025\022\022\n\016MSF_NOSOL_X_XX"
      "\020\026\022\023\n\017MSF_NOSOL_X_XXX\020\027\022\024\n\020MSF_RUNNING_I"
      "NIT\020\030"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization_status.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_localization_5fstatus_2eproto
namespace apollo {
namespace localization {
const ::google::protobuf::EnumDescriptor* LocalLidarStatus_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[0];
}
bool LocalLidarStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalLidarQuality_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[1];
}
bool LocalLidarQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalLidarConsistency_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[2];
}
bool LocalLidarConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssConsistency_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[3];
}
bool GnssConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssPositionType_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[4];
}
bool GnssPositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgDelayStatus_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[5];
}
bool ImuMsgDelayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgMissingStatus_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[6];
}
bool ImuMsgMissingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgDataStatus_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[7];
}
bool ImuMsgDataStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsfRunningStatus_descriptor() {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_5fstatus_2eproto::file_level_enum_descriptors[8];
}
bool MsfRunningStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MsfSensorMsgStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsfSensorMsgStatus::kImuDelayStatusFieldNumber;
const int MsfSensorMsgStatus::kImuMissingStatusFieldNumber;
const int MsfSensorMsgStatus::kImuDataStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsfSensorMsgStatus::MsfSensorMsgStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_localization_5fstatus_2eproto::scc_info_MsfSensorMsgStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.MsfSensorMsgStatus)
}
MsfSensorMsgStatus::MsfSensorMsgStatus(const MsfSensorMsgStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&imu_delay_status_, &from.imu_delay_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_data_status_) -
    reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.MsfSensorMsgStatus)
}

void MsfSensorMsgStatus::SharedCtor() {
  ::memset(&imu_delay_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_data_status_) -
      reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
}

MsfSensorMsgStatus::~MsfSensorMsgStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.MsfSensorMsgStatus)
  SharedDtor();
}

void MsfSensorMsgStatus::SharedDtor() {
}

void MsfSensorMsgStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MsfSensorMsgStatus::descriptor() {
  ::protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsfSensorMsgStatus& MsfSensorMsgStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_localization_5fstatus_2eproto::scc_info_MsfSensorMsgStatus.base);
  return *internal_default_instance();
}


void MsfSensorMsgStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.MsfSensorMsgStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&imu_delay_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_data_status_) -
        reinterpret_cast<char*>(&imu_delay_status_)) + sizeof(imu_data_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsfSensorMsgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.MsfSensorMsgStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgDelayStatus_IsValid(value)) {
            set_imu_delay_status(static_cast< ::apollo::localization::ImuMsgDelayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgMissingStatus_IsValid(value)) {
            set_imu_missing_status(static_cast< ::apollo::localization::ImuMsgMissingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgDataStatus_IsValid(value)) {
            set_imu_data_status(static_cast< ::apollo::localization::ImuMsgDataStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.MsfSensorMsgStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.MsfSensorMsgStatus)
  return false;
#undef DO_
}

void MsfSensorMsgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.MsfSensorMsgStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->imu_delay_status(), output);
  }

  // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->imu_missing_status(), output);
  }

  // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->imu_data_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.MsfSensorMsgStatus)
}

::google::protobuf::uint8* MsfSensorMsgStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.MsfSensorMsgStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->imu_delay_status(), target);
  }

  // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->imu_missing_status(), target);
  }

  // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->imu_data_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.MsfSensorMsgStatus)
  return target;
}

size_t MsfSensorMsgStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.MsfSensorMsgStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
    if (has_imu_delay_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_delay_status());
    }

    // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
    if (has_imu_missing_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_missing_status());
    }

    // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
    if (has_imu_data_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_data_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsfSensorMsgStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.MsfSensorMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MsfSensorMsgStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsfSensorMsgStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.MsfSensorMsgStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.MsfSensorMsgStatus)
    MergeFrom(*source);
  }
}

void MsfSensorMsgStatus::MergeFrom(const MsfSensorMsgStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.MsfSensorMsgStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      imu_delay_status_ = from.imu_delay_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      imu_missing_status_ = from.imu_missing_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      imu_data_status_ = from.imu_data_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsfSensorMsgStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.MsfSensorMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfSensorMsgStatus::CopyFrom(const MsfSensorMsgStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.MsfSensorMsgStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfSensorMsgStatus::IsInitialized() const {
  return true;
}

void MsfSensorMsgStatus::Swap(MsfSensorMsgStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsfSensorMsgStatus::InternalSwap(MsfSensorMsgStatus* other) {
  using std::swap;
  swap(imu_delay_status_, other->imu_delay_status_);
  swap(imu_missing_status_, other->imu_missing_status_);
  swap(imu_data_status_, other->imu_data_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MsfSensorMsgStatus::GetMetadata() const {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsfStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsfStatus::kLocalLidarConsistencyFieldNumber;
const int MsfStatus::kGnssConsistencyFieldNumber;
const int MsfStatus::kLocalLidarStatusFieldNumber;
const int MsfStatus::kLocalLidarQualityFieldNumber;
const int MsfStatus::kGnssposPositionTypeFieldNumber;
const int MsfStatus::kMsfRunningStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsfStatus::MsfStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_localization_5fstatus_2eproto::scc_info_MsfStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.MsfStatus)
}
MsfStatus::MsfStatus(const MsfStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&local_lidar_consistency_, &from.local_lidar_consistency_,
    static_cast<size_t>(reinterpret_cast<char*>(&msf_running_status_) -
    reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.MsfStatus)
}

void MsfStatus::SharedCtor() {
  ::memset(&local_lidar_consistency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msf_running_status_) -
      reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
}

MsfStatus::~MsfStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.MsfStatus)
  SharedDtor();
}

void MsfStatus::SharedDtor() {
}

void MsfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MsfStatus::descriptor() {
  ::protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsfStatus& MsfStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_localization_5fstatus_2eproto::scc_info_MsfStatus.base);
  return *internal_default_instance();
}


void MsfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.MsfStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&local_lidar_consistency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msf_running_status_) -
        reinterpret_cast<char*>(&local_lidar_consistency_)) + sizeof(msf_running_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsfStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.MsfStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarConsistency_IsValid(value)) {
            set_local_lidar_consistency(static_cast< ::apollo::localization::LocalLidarConsistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::GnssConsistency_IsValid(value)) {
            set_gnss_consistency(static_cast< ::apollo::localization::GnssConsistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarStatus_IsValid(value)) {
            set_local_lidar_status(static_cast< ::apollo::localization::LocalLidarStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarQuality_IsValid(value)) {
            set_local_lidar_quality(static_cast< ::apollo::localization::LocalLidarQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::GnssPositionType_IsValid(value)) {
            set_gnsspos_position_type(static_cast< ::apollo::localization::GnssPositionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MsfRunningStatus_IsValid(value)) {
            set_msf_running_status(static_cast< ::apollo::localization::MsfRunningStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.MsfStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.MsfStatus)
  return false;
#undef DO_
}

void MsfStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.MsfStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->local_lidar_consistency(), output);
  }

  // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gnss_consistency(), output);
  }

  // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->local_lidar_status(), output);
  }

  // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->local_lidar_quality(), output);
  }

  // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gnsspos_position_type(), output);
  }

  // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->msf_running_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.MsfStatus)
}

::google::protobuf::uint8* MsfStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.MsfStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->local_lidar_consistency(), target);
  }

  // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gnss_consistency(), target);
  }

  // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->local_lidar_status(), target);
  }

  // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->local_lidar_quality(), target);
  }

  // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gnsspos_position_type(), target);
  }

  // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->msf_running_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.MsfStatus)
  return target;
}

size_t MsfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.MsfStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
    if (has_local_lidar_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_consistency());
    }

    // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
    if (has_gnss_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_consistency());
    }

    // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
    if (has_local_lidar_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_status());
    }

    // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
    if (has_local_lidar_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_quality());
    }

    // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
    if (has_gnsspos_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnsspos_position_type());
    }

    // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
    if (has_msf_running_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msf_running_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsfStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.MsfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MsfStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsfStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.MsfStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.MsfStatus)
    MergeFrom(*source);
  }
}

void MsfStatus::MergeFrom(const MsfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.MsfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      local_lidar_consistency_ = from.local_lidar_consistency_;
    }
    if (cached_has_bits & 0x00000002u) {
      gnss_consistency_ = from.gnss_consistency_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_lidar_status_ = from.local_lidar_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_lidar_quality_ = from.local_lidar_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      gnsspos_position_type_ = from.gnsspos_position_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      msf_running_status_ = from.msf_running_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsfStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.MsfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfStatus::CopyFrom(const MsfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.MsfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfStatus::IsInitialized() const {
  return true;
}

void MsfStatus::Swap(MsfStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsfStatus::InternalSwap(MsfStatus* other) {
  using std::swap;
  swap(local_lidar_consistency_, other->local_lidar_consistency_);
  swap(gnss_consistency_, other->gnss_consistency_);
  swap(local_lidar_status_, other->local_lidar_status_);
  swap(local_lidar_quality_, other->local_lidar_quality_);
  swap(gnsspos_position_type_, other->gnsspos_position_type_);
  swap(msf_running_status_, other->msf_running_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MsfStatus::GetMetadata() const {
  protobuf_localization_5fstatus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_5fstatus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::localization::MsfSensorMsgStatus* Arena::CreateMaybeMessage< ::apollo::localization::MsfSensorMsgStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::localization::MsfSensorMsgStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::localization::MsfStatus* Arena::CreateMaybeMessage< ::apollo::localization::MsfStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::localization::MsfStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
