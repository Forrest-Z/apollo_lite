// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: latency_record.proto

#include "latency_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_header_2eproto
namespace protobuf_latency_5frecord_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_latency_5frecord_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencyRecord;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_latency_5frecord_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencyStat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_latency_5frecord_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LatencyTrack;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_latency_5frecord_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LatencyTrack_LatencyTrackMessage;
}  // namespace protobuf_latency_5frecord_2eproto
namespace apollo {
namespace common {
class LatencyRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyRecord>
      _instance;
} _LatencyRecord_default_instance_;
class LatencyRecordMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyRecordMap>
      _instance;
} _LatencyRecordMap_default_instance_;
class LatencyStatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyStat>
      _instance;
} _LatencyStat_default_instance_;
class LatencyTrack_LatencyTrackMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyTrack_LatencyTrackMessage>
      _instance;
} _LatencyTrack_LatencyTrackMessage_default_instance_;
class LatencyTrackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyTrack>
      _instance;
} _LatencyTrack_default_instance_;
class LatencyReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyReport>
      _instance;
} _LatencyReport_default_instance_;
}  // namespace common
}  // namespace apollo
namespace protobuf_latency_5frecord_2eproto {
static void InitDefaultsLatencyRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyRecord_default_instance_;
    new (ptr) ::apollo::common::LatencyRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencyRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencyRecord}, {}};

static void InitDefaultsLatencyRecordMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyRecordMap_default_instance_;
    new (ptr) ::apollo::common::LatencyRecordMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyRecordMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LatencyRecordMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLatencyRecordMap}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyRecord.base,}};

static void InitDefaultsLatencyStat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyStat_default_instance_;
    new (ptr) ::apollo::common::LatencyStat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyStat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencyStat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencyStat}, {}};

static void InitDefaultsLatencyTrack_LatencyTrackMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyTrack_LatencyTrackMessage_default_instance_;
    new (ptr) ::apollo::common::LatencyTrack_LatencyTrackMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyTrack_LatencyTrackMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LatencyTrack_LatencyTrackMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLatencyTrack_LatencyTrackMessage}, {
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyStat.base,}};

static void InitDefaultsLatencyTrack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyTrack_default_instance_;
    new (ptr) ::apollo::common::LatencyTrack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyTrack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LatencyTrack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLatencyTrack}, {
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack_LatencyTrackMessage.base,}};

static void InitDefaultsLatencyReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_LatencyReport_default_instance_;
    new (ptr) ::apollo::common::LatencyReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::LatencyReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LatencyReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLatencyReport}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyRecordMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyStat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyTrack_LatencyTrackMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyTrack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyReport.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecord, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecord, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecord, message_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecordMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecordMap, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecordMap, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyRecordMap, latency_records_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, min_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, max_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, aver_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyStat, sample_size_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, latency_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack_LatencyTrackMessage, latency_stat_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyTrack, latency_track_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyReport, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyReport, e2es_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::LatencyReport, modules_latency_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::common::LatencyRecord)},
  { 11, 19, sizeof(::apollo::common::LatencyRecordMap)},
  { 22, 31, sizeof(::apollo::common::LatencyStat)},
  { 35, 42, sizeof(::apollo::common::LatencyTrack_LatencyTrackMessage)},
  { 44, 50, sizeof(::apollo::common::LatencyTrack)},
  { 51, 59, sizeof(::apollo::common::LatencyReport)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyRecordMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyTrack_LatencyTrackMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_LatencyReport_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "latency_record.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024latency_record.proto\022\rapollo.common\032\014h"
      "eader.proto\"I\n\rLatencyRecord\022\022\n\nbegin_ti"
      "me\030\001 \001(\004\022\020\n\010end_time\030\002 \001(\004\022\022\n\nmessage_id"
      "\030\003 \001(\004\"\205\001\n\020LatencyRecordMap\022%\n\006header\030\001 "
      "\001(\0132\025.apollo.common.Header\022\023\n\013module_nam"
      "e\030\002 \001(\t\0225\n\017latency_records\030\003 \003(\0132\034.apoll"
      "o.common.LatencyRecord\"z\n\013LatencyStat\022)\n"
      "\014min_duration\030\001 \001(\004:\0239223372036854775808"
      "\022\024\n\014max_duration\030\002 \001(\004\022\025\n\raver_duration\030"
      "\003 \001(\004\022\023\n\013sample_size\030\004 \001(\r\"\265\001\n\014LatencyTr"
      "ack\022F\n\rlatency_track\030\001 \003(\0132/.apollo.comm"
      "on.LatencyTrack.LatencyTrackMessage\032]\n\023L"
      "atencyTrackMessage\022\024\n\014latency_name\030\001 \001(\t"
      "\0220\n\014latency_stat\030\002 \001(\0132\032.apollo.common.L"
      "atencyStat\"\237\001\n\rLatencyReport\022%\n\006header\030\001"
      " \001(\0132\025.apollo.common.Header\0221\n\014e2es_late"
      "ncy\030\002 \001(\0132\033.apollo.common.LatencyTrack\0224"
      "\n\017modules_latency\030\003 \001(\0132\033.apollo.common."
      "LatencyTrack"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "latency_record.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_latency_5frecord_2eproto
namespace apollo {
namespace common {

// ===================================================================

void LatencyRecord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyRecord::kBeginTimeFieldNumber;
const int LatencyRecord::kEndTimeFieldNumber;
const int LatencyRecord::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyRecord::LatencyRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyRecord)
}
LatencyRecord::LatencyRecord(const LatencyRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyRecord)
}

void LatencyRecord::SharedCtor() {
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(message_id_));
}

LatencyRecord::~LatencyRecord() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyRecord)
  SharedDtor();
}

void LatencyRecord::SharedDtor() {
}

void LatencyRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyRecord::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyRecord& LatencyRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyRecord.base);
  return *internal_default_instance();
}


void LatencyRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&begin_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_) -
        reinterpret_cast<char*>(&begin_time_)) + sizeof(message_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 begin_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyRecord)
  return false;
#undef DO_
}

void LatencyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin_time(), output);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // optional uint64 message_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyRecord)
}

::google::protobuf::uint8* LatencyRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin_time(), target);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // optional uint64 message_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyRecord)
  return target;
}

size_t LatencyRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyRecord)
    MergeFrom(*source);
  }
}

void LatencyRecord::MergeFrom(const LatencyRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyRecord::CopyFrom(const LatencyRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyRecord::IsInitialized() const {
  return true;
}

void LatencyRecord::Swap(LatencyRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyRecord::InternalSwap(LatencyRecord* other) {
  using std::swap;
  swap(begin_time_, other->begin_time_);
  swap(end_time_, other->end_time_);
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyRecord::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyRecordMap::InitAsDefaultInstance() {
  ::apollo::common::_LatencyRecordMap_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void LatencyRecordMap::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyRecordMap::kHeaderFieldNumber;
const int LatencyRecordMap::kModuleNameFieldNumber;
const int LatencyRecordMap::kLatencyRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyRecordMap::LatencyRecordMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyRecordMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyRecordMap)
}
LatencyRecordMap::LatencyRecordMap(const LatencyRecordMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      latency_records_(from.latency_records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_module_name()) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyRecordMap)
}

void LatencyRecordMap::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

LatencyRecordMap::~LatencyRecordMap() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyRecordMap)
  SharedDtor();
}

void LatencyRecordMap::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LatencyRecordMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyRecordMap::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyRecordMap& LatencyRecordMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyRecordMap.base);
  return *internal_default_instance();
}


void LatencyRecordMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyRecordMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      module_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyRecordMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyRecordMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.LatencyRecordMap.module_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.LatencyRecord latency_records = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_latency_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyRecordMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyRecordMap)
  return false;
#undef DO_
}

void LatencyRecordMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyRecordMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyRecordMap.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // repeated .apollo.common.LatencyRecord latency_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latency_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->latency_records(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyRecordMap)
}

::google::protobuf::uint8* LatencyRecordMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyRecordMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyRecordMap.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // repeated .apollo.common.LatencyRecord latency_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latency_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->latency_records(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyRecordMap)
  return target;
}

size_t LatencyRecordMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyRecordMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.LatencyRecord latency_records = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->latency_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->latency_records(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyRecordMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyRecordMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyRecordMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyRecordMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyRecordMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyRecordMap)
    MergeFrom(*source);
  }
}

void LatencyRecordMap::MergeFrom(const LatencyRecordMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyRecordMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latency_records_.MergeFrom(from.latency_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_module_name();
      module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
  }
}

void LatencyRecordMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyRecordMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyRecordMap::CopyFrom(const LatencyRecordMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyRecordMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyRecordMap::IsInitialized() const {
  return true;
}

void LatencyRecordMap::Swap(LatencyRecordMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyRecordMap::InternalSwap(LatencyRecordMap* other) {
  using std::swap;
  CastToBase(&latency_records_)->InternalSwap(CastToBase(&other->latency_records_));
  module_name_.Swap(&other->module_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyRecordMap::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyStat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStat::kMinDurationFieldNumber;
const int LatencyStat::kMaxDurationFieldNumber;
const int LatencyStat::kAverDurationFieldNumber;
const int LatencyStat::kSampleSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStat::LatencyStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyStat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyStat)
}
LatencyStat::LatencyStat(const LatencyStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_duration_, &from.max_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_duration_) -
    reinterpret_cast<char*>(&max_duration_)) + sizeof(min_duration_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyStat)
}

void LatencyStat::SharedCtor() {
  ::memset(&max_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_size_) -
      reinterpret_cast<char*>(&max_duration_)) + sizeof(sample_size_));
  min_duration_ = GOOGLE_ULONGLONG(9223372036854775808);
}

LatencyStat::~LatencyStat() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyStat)
  SharedDtor();
}

void LatencyStat::SharedDtor() {
}

void LatencyStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyStat::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStat& LatencyStat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyStat.base);
  return *internal_default_instance();
}


void LatencyStat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&max_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_size_) -
        reinterpret_cast<char*>(&max_duration_)) + sizeof(sample_size_));
    min_duration_ = GOOGLE_ULONGLONG(9223372036854775808);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyStat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_duration = 1 [default = 9223372036854775808];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 aver_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_aver_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aver_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sample_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sample_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyStat)
  return false;
#undef DO_
}

void LatencyStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_duration = 1 [default = 9223372036854775808];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_duration(), output);
  }

  // optional uint64 max_duration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_duration(), output);
  }

  // optional uint64 aver_duration = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->aver_duration(), output);
  }

  // optional uint32 sample_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sample_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyStat)
}

::google::protobuf::uint8* LatencyStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_duration = 1 [default = 9223372036854775808];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_duration(), target);
  }

  // optional uint64 max_duration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_duration(), target);
  }

  // optional uint64 aver_duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->aver_duration(), target);
  }

  // optional uint32 sample_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sample_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyStat)
  return target;
}

size_t LatencyStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 max_duration = 2;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_duration());
    }

    // optional uint64 aver_duration = 3;
    if (has_aver_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aver_duration());
    }

    // optional uint32 sample_size = 4;
    if (has_sample_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_size());
    }

    // optional uint64 min_duration = 1 [default = 9223372036854775808];
    if (has_min_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyStat)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyStat)
    MergeFrom(*source);
  }
}

void LatencyStat::MergeFrom(const LatencyStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      max_duration_ = from.max_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      aver_duration_ = from.aver_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      sample_size_ = from.sample_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_duration_ = from.min_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStat::CopyFrom(const LatencyStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStat::IsInitialized() const {
  return true;
}

void LatencyStat::Swap(LatencyStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStat::InternalSwap(LatencyStat* other) {
  using std::swap;
  swap(max_duration_, other->max_duration_);
  swap(aver_duration_, other->aver_duration_);
  swap(sample_size_, other->sample_size_);
  swap(min_duration_, other->min_duration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyStat::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyTrack_LatencyTrackMessage::InitAsDefaultInstance() {
  ::apollo::common::_LatencyTrack_LatencyTrackMessage_default_instance_._instance.get_mutable()->latency_stat_ = const_cast< ::apollo::common::LatencyStat*>(
      ::apollo::common::LatencyStat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyTrack_LatencyTrackMessage::kLatencyNameFieldNumber;
const int LatencyTrack_LatencyTrackMessage::kLatencyStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyTrack_LatencyTrackMessage::LatencyTrack_LatencyTrackMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack_LatencyTrackMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyTrack.LatencyTrackMessage)
}
LatencyTrack_LatencyTrackMessage::LatencyTrack_LatencyTrackMessage(const LatencyTrack_LatencyTrackMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_latency_name()) {
    latency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latency_name_);
  }
  if (from.has_latency_stat()) {
    latency_stat_ = new ::apollo::common::LatencyStat(*from.latency_stat_);
  } else {
    latency_stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyTrack.LatencyTrackMessage)
}

void LatencyTrack_LatencyTrackMessage::SharedCtor() {
  latency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latency_stat_ = NULL;
}

LatencyTrack_LatencyTrackMessage::~LatencyTrack_LatencyTrackMessage() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyTrack.LatencyTrackMessage)
  SharedDtor();
}

void LatencyTrack_LatencyTrackMessage::SharedDtor() {
  latency_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latency_stat_;
}

void LatencyTrack_LatencyTrackMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyTrack_LatencyTrackMessage::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyTrack_LatencyTrackMessage& LatencyTrack_LatencyTrackMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack_LatencyTrackMessage.base);
  return *internal_default_instance();
}


void LatencyTrack_LatencyTrackMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      latency_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(latency_stat_ != NULL);
      latency_stat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyTrack_LatencyTrackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string latency_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latency_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latency_name().data(), static_cast<int>(this->latency_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.LatencyTrack.LatencyTrackMessage.latency_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyStat latency_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyTrack.LatencyTrackMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyTrack.LatencyTrackMessage)
  return false;
#undef DO_
}

void LatencyTrack_LatencyTrackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string latency_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latency_name().data(), static_cast<int>(this->latency_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyTrack.LatencyTrackMessage.latency_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->latency_name(), output);
  }

  // optional .apollo.common.LatencyStat latency_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_latency_stat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyTrack.LatencyTrackMessage)
}

::google::protobuf::uint8* LatencyTrack_LatencyTrackMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string latency_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latency_name().data(), static_cast<int>(this->latency_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.LatencyTrack.LatencyTrackMessage.latency_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latency_name(), target);
  }

  // optional .apollo.common.LatencyStat latency_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_latency_stat(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyTrack.LatencyTrackMessage)
  return target;
}

size_t LatencyTrack_LatencyTrackMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string latency_name = 1;
    if (has_latency_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latency_name());
    }

    // optional .apollo.common.LatencyStat latency_stat = 2;
    if (has_latency_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *latency_stat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyTrack_LatencyTrackMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyTrack_LatencyTrackMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyTrack_LatencyTrackMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyTrack.LatencyTrackMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyTrack.LatencyTrackMessage)
    MergeFrom(*source);
  }
}

void LatencyTrack_LatencyTrackMessage::MergeFrom(const LatencyTrack_LatencyTrackMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_latency_name();
      latency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latency_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_latency_stat()->::apollo::common::LatencyStat::MergeFrom(from.latency_stat());
    }
  }
}

void LatencyTrack_LatencyTrackMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyTrack_LatencyTrackMessage::CopyFrom(const LatencyTrack_LatencyTrackMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyTrack.LatencyTrackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyTrack_LatencyTrackMessage::IsInitialized() const {
  return true;
}

void LatencyTrack_LatencyTrackMessage::Swap(LatencyTrack_LatencyTrackMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyTrack_LatencyTrackMessage::InternalSwap(LatencyTrack_LatencyTrackMessage* other) {
  using std::swap;
  latency_name_.Swap(&other->latency_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latency_stat_, other->latency_stat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyTrack_LatencyTrackMessage::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyTrack::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyTrack::kLatencyTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyTrack::LatencyTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyTrack)
}
LatencyTrack::LatencyTrack(const LatencyTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      latency_track_(from.latency_track_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyTrack)
}

void LatencyTrack::SharedCtor() {
}

LatencyTrack::~LatencyTrack() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyTrack)
  SharedDtor();
}

void LatencyTrack::SharedDtor() {
}

void LatencyTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyTrack::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyTrack& LatencyTrack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyTrack.base);
  return *internal_default_instance();
}


void LatencyTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_track_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyTrack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_latency_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyTrack)
  return false;
#undef DO_
}

void LatencyTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latency_track_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->latency_track(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyTrack)
}

::google::protobuf::uint8* LatencyTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latency_track_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->latency_track(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyTrack)
  return target;
}

size_t LatencyTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyTrack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->latency_track_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->latency_track(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyTrack)
    MergeFrom(*source);
  }
}

void LatencyTrack::MergeFrom(const LatencyTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latency_track_.MergeFrom(from.latency_track_);
}

void LatencyTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyTrack::CopyFrom(const LatencyTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyTrack::IsInitialized() const {
  return true;
}

void LatencyTrack::Swap(LatencyTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyTrack::InternalSwap(LatencyTrack* other) {
  using std::swap;
  CastToBase(&latency_track_)->InternalSwap(CastToBase(&other->latency_track_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyTrack::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyReport::InitAsDefaultInstance() {
  ::apollo::common::_LatencyReport_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::common::_LatencyReport_default_instance_._instance.get_mutable()->e2es_latency_ = const_cast< ::apollo::common::LatencyTrack*>(
      ::apollo::common::LatencyTrack::internal_default_instance());
  ::apollo::common::_LatencyReport_default_instance_._instance.get_mutable()->modules_latency_ = const_cast< ::apollo::common::LatencyTrack*>(
      ::apollo::common::LatencyTrack::internal_default_instance());
}
void LatencyReport::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyReport::kHeaderFieldNumber;
const int LatencyReport::kE2EsLatencyFieldNumber;
const int LatencyReport::kModulesLatencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyReport::LatencyReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_latency_5frecord_2eproto::scc_info_LatencyReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.LatencyReport)
}
LatencyReport::LatencyReport(const LatencyReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_e2es_latency()) {
    e2es_latency_ = new ::apollo::common::LatencyTrack(*from.e2es_latency_);
  } else {
    e2es_latency_ = NULL;
  }
  if (from.has_modules_latency()) {
    modules_latency_ = new ::apollo::common::LatencyTrack(*from.modules_latency_);
  } else {
    modules_latency_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.LatencyReport)
}

void LatencyReport::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modules_latency_) -
      reinterpret_cast<char*>(&header_)) + sizeof(modules_latency_));
}

LatencyReport::~LatencyReport() {
  // @@protoc_insertion_point(destructor:apollo.common.LatencyReport)
  SharedDtor();
}

void LatencyReport::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete e2es_latency_;
  if (this != internal_default_instance()) delete modules_latency_;
}

void LatencyReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyReport::descriptor() {
  ::protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyReport& LatencyReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_latency_5frecord_2eproto::scc_info_LatencyReport.base);
  return *internal_default_instance();
}


void LatencyReport::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.LatencyReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(e2es_latency_ != NULL);
      e2es_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(modules_latency_ != NULL);
      modules_latency_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.LatencyReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyTrack e2es_latency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_e2es_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.LatencyTrack modules_latency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modules_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.LatencyReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.LatencyReport)
  return false;
#undef DO_
}

void LatencyReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.LatencyReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .apollo.common.LatencyTrack e2es_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_e2es_latency(), output);
  }

  // optional .apollo.common.LatencyTrack modules_latency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_modules_latency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.LatencyReport)
}

::google::protobuf::uint8* LatencyReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.LatencyReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .apollo.common.LatencyTrack e2es_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_e2es_latency(), deterministic, target);
  }

  // optional .apollo.common.LatencyTrack modules_latency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_modules_latency(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.LatencyReport)
  return target;
}

size_t LatencyReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.LatencyReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.LatencyTrack e2es_latency = 2;
    if (has_e2es_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *e2es_latency_);
    }

    // optional .apollo.common.LatencyTrack modules_latency = 3;
    if (has_modules_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *modules_latency_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.LatencyReport)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.LatencyReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.LatencyReport)
    MergeFrom(*source);
  }
}

void LatencyReport::MergeFrom(const LatencyReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.LatencyReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_e2es_latency()->::apollo::common::LatencyTrack::MergeFrom(from.e2es_latency());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_modules_latency()->::apollo::common::LatencyTrack::MergeFrom(from.modules_latency());
    }
  }
}

void LatencyReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.LatencyReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyReport::CopyFrom(const LatencyReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.LatencyReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyReport::IsInitialized() const {
  return true;
}

void LatencyReport::Swap(LatencyReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyReport::InternalSwap(LatencyReport* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(e2es_latency_, other->e2es_latency_);
  swap(modules_latency_, other->modules_latency_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyReport::GetMetadata() const {
  protobuf_latency_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_latency_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyRecord* Arena::CreateMaybeMessage< ::apollo::common::LatencyRecord >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyRecordMap* Arena::CreateMaybeMessage< ::apollo::common::LatencyRecordMap >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyRecordMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyStat* Arena::CreateMaybeMessage< ::apollo::common::LatencyStat >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyStat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyTrack_LatencyTrackMessage* Arena::CreateMaybeMessage< ::apollo::common::LatencyTrack_LatencyTrackMessage >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyTrack_LatencyTrackMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyTrack* Arena::CreateMaybeMessage< ::apollo::common::LatencyTrack >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyTrack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::LatencyReport* Arena::CreateMaybeMessage< ::apollo::common::LatencyReport >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::LatencyReport >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
