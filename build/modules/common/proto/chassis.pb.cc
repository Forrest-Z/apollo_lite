// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

#include "chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chassis_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chassis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChassisGPS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chassis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_License;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chassis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WheelSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chassis_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Surround;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chassis_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sonar;
}  // namespace protobuf_chassis_2eproto
namespace protobuf_drive_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_drive_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EngageAdvice;
}  // namespace protobuf_drive_5fstate_2eproto
namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_geometry_2eproto
namespace protobuf_header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_header_2eproto
namespace protobuf_vehicle_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleID;
}  // namespace protobuf_vehicle_5fconfig_2eproto
namespace protobuf_vehicle_5fsignal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fsignal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleSignal;
}  // namespace protobuf_vehicle_5fsignal_2eproto
namespace apollo {
namespace canbus {
class ChassisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chassis>
      _instance;
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChassisGPS>
      _instance;
} _ChassisGPS_default_instance_;
class WheelSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WheelSpeed>
      _instance;
} _WheelSpeed_default_instance_;
class SonarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sonar>
      _instance;
} _Sonar_default_instance_;
class SurroundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Surround>
      _instance;
} _Surround_default_instance_;
class LicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<License>
      _instance;
} _License_default_instance_;
}  // namespace canbus
}  // namespace apollo
namespace protobuf_chassis_2eproto {
static void InitDefaultsChassis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Chassis_default_instance_;
    new (ptr) ::apollo::canbus::Chassis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Chassis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_Chassis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsChassis}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_vehicle_5fsignal_2eproto::scc_info_VehicleSignal.base,
      &protobuf_chassis_2eproto::scc_info_ChassisGPS.base,
      &protobuf_drive_5fstate_2eproto::scc_info_EngageAdvice.base,
      &protobuf_chassis_2eproto::scc_info_WheelSpeed.base,
      &protobuf_chassis_2eproto::scc_info_Surround.base,
      &protobuf_chassis_2eproto::scc_info_License.base,
      &protobuf_vehicle_5fconfig_2eproto::scc_info_VehicleID.base,}};

static void InitDefaultsChassisGPS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_ChassisGPS_default_instance_;
    new (ptr) ::apollo::canbus::ChassisGPS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::ChassisGPS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChassisGPS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChassisGPS}, {}};

static void InitDefaultsWheelSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_WheelSpeed_default_instance_;
    new (ptr) ::apollo::canbus::WheelSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::WheelSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WheelSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWheelSpeed}, {}};

static void InitDefaultsSonar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Sonar_default_instance_;
    new (ptr) ::apollo::canbus::Sonar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Sonar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sonar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSonar}, {
      &protobuf_geometry_2eproto::scc_info_Point3D.base,
      &protobuf_geometry_2eproto::scc_info_Quaternion.base,}};

static void InitDefaultsSurround() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Surround_default_instance_;
    new (ptr) ::apollo::canbus::Surround();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Surround::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Surround =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurround}, {
      &protobuf_chassis_2eproto::scc_info_Sonar.base,}};

static void InitDefaultsLicense() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_License_default_instance_;
    new (ptr) ::apollo::canbus::License();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::License::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_License =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicense}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Chassis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChassisGPS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WheelSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sonar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Surround.base);
  ::google::protobuf::internal::InitSCC(&scc_info_License.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, engine_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, engine_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, odometer_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, fuel_range_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, steering_torque_nm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, parking_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, high_beam_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, low_beam_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, left_turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, right_turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, disengage_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, steering_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, chassis_error_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, chassis_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, engage_advice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, wheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, surround_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, license_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Chassis, battery_soc_percentage_),
  9,
  23,
  24,
  25,
  8,
  26,
  27,
  28,
  29,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  0,
  22,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  30,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, gps_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, compass_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, is_gps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, is_inferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisGPS, gps_speed_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  14,
  15,
  16,
  17,
  13,
  19,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, is_wheel_spd_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_direction_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_spd_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, is_wheel_spd_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_direction_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_spd_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, is_wheel_spd_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_direction_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_spd_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, is_wheel_spd_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_direction_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::WheelSpeed, wheel_spd_fl_),
  4,
  8,
  0,
  5,
  9,
  1,
  6,
  10,
  2,
  7,
  11,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Sonar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Sonar, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Sonar, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Sonar, rotation_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, cross_traffic_alert_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, cross_traffic_alert_left_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, blind_spot_left_alert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, blind_spot_left_alert_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, cross_traffic_alert_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, cross_traffic_alert_right_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, blind_spot_right_alert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, blind_spot_right_alert_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar00_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar01_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar02_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar03_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar04_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar05_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar06_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar07_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar08_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar09_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Surround, sonar_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::License, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::License, vin_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::apollo::canbus::Chassis)},
  { 67, 92, sizeof(::apollo::canbus::ChassisGPS)},
  { 112, 129, sizeof(::apollo::canbus::WheelSpeed)},
  { 141, 149, sizeof(::apollo::canbus::Sonar)},
  { 152, 181, sizeof(::apollo::canbus::Surround)},
  { 205, 211, sizeof(::apollo::canbus::License)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Chassis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_ChassisGPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_WheelSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Sonar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Surround_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_License_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chassis.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rchassis.proto\022\rapollo.canbus\032\014header.p"
      "roto\032\024vehicle_signal.proto\032\021drive_state."
      "proto\032\016geometry.proto\032\024vehicle_config.pr"
      "oto\"\354\014\n\007Chassis\022\026\n\016engine_started\030\003 \001(\010\022"
      "\027\n\nengine_rpm\030\004 \001(\002:\003nan\022\026\n\tspeed_mps\030\005 "
      "\001(\002:\003nan\022\027\n\nodometer_m\030\006 \001(\002:\003nan\022\024\n\014fue"
      "l_range_m\030\007 \001(\005\022 \n\023throttle_percentage\030\010"
      " \001(\002:\003nan\022\035\n\020brake_percentage\030\t \001(\002:\003nan"
      "\022 \n\023steering_percentage\030\013 \001(\002:\003nan\022\037\n\022st"
      "eering_torque_nm\030\014 \001(\002:\003nan\022\025\n\rparking_b"
      "rake\030\r \001(\010\022\034\n\020high_beam_signal\030\016 \001(\010B\002\030\001"
      "\022\033\n\017low_beam_signal\030\017 \001(\010B\002\030\001\022\034\n\020left_tu"
      "rn_signal\030\020 \001(\010B\002\030\001\022\035\n\021right_turn_signal"
      "\030\021 \001(\010B\002\030\001\022\020\n\004horn\030\022 \001(\010B\002\030\001\022\r\n\005wiper\030\023 "
      "\001(\010\022\034\n\020disengage_status\030\024 \001(\010B\002\030\001\022I\n\014dri"
      "ving_mode\030\025 \001(\0162\".apollo.canbus.Chassis."
      "DrivingMode:\017COMPLETE_MANUAL\022>\n\nerror_co"
      "de\030\026 \001(\0162 .apollo.canbus.Chassis.ErrorCo"
      "de:\010NO_ERROR\022:\n\rgear_location\030\027 \001(\0162#.ap"
      "ollo.canbus.Chassis.GearPosition\022\032\n\022stee"
      "ring_timestamp\030\030 \001(\001\022%\n\006header\030\031 \001(\0132\025.a"
      "pollo.common.Header\022\035\n\022chassis_error_mas"
      "k\030\032 \001(\005:\0010\022,\n\006signal\030\033 \001(\0132\034.apollo.comm"
      "on.VehicleSignal\022.\n\013chassis_gps\030\034 \001(\0132\031."
      "apollo.canbus.ChassisGPS\0222\n\rengage_advic"
      "e\030\035 \001(\0132\033.apollo.common.EngageAdvice\022.\n\013"
      "wheel_speed\030\036 \001(\0132\031.apollo.canbus.WheelS"
      "peed\022)\n\010surround\030\037 \001(\0132\027.apollo.canbus.S"
      "urround\022+\n\007license\030  \001(\0132\026.apollo.canbus"
      ".LicenseB\002\030\001\022,\n\nvehicle_id\030! \001(\0132\030.apoll"
      "o.common.VehicleID\022\"\n\026battery_soc_percen"
      "tage\030\" \001(\005:\002-1\"y\n\013DrivingMode\022\023\n\017COMPLET"
      "E_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE\020\001\022\023\n\017A"
      "UTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_ONLY\020\003\022\022\n"
      "\016EMERGENCY_MODE\020\004\"\200\002\n\tErrorCode\022\014\n\010NO_ER"
      "ROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\rCHASSIS_"
      "ERROR\020\002\022\032\n\026CHASSIS_ERROR_ON_STEER\020\006\022\032\n\026C"
      "HASSIS_ERROR_ON_BRAKE\020\007\022\035\n\031CHASSIS_ERROR"
      "_ON_THROTTLE\020\010\022\031\n\025CHASSIS_ERROR_ON_GEAR\020"
      "\t\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CHASSIS_CA"
      "N_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERROR\020\005\"\203\001\n"
      "\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\nGEAR_"
      "DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_PARKIN"
      "G\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALID\020\005\022\r\n\tG"
      "EAR_NONE\020\006\"\211\003\n\nChassisGPS\022\020\n\010latitude\030\001 "
      "\001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tgps_valid\030\003 \001("
      "\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013\n\003day\030\006 "
      "\001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minutes\030\010 \001(\005\022\017\n\007s"
      "econds\030\t \001(\005\022\031\n\021compass_direction\030\n \001(\001\022"
      "\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fault\030\014 \001(\010\022\023\n\013i"
      "s_inferred\030\r \001(\010\022\020\n\010altitude\030\016 \001(\001\022\017\n\007he"
      "ading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014\n\004vdop\030\021 \001(\001\022"
      "*\n\007quality\030\022 \001(\0162\031.apollo.canbus.GpsQual"
      "ity\022\026\n\016num_satellites\030\023 \001(\005\022\021\n\tgps_speed"
      "\030\024 \001(\001\"\216\005\n\nWheelSpeed\022$\n\025is_wheel_spd_rr"
      "_valid\030\001 \001(\010:\005false\022M\n\022wheel_direction_r"
      "r\030\002 \001(\0162(.apollo.canbus.WheelSpeed.Wheel"
      "SpeedType:\007INVALID\022\027\n\014wheel_spd_rr\030\003 \001(\001"
      ":\0010\022$\n\025is_wheel_spd_rl_valid\030\004 \001(\010:\005fals"
      "e\022M\n\022wheel_direction_rl\030\005 \001(\0162(.apollo.c"
      "anbus.WheelSpeed.WheelSpeedType:\007INVALID"
      "\022\027\n\014wheel_spd_rl\030\006 \001(\001:\0010\022$\n\025is_wheel_sp"
      "d_fr_valid\030\007 \001(\010:\005false\022M\n\022wheel_directi"
      "on_fr\030\010 \001(\0162(.apollo.canbus.WheelSpeed.W"
      "heelSpeedType:\007INVALID\022\027\n\014wheel_spd_fr\030\t"
      " \001(\001:\0010\022$\n\025is_wheel_spd_fl_valid\030\n \001(\010:\005"
      "false\022M\n\022wheel_direction_fl\030\013 \001(\0162(.apol"
      "lo.canbus.WheelSpeed.WheelSpeedType:\007INV"
      "ALID\022\027\n\014wheel_spd_fl\030\014 \001(\001:\0010\"H\n\016WheelSp"
      "eedType\022\013\n\007FORWARD\020\000\022\014\n\010BACKWARD\020\001\022\016\n\nST"
      "ANDSTILL\020\002\022\013\n\007INVALID\020\003\"p\n\005Sonar\022\r\n\005rang"
      "e\030\001 \001(\001\022+\n\013translation\030\002 \001(\0132\026.apollo.co"
      "mmon.Point3D\022+\n\010rotation\030\003 \001(\0132\031.apollo."
      "common.Quaternion\"\344\004\n\010Surround\022 \n\030cross_"
      "traffic_alert_left\030\001 \001(\010\022(\n cross_traffi"
      "c_alert_left_enabled\030\002 \001(\010\022\035\n\025blind_spot"
      "_left_alert\030\003 \001(\010\022%\n\035blind_spot_left_ale"
      "rt_enabled\030\004 \001(\010\022!\n\031cross_traffic_alert_"
      "right\030\005 \001(\010\022)\n!cross_traffic_alert_right"
      "_enabled\030\006 \001(\010\022\036\n\026blind_spot_right_alert"
      "\030\007 \001(\010\022&\n\036blind_spot_right_alert_enabled"
      "\030\010 \001(\010\022\017\n\007sonar00\030\t \001(\001\022\017\n\007sonar01\030\n \001(\001"
      "\022\017\n\007sonar02\030\013 \001(\001\022\017\n\007sonar03\030\014 \001(\001\022\017\n\007so"
      "nar04\030\r \001(\001\022\017\n\007sonar05\030\016 \001(\001\022\017\n\007sonar06\030"
      "\017 \001(\001\022\017\n\007sonar07\030\020 \001(\001\022\017\n\007sonar08\030\021 \001(\001\022"
      "\017\n\007sonar09\030\022 \001(\001\022\017\n\007sonar10\030\023 \001(\001\022\017\n\007son"
      "ar11\030\024 \001(\001\022\025\n\rsonar_enabled\030\025 \001(\010\022\023\n\013son"
      "ar_fault\030\026 \001(\010\022\023\n\013sonar_range\030\027 \003(\001\022#\n\005s"
      "onar\030\030 \003(\0132\024.apollo.canbus.Sonar\"\032\n\007Lice"
      "nse\022\017\n\003vin\030\001 \001(\tB\002\030\001*A\n\nGpsQuality\022\n\n\006FI"
      "X_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_3D\020\002\022\017\n\013FIX_IN"
      "VALID\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chassis.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
  ::protobuf_vehicle_5fsignal_2eproto::AddDescriptors();
  ::protobuf_drive_5fstate_2eproto::AddDescriptors();
  ::protobuf_geometry_2eproto::AddDescriptors();
  ::protobuf_vehicle_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chassis_2eproto
namespace apollo {
namespace canbus {
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[3];
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
const WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
const int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor() {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chassis_2eproto::file_level_enum_descriptors[4];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->chassis_gps_ = const_cast< ::apollo::canbus::ChassisGPS*>(
      ::apollo::canbus::ChassisGPS::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(
      ::apollo::common::EngageAdvice::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->wheel_speed_ = const_cast< ::apollo::canbus::WheelSpeed*>(
      ::apollo::canbus::WheelSpeed::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->surround_ = const_cast< ::apollo::canbus::Surround*>(
      ::apollo::canbus::Surround::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::apollo::common::VehicleID*>(
      ::apollo::common::VehicleID::internal_default_instance());
}
void Chassis::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->Clear();
  clear_has_signal();
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->Clear();
  clear_has_engage_advice();
}
void Chassis::clear_vehicle_id() {
  if (vehicle_id_ != NULL) vehicle_id_->Clear();
  clear_has_vehicle_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
const int Chassis::kSignalFieldNumber;
const int Chassis::kChassisGpsFieldNumber;
const int Chassis::kEngageAdviceFieldNumber;
const int Chassis::kWheelSpeedFieldNumber;
const int Chassis::kSurroundFieldNumber;
const int Chassis::kLicenseFieldNumber;
const int Chassis::kVehicleIdFieldNumber;
const int Chassis::kBatterySocPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_Chassis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_chassis_gps()) {
    chassis_gps_ = new ::apollo::canbus::ChassisGPS(*from.chassis_gps_);
  } else {
    chassis_gps_ = NULL;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = NULL;
  }
  if (from.has_wheel_speed()) {
    wheel_speed_ = new ::apollo::canbus::WheelSpeed(*from.wheel_speed_);
  } else {
    wheel_speed_ = NULL;
  }
  if (from.has_surround()) {
    surround_ = new ::apollo::canbus::Surround(*from.surround_);
  } else {
    surround_ = NULL;
  }
  if (from.has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = NULL;
  }
  if (from.has_vehicle_id()) {
    vehicle_id_ = new ::apollo::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = NULL;
  }
  ::memcpy(&fuel_range_m_, &from.fuel_range_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_soc_percentage_) -
    reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(battery_soc_percentage_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Chassis)
}

void Chassis::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_error_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(chassis_error_mask_));
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  battery_soc_percentage_ = -1;
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete chassis_gps_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete wheel_speed_;
  if (this != internal_default_instance()) delete surround_;
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete vehicle_id_;
}

void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chassis& Chassis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_Chassis.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chassis_gps_ != NULL);
      chassis_gps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(engage_advice_ != NULL);
      engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(wheel_speed_ != NULL);
      wheel_speed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(surround_ != NULL);
      surround_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(license_ != NULL);
      license_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vehicle_id_ != NULL);
      vehicle_id_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&fuel_range_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&horn_) -
        reinterpret_cast<char*>(&fuel_range_m_)) + sizeof(horn_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&wiper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chassis_error_mask_) -
        reinterpret_cast<char*>(&wiper_)) + sizeof(chassis_error_mask_));
    engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (cached_has_bits & 2130706432u) {
    speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
    odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
    throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
    battery_soc_percentage_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Chassis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_engine_started();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_odometer_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_fuel_range_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 8 [default = nan];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 9 [default = nan];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 11 [default = nan];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_steering_torque_nm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_parking_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_high_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_low_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_left_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_right_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_wiper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_disengage_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_steering_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_chassis_error_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chassis_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Surround surround = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surround()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.License license = 32 [deprecated = true];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleID vehicle_id = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_soc_percentage = 34 [default = -1];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_battery_soc_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_soc_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .apollo.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_header(), output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_signal(), output);
  }

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_chassis_gps(), output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_engage_advice(), output);
  }

  // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_wheel_speed(), output);
  }

  // optional .apollo.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_surround(), output);
  }

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->_internal_license(), output);
  }

  // optional .apollo.common.VehicleID vehicle_id = 33;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_internal_vehicle_id(), output);
  }

  // optional int32 battery_soc_percentage = 34 [default = -1];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->battery_soc_percentage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .apollo.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_header(), deterministic, target);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_signal(), deterministic, target);
  }

  // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_chassis_gps(), deterministic, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_engage_advice(), deterministic, target);
  }

  // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_wheel_speed(), deterministic, target);
  }

  // optional .apollo.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_surround(), deterministic, target);
  }

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->_internal_license(), deterministic, target);
  }

  // optional .apollo.common.VehicleID vehicle_id = 33;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->_internal_vehicle_id(), deterministic, target);
  }

  // optional int32 battery_soc_percentage = 34 [default = -1];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->battery_soc_percentage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 25;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.VehicleSignal signal = 27;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .apollo.canbus.ChassisGPS chassis_gps = 28;
    if (has_chassis_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chassis_gps_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 29;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional .apollo.canbus.WheelSpeed wheel_speed = 30;
    if (has_wheel_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wheel_speed_);
    }

    // optional .apollo.canbus.Surround surround = 31;
    if (has_surround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surround_);
    }

    // optional .apollo.canbus.License license = 32 [deprecated = true];
    if (has_license()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional .apollo.common.VehicleID vehicle_id = 33;
    if (has_vehicle_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_id_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 fuel_range_m = 7;
    if (has_fuel_range_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

    // optional bool engine_started = 3;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (has_high_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (has_low_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (has_left_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (has_right_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (has_horn()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool wiper = 19;
    if (has_wiper()) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (has_disengage_status()) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional double steering_timestamp = 24;
    if (has_steering_timestamp()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (has_chassis_error_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

    // optional float engine_rpm = 4 [default = nan];
    if (has_engine_rpm()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional float speed_mps = 5 [default = nan];
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = nan];
    if (has_odometer_m()) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = nan];
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (has_steering_torque_nm()) {
      total_size += 1 + 4;
    }

    // optional int32 battery_soc_percentage = 34 [default = -1];
    if (has_battery_soc_percentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battery_soc_percentage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chassis_gps()->::apollo::canbus::ChassisGPS::MergeFrom(from.chassis_gps());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_wheel_speed()->::apollo::canbus::WheelSpeed::MergeFrom(from.wheel_speed());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_surround()->::apollo::canbus::Surround::MergeFrom(from.surround());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_vehicle_id()->::apollo::common::VehicleID::MergeFrom(from.vehicle_id());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00000400u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00000800u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    if (cached_has_bits & 0x00001000u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00002000u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00008000u) {
      horn_ = from.horn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00020000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00040000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00100000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x00200000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00400000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    if (cached_has_bits & 0x00800000u) {
      engine_rpm_ = from.engine_rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x02000000u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x08000000u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x10000000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x20000000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    if (cached_has_bits & 0x40000000u) {
      battery_soc_percentage_ = from.battery_soc_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(signal_, other->signal_);
  swap(chassis_gps_, other->chassis_gps_);
  swap(engage_advice_, other->engage_advice_);
  swap(wheel_speed_, other->wheel_speed_);
  swap(surround_, other->surround_);
  swap(license_, other->license_);
  swap(vehicle_id_, other->vehicle_id_);
  swap(fuel_range_m_, other->fuel_range_m_);
  swap(engine_started_, other->engine_started_);
  swap(parking_brake_, other->parking_brake_);
  swap(high_beam_signal_, other->high_beam_signal_);
  swap(low_beam_signal_, other->low_beam_signal_);
  swap(left_turn_signal_, other->left_turn_signal_);
  swap(right_turn_signal_, other->right_turn_signal_);
  swap(horn_, other->horn_);
  swap(wiper_, other->wiper_);
  swap(disengage_status_, other->disengage_status_);
  swap(driving_mode_, other->driving_mode_);
  swap(error_code_, other->error_code_);
  swap(steering_timestamp_, other->steering_timestamp_);
  swap(gear_location_, other->gear_location_);
  swap(chassis_error_mask_, other->chassis_error_mask_);
  swap(engine_rpm_, other->engine_rpm_);
  swap(speed_mps_, other->speed_mps_);
  swap(odometer_m_, other->odometer_m_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(steering_torque_nm_, other->steering_torque_nm_);
  swap(battery_soc_percentage_, other->battery_soc_percentage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChassisGPS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisGPS::kLatitudeFieldNumber;
const int ChassisGPS::kLongitudeFieldNumber;
const int ChassisGPS::kGpsValidFieldNumber;
const int ChassisGPS::kYearFieldNumber;
const int ChassisGPS::kMonthFieldNumber;
const int ChassisGPS::kDayFieldNumber;
const int ChassisGPS::kHoursFieldNumber;
const int ChassisGPS::kMinutesFieldNumber;
const int ChassisGPS::kSecondsFieldNumber;
const int ChassisGPS::kCompassDirectionFieldNumber;
const int ChassisGPS::kPdopFieldNumber;
const int ChassisGPS::kIsGpsFaultFieldNumber;
const int ChassisGPS::kIsInferredFieldNumber;
const int ChassisGPS::kAltitudeFieldNumber;
const int ChassisGPS::kHeadingFieldNumber;
const int ChassisGPS::kHdopFieldNumber;
const int ChassisGPS::kVdopFieldNumber;
const int ChassisGPS::kQualityFieldNumber;
const int ChassisGPS::kNumSatellitesFieldNumber;
const int ChassisGPS::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisGPS::ChassisGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_ChassisGPS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisGPS)
  SharedDtor();
}

void ChassisGPS::SharedDtor() {
}

void ChassisGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChassisGPS::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisGPS& ChassisGPS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_ChassisGPS.base);
  return *internal_default_instance();
}


void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(seconds_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&compass_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&compass_direction_)) + sizeof(heading_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&hdop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_satellites_) -
        reinterpret_cast<char*>(&hdop_)) + sizeof(num_satellites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisGPS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_gps_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_compass_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_gps_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_inferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_vdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.GpsQuality quality = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::apollo::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_num_satellites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_gps_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisGPS)
  return false;
#undef DO_
}

void ChassisGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gps_valid(), output);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hours(), output);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minutes(), output);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds(), output);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->compass_direction(), output);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pdop(), output);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_inferred(), output);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->altitude(), output);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->heading(), output);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->hdop(), output);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->vdop(), output);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->quality(), output);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_satellites(), output);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisGPS)
}

::google::protobuf::uint8* ChassisGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gps_valid(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hours(), target);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minutes(), target);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds(), target);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->compass_direction(), target);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_inferred(), target);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->altitude(), target);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->heading(), target);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->hdop(), target);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisGPS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hours = 7;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 8;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 9;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double compass_direction = 10;
    if (has_compass_direction()) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (has_pdop()) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (has_gps_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (has_is_gps_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (has_is_inferred()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.GpsQuality quality = 18;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional double altitude = 14;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double hdop = 16;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisGPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_speed_ = from.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_satellites_ = from.num_satellites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::Swap(ChassisGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisGPS::InternalSwap(ChassisGPS* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(compass_direction_, other->compass_direction_);
  swap(pdop_, other->pdop_);
  swap(gps_valid_, other->gps_valid_);
  swap(is_gps_fault_, other->is_gps_fault_);
  swap(is_inferred_, other->is_inferred_);
  swap(quality_, other->quality_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(gps_speed_, other->gps_speed_);
  swap(num_satellites_, other->num_satellites_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChassisGPS::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WheelSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WheelSpeed::kIsWheelSpdRrValidFieldNumber;
const int WheelSpeed::kWheelDirectionRrFieldNumber;
const int WheelSpeed::kWheelSpdRrFieldNumber;
const int WheelSpeed::kIsWheelSpdRlValidFieldNumber;
const int WheelSpeed::kWheelDirectionRlFieldNumber;
const int WheelSpeed::kWheelSpdRlFieldNumber;
const int WheelSpeed::kIsWheelSpdFrValidFieldNumber;
const int WheelSpeed::kWheelDirectionFrFieldNumber;
const int WheelSpeed::kWheelSpdFrFieldNumber;
const int WheelSpeed::kIsWheelSpdFlValidFieldNumber;
const int WheelSpeed::kWheelDirectionFlFieldNumber;
const int WheelSpeed::kWheelSpdFlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WheelSpeed::WheelSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_WheelSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheel_spd_rr_, &from.wheel_spd_rr_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_direction_fl_) -
    reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(wheel_direction_fl_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  ::memset(&wheel_spd_rr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
      reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(is_wheel_spd_fl_valid_));
  wheel_direction_rr_ = 3;
  wheel_direction_rl_ = 3;
  wheel_direction_fr_ = 3;
  wheel_direction_fl_ = 3;
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:apollo.canbus.WheelSpeed)
  SharedDtor();
}

void WheelSpeed::SharedDtor() {
}

void WheelSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WheelSpeed::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WheelSpeed& WheelSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_WheelSpeed.base);
  return *internal_default_instance();
}


void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&wheel_spd_rr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
        reinterpret_cast<char*>(&wheel_spd_rr_)) + sizeof(is_wheel_spd_fl_valid_));
  }
  if (cached_has_bits & 3840u) {
    wheel_direction_rr_ = 3;
    wheel_direction_rl_ = 3;
    wheel_direction_fr_ = 3;
    wheel_direction_fl_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WheelSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.WheelSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_wheel_spd_rr_valid = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_wheel_spd_rr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rr = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_wheel_spd_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_wheel_spd_rl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rl = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_wheel_spd_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_wheel_spd_fr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fr = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_wheel_spd_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_wheel_spd_fl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fl = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_wheel_spd_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.WheelSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.WheelSpeed)
  return false;
#undef DO_
}

void WheelSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.WheelSpeed)
}

::google::protobuf::uint8* WheelSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.WheelSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double wheel_spd_rr = 3 [default = 0];
    if (has_wheel_spd_rr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 6 [default = 0];
    if (has_wheel_spd_rl()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fr = 9 [default = 0];
    if (has_wheel_spd_fr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fl = 12 [default = 0];
    if (has_wheel_spd_fl()) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_rr_valid = 1 [default = false];
    if (has_is_wheel_spd_rr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 4 [default = false];
    if (has_is_wheel_spd_rl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fr_valid = 7 [default = false];
    if (has_is_wheel_spd_fr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 10 [default = false];
    if (has_is_wheel_spd_fl_valid()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
    if (has_wheel_direction_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
    if (has_wheel_direction_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
    if (has_wheel_direction_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
    if (has_wheel_direction_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WheelSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.WheelSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WheelSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::Swap(WheelSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WheelSpeed::InternalSwap(WheelSpeed* other) {
  using std::swap;
  swap(wheel_spd_rr_, other->wheel_spd_rr_);
  swap(wheel_spd_rl_, other->wheel_spd_rl_);
  swap(wheel_spd_fr_, other->wheel_spd_fr_);
  swap(wheel_spd_fl_, other->wheel_spd_fl_);
  swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  swap(wheel_direction_rr_, other->wheel_direction_rr_);
  swap(wheel_direction_rl_, other->wheel_direction_rl_);
  swap(wheel_direction_fr_, other->wheel_direction_fr_);
  swap(wheel_direction_fl_, other->wheel_direction_fl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WheelSpeed::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sonar::InitAsDefaultInstance() {
  ::apollo::canbus::_Sonar_default_instance_._instance.get_mutable()->translation_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::canbus::_Sonar_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::apollo::common::Quaternion*>(
      ::apollo::common::Quaternion::internal_default_instance());
}
void Sonar::clear_translation() {
  if (translation_ != NULL) translation_->Clear();
  clear_has_translation();
}
void Sonar::clear_rotation() {
  if (rotation_ != NULL) rotation_->Clear();
  clear_has_rotation();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sonar::kRangeFieldNumber;
const int Sonar::kTranslationFieldNumber;
const int Sonar::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sonar::Sonar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_Sonar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::apollo::common::Point3D(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::apollo::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Sonar)
}

void Sonar::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Sonar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sonar::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sonar& Sonar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_Sonar.base);
  return *internal_default_instance();
}


void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sonar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Sonar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Quaternion rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Sonar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Sonar)
  return false;
#undef DO_
}

void Sonar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->range(), output);
  }

  // optional .apollo.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_translation(), output);
  }

  // optional .apollo.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Sonar)
}

::google::protobuf::uint8* Sonar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->range(), target);
  }

  // optional .apollo.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_translation(), deterministic, target);
  }

  // optional .apollo.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rotation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Sonar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Point3D translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *translation_);
    }

    // optional .apollo.common.Quaternion rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional double range = 1;
    if (has_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sonar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sonar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Sonar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_translation()->::apollo::common::Point3D::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::apollo::common::Quaternion::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      range_ = from.range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sonar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::Swap(Sonar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  swap(range_, other->range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sonar::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Surround::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Surround::kCrossTrafficAlertLeftFieldNumber;
const int Surround::kCrossTrafficAlertLeftEnabledFieldNumber;
const int Surround::kBlindSpotLeftAlertFieldNumber;
const int Surround::kBlindSpotLeftAlertEnabledFieldNumber;
const int Surround::kCrossTrafficAlertRightFieldNumber;
const int Surround::kCrossTrafficAlertRightEnabledFieldNumber;
const int Surround::kBlindSpotRightAlertFieldNumber;
const int Surround::kBlindSpotRightAlertEnabledFieldNumber;
const int Surround::kSonar00FieldNumber;
const int Surround::kSonar01FieldNumber;
const int Surround::kSonar02FieldNumber;
const int Surround::kSonar03FieldNumber;
const int Surround::kSonar04FieldNumber;
const int Surround::kSonar05FieldNumber;
const int Surround::kSonar06FieldNumber;
const int Surround::kSonar07FieldNumber;
const int Surround::kSonar08FieldNumber;
const int Surround::kSonar09FieldNumber;
const int Surround::kSonar10FieldNumber;
const int Surround::kSonar11FieldNumber;
const int Surround::kSonarEnabledFieldNumber;
const int Surround::kSonarFaultFieldNumber;
const int Surround::kSonarRangeFieldNumber;
const int Surround::kSonarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Surround::Surround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_Surround.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Surround)
}
Surround::Surround(const Surround& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sonar_range_(from.sonar_range_),
      sonar_(from.sonar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cross_traffic_alert_left_, &from.cross_traffic_alert_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&sonar_fault_) -
    reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Surround)
}

void Surround::SharedCtor() {
  ::memset(&cross_traffic_alert_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sonar_fault_) -
      reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(sonar_fault_));
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Surround)
  SharedDtor();
}

void Surround::SharedDtor() {
}

void Surround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Surround::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Surround& Surround::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_Surround.base);
  return *internal_default_instance();
}


void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Surround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sonar_range_.Clear();
  sonar_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&cross_traffic_alert_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blind_spot_right_alert_enabled_) -
        reinterpret_cast<char*>(&cross_traffic_alert_left_)) + sizeof(blind_spot_right_alert_enabled_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&sonar00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sonar07_) -
        reinterpret_cast<char*>(&sonar00_)) + sizeof(sonar07_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&sonar08_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sonar_fault_) -
        reinterpret_cast<char*>(&sonar08_)) + sizeof(sonar_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Surround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Surround)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cross_traffic_alert_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cross_traffic_alert_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_left_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cross_traffic_alert_left_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_left_alert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_blind_spot_left_alert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_left_alert_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_blind_spot_left_alert_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cross_traffic_alert_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_right_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cross_traffic_alert_right_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_right_alert = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_blind_spot_right_alert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_right_alert_enabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_blind_spot_right_alert_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar00 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_sonar00();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar00_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar01 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_sonar01();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar01_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar02 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_sonar02();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar02_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar03 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_sonar03();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar03_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar04 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_sonar04();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar04_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar05 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_sonar05();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar05_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar06 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_sonar06();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar06_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar07 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_sonar07();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar07_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar08 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_sonar08();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar08_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar09 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_sonar09();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar09_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar10 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_sonar10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar11 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_sonar11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sonar_enabled = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_sonar_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sonar_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_sonar_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sonar_range = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 185u, input, this->mutable_sonar_range())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sonar_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.canbus.Sonar sonar = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sonar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Surround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Surround)
  return false;
#undef DO_
}

void Surround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Surround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cross_traffic_alert_left(), output);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cross_traffic_alert_left_enabled(), output);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blind_spot_left_alert(), output);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blind_spot_left_alert_enabled(), output);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cross_traffic_alert_right(), output);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cross_traffic_alert_right_enabled(), output);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->blind_spot_right_alert(), output);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->blind_spot_right_alert_enabled(), output);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sonar00(), output);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sonar01(), output);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->sonar02(), output);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sonar03(), output);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->sonar04(), output);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->sonar05(), output);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sonar06(), output);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sonar07(), output);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sonar08(), output);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->sonar09(), output);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->sonar10(), output);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->sonar11(), output);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->sonar_enabled(), output);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->sonar_fault(), output);
  }

  // repeated double sonar_range = 23;
  for (int i = 0, n = this->sonar_range_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      23, this->sonar_range(i), output);
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sonar_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->sonar(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Surround)
}

::google::protobuf::uint8* Surround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Surround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cross_traffic_alert_left(), target);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cross_traffic_alert_left_enabled(), target);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blind_spot_left_alert(), target);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blind_spot_left_alert_enabled(), target);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cross_traffic_alert_right(), target);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cross_traffic_alert_right_enabled(), target);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->blind_spot_right_alert(), target);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->blind_spot_right_alert_enabled(), target);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sonar00(), target);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sonar01(), target);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->sonar02(), target);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sonar03(), target);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->sonar04(), target);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->sonar05(), target);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sonar06(), target);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sonar07(), target);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->sonar08(), target);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->sonar09(), target);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->sonar10(), target);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->sonar11(), target);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->sonar_enabled(), target);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(23, this->sonar_range_, target);

  // repeated .apollo.canbus.Sonar sonar = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sonar_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->sonar(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Surround)
  return target;
}

size_t Surround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Surround)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double sonar_range = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->sonar_range_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sonar_range_size());
    total_size += data_size;
  }

  // repeated .apollo.canbus.Sonar sonar = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->sonar_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sonar(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool cross_traffic_alert_left = 1;
    if (has_cross_traffic_alert_left()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_left_enabled = 2;
    if (has_cross_traffic_alert_left_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert = 3;
    if (has_blind_spot_left_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert_enabled = 4;
    if (has_blind_spot_left_alert_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right = 5;
    if (has_cross_traffic_alert_right()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right_enabled = 6;
    if (has_cross_traffic_alert_right_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert = 7;
    if (has_blind_spot_right_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert_enabled = 8;
    if (has_blind_spot_right_alert_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double sonar00 = 9;
    if (has_sonar00()) {
      total_size += 1 + 8;
    }

    // optional double sonar01 = 10;
    if (has_sonar01()) {
      total_size += 1 + 8;
    }

    // optional double sonar02 = 11;
    if (has_sonar02()) {
      total_size += 1 + 8;
    }

    // optional double sonar03 = 12;
    if (has_sonar03()) {
      total_size += 1 + 8;
    }

    // optional double sonar04 = 13;
    if (has_sonar04()) {
      total_size += 1 + 8;
    }

    // optional double sonar05 = 14;
    if (has_sonar05()) {
      total_size += 1 + 8;
    }

    // optional double sonar06 = 15;
    if (has_sonar06()) {
      total_size += 1 + 8;
    }

    // optional double sonar07 = 16;
    if (has_sonar07()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double sonar08 = 17;
    if (has_sonar08()) {
      total_size += 2 + 8;
    }

    // optional double sonar09 = 18;
    if (has_sonar09()) {
      total_size += 2 + 8;
    }

    // optional double sonar10 = 19;
    if (has_sonar10()) {
      total_size += 2 + 8;
    }

    // optional double sonar11 = 20;
    if (has_sonar11()) {
      total_size += 2 + 8;
    }

    // optional bool sonar_enabled = 21;
    if (has_sonar_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool sonar_fault = 22;
    if (has_sonar_fault()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  const Surround* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Surround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Surround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Surround)
    MergeFrom(*source);
  }
}

void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sonar_range_.MergeFrom(from.sonar_range_);
  sonar_.MergeFrom(from.sonar_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cross_traffic_alert_left_ = from.cross_traffic_alert_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      cross_traffic_alert_left_enabled_ = from.cross_traffic_alert_left_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      blind_spot_left_alert_ = from.blind_spot_left_alert_;
    }
    if (cached_has_bits & 0x00000008u) {
      blind_spot_left_alert_enabled_ = from.blind_spot_left_alert_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      cross_traffic_alert_right_ = from.cross_traffic_alert_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      cross_traffic_alert_right_enabled_ = from.cross_traffic_alert_right_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      blind_spot_right_alert_ = from.blind_spot_right_alert_;
    }
    if (cached_has_bits & 0x00000080u) {
      blind_spot_right_alert_enabled_ = from.blind_spot_right_alert_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sonar00_ = from.sonar00_;
    }
    if (cached_has_bits & 0x00000200u) {
      sonar01_ = from.sonar01_;
    }
    if (cached_has_bits & 0x00000400u) {
      sonar02_ = from.sonar02_;
    }
    if (cached_has_bits & 0x00000800u) {
      sonar03_ = from.sonar03_;
    }
    if (cached_has_bits & 0x00001000u) {
      sonar04_ = from.sonar04_;
    }
    if (cached_has_bits & 0x00002000u) {
      sonar05_ = from.sonar05_;
    }
    if (cached_has_bits & 0x00004000u) {
      sonar06_ = from.sonar06_;
    }
    if (cached_has_bits & 0x00008000u) {
      sonar07_ = from.sonar07_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      sonar08_ = from.sonar08_;
    }
    if (cached_has_bits & 0x00020000u) {
      sonar09_ = from.sonar09_;
    }
    if (cached_has_bits & 0x00040000u) {
      sonar10_ = from.sonar10_;
    }
    if (cached_has_bits & 0x00080000u) {
      sonar11_ = from.sonar11_;
    }
    if (cached_has_bits & 0x00100000u) {
      sonar_enabled_ = from.sonar_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      sonar_fault_ = from.sonar_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Surround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {
  return true;
}

void Surround::Swap(Surround* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Surround::InternalSwap(Surround* other) {
  using std::swap;
  sonar_range_.InternalSwap(&other->sonar_range_);
  CastToBase(&sonar_)->InternalSwap(CastToBase(&other->sonar_));
  swap(cross_traffic_alert_left_, other->cross_traffic_alert_left_);
  swap(cross_traffic_alert_left_enabled_, other->cross_traffic_alert_left_enabled_);
  swap(blind_spot_left_alert_, other->blind_spot_left_alert_);
  swap(blind_spot_left_alert_enabled_, other->blind_spot_left_alert_enabled_);
  swap(cross_traffic_alert_right_, other->cross_traffic_alert_right_);
  swap(cross_traffic_alert_right_enabled_, other->cross_traffic_alert_right_enabled_);
  swap(blind_spot_right_alert_, other->blind_spot_right_alert_);
  swap(blind_spot_right_alert_enabled_, other->blind_spot_right_alert_enabled_);
  swap(sonar00_, other->sonar00_);
  swap(sonar01_, other->sonar01_);
  swap(sonar02_, other->sonar02_);
  swap(sonar03_, other->sonar03_);
  swap(sonar04_, other->sonar04_);
  swap(sonar05_, other->sonar05_);
  swap(sonar06_, other->sonar06_);
  swap(sonar07_, other->sonar07_);
  swap(sonar08_, other->sonar08_);
  swap(sonar09_, other->sonar09_);
  swap(sonar10_, other->sonar10_);
  swap(sonar11_, other->sonar11_);
  swap(sonar_enabled_, other->sonar_enabled_);
  swap(sonar_fault_, other->sonar_fault_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Surround::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void License::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int License::kVinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

License::License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chassis_2eproto::scc_info_License.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.License)
}
License::License(const License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vin()) {
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.License)
}

void License::SharedCtor() {
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:apollo.canbus.License)
  SharedDtor();
}

void License::SharedDtor() {
  vin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* License::descriptor() {
  ::protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const License& License::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chassis_2eproto::scc_info_License.base);
  return *internal_default_instance();
}


void License::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vin_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.License)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), static_cast<int>(this->vin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.canbus.License.vin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.License)
  return false;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.License)
}

::google::protobuf::uint8* License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string vin = 1 [deprecated = true];
  if (has_vin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vin()) {
    set_has_vin();
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::Swap(License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void License::InternalSwap(License* other) {
  using std::swap;
  vin_.Swap(&other->vin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_chassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Chassis* Arena::CreateMaybeMessage< ::apollo::canbus::Chassis >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Chassis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::ChassisGPS* Arena::CreateMaybeMessage< ::apollo::canbus::ChassisGPS >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::ChassisGPS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::WheelSpeed* Arena::CreateMaybeMessage< ::apollo::canbus::WheelSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::WheelSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Sonar* Arena::CreateMaybeMessage< ::apollo::canbus::Sonar >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Sonar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Surround* Arena::CreateMaybeMessage< ::apollo::canbus::Surround >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Surround >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::License* Arena::CreateMaybeMessage< ::apollo::canbus::License >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::License >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
