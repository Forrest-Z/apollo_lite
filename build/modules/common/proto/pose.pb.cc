// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto

#include "pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointENU;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion;
}  // namespace protobuf_geometry_2eproto
namespace apollo {
namespace common {
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
}  // namespace common
}  // namespace apollo
namespace protobuf_pose_2eproto {
static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_Pose_default_instance_;
    new (ptr) ::apollo::common::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPose}, {
      &protobuf_geometry_2eproto::scc_info_PointENU.base,
      &protobuf_geometry_2eproto::scc_info_Quaternion.base,
      &protobuf_geometry_2eproto::scc_info_Point3D.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, linear_acceleration_vrf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, angular_velocity_vrf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::common::Pose, euler_angles_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  6,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::common::Pose)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::common::_Pose_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pose.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\npose.proto\022\rapollo.common\032\016geometry.pr"
      "oto\"\247\003\n\004Pose\022)\n\010position\030\001 \001(\0132\027.apollo."
      "common.PointENU\022.\n\013orientation\030\002 \001(\0132\031.a"
      "pollo.common.Quaternion\022/\n\017linear_veloci"
      "ty\030\003 \001(\0132\026.apollo.common.Point3D\0223\n\023line"
      "ar_acceleration\030\004 \001(\0132\026.apollo.common.Po"
      "int3D\0220\n\020angular_velocity\030\005 \001(\0132\026.apollo"
      ".common.Point3D\022\017\n\007heading\030\006 \001(\001\0227\n\027line"
      "ar_acceleration_vrf\030\007 \001(\0132\026.apollo.commo"
      "n.Point3D\0224\n\024angular_velocity_vrf\030\010 \001(\0132"
      "\026.apollo.common.Point3D\022,\n\014euler_angles\030"
      "\t \001(\0132\026.apollo.common.Point3D"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pose.proto", &protobuf_RegisterTypes);
  ::protobuf_geometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pose_2eproto
namespace apollo {
namespace common {

// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::apollo::common::Quaternion*>(
      ::apollo::common::Quaternion::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->linear_acceleration_vrf_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->angular_velocity_vrf_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::common::_Pose_default_instance_._instance.get_mutable()->euler_angles_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void Pose::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Pose::clear_orientation() {
  if (orientation_ != NULL) orientation_->Clear();
  clear_has_orientation();
}
void Pose::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Pose::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->Clear();
  clear_has_linear_acceleration();
}
void Pose::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->Clear();
  clear_has_angular_velocity();
}
void Pose::clear_linear_acceleration_vrf() {
  if (linear_acceleration_vrf_ != NULL) linear_acceleration_vrf_->Clear();
  clear_has_linear_acceleration_vrf();
}
void Pose::clear_angular_velocity_vrf() {
  if (angular_velocity_vrf_ != NULL) angular_velocity_vrf_->Clear();
  clear_has_angular_velocity_vrf();
}
void Pose::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->Clear();
  clear_has_euler_angles();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
const int Pose::kLinearVelocityFieldNumber;
const int Pose::kLinearAccelerationFieldNumber;
const int Pose::kAngularVelocityFieldNumber;
const int Pose::kHeadingFieldNumber;
const int Pose::kLinearAccelerationVrfFieldNumber;
const int Pose::kAngularVelocityVrfFieldNumber;
const int Pose::kEulerAnglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pose_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::PointENU(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::apollo::common::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::apollo::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::apollo::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration_vrf()) {
    linear_acceleration_vrf_ = new ::apollo::common::Point3D(*from.linear_acceleration_vrf_);
  } else {
    linear_acceleration_vrf_ = NULL;
  }
  if (from.has_angular_velocity_vrf()) {
    angular_velocity_vrf_ = new ::apollo::common::Point3D(*from.angular_velocity_vrf_);
  } else {
    angular_velocity_vrf_ = NULL;
  }
  if (from.has_euler_angles()) {
    euler_angles_ = new ::apollo::common::Point3D(*from.euler_angles_);
  } else {
    euler_angles_ = NULL;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.Pose)
}

void Pose::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:apollo.common.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_vrf_;
  if (this != internal_default_instance()) delete angular_velocity_vrf_;
  if (this != internal_default_instance()) delete euler_angles_;
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_pose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pose_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pose_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_ != NULL);
      orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(linear_acceleration_vrf_ != NULL);
      linear_acceleration_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(angular_velocity_vrf_ != NULL);
      angular_velocity_vrf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(euler_angles_ != NULL);
      euler_angles_->Clear();
    }
  }
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PointENU position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Quaternion orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_vrf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity_vrf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D euler_angles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_euler_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation(), output);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_linear_velocity(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_linear_acceleration(), output);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_angular_velocity(), output);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_linear_acceleration_vrf(), output);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_angular_velocity_vrf(), output);
  }

  // optional .apollo.common.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_euler_angles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // optional .apollo.common.Quaternion orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_linear_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_linear_acceleration(), deterministic, target);
  }

  // optional .apollo.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_angular_velocity(), deterministic, target);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_linear_acceleration_vrf(), deterministic, target);
  }

  // optional .apollo.common.Point3D angular_velocity_vrf = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_angular_velocity_vrf(), deterministic, target);
  }

  // optional .apollo.common.Point3D euler_angles = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_euler_angles(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.PointENU position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Quaternion orientation = 2;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *orientation_);
    }

    // optional .apollo.common.Point3D linear_velocity = 3;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 4;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

    // optional .apollo.common.Point3D angular_velocity = 5;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration_vrf = 7;
    if (has_linear_acceleration_vrf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_vrf_);
    }

    // optional .apollo.common.Point3D angular_velocity_vrf = 8;
    if (has_angular_velocity_vrf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_vrf_);
    }

    // optional .apollo.common.Point3D euler_angles = 9;
    if (has_euler_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_angles_);
    }

  }
  // optional double heading = 6;
  if (has_heading()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation()->::apollo::common::Quaternion::MergeFrom(from.orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_linear_acceleration_vrf()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_vrf());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_angular_velocity_vrf()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_vrf());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_euler_angles()->::apollo::common::Point3D::MergeFrom(from.euler_angles());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_heading(from.heading());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_vrf_, other->linear_acceleration_vrf_);
  swap(angular_velocity_vrf_, other->angular_velocity_vrf_);
  swap(euler_angles_, other->euler_angles_);
  swap(heading_, other->heading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_pose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pose_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::common::Pose* Arena::CreateMaybeMessage< ::apollo::common::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::Pose >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
