// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#ifndef PROTOBUF_INCLUDED_localization_2eproto
#define PROTOBUF_INCLUDED_localization_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "pose.pb.h"
#include "geometry.pb.h"
#include "pnc_point.pb.h"
#include "localization_status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_localization_2eproto 

namespace protobuf_localization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_localization_2eproto
namespace apollo {
namespace localization {
class LocalizationEstimate;
class LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class LocalizationStatus;
class LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace localization
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::localization::LocalizationEstimate* Arena::CreateMaybeMessage<::apollo::localization::LocalizationEstimate>(Arena*);
template<> ::apollo::localization::LocalizationStatus* Arena::CreateMaybeMessage<::apollo::localization::LocalizationStatus>(Arena*);
template<> ::apollo::localization::Uncertainty* Arena::CreateMaybeMessage<::apollo::localization::Uncertainty>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace localization {

enum MeasureState {
  OK = 0,
  WARNNING = 1,
  ERROR = 2,
  CRITICAL_ERROR = 3,
  FATAL_ERROR = 4
};
bool MeasureState_IsValid(int value);
const MeasureState MeasureState_MIN = OK;
const MeasureState MeasureState_MAX = FATAL_ERROR;
const int MeasureState_ARRAYSIZE = MeasureState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeasureState_descriptor();
inline const ::std::string& MeasureState_Name(MeasureState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeasureState_descriptor(), value);
}
inline bool MeasureState_Parse(
    const ::std::string& name, MeasureState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeasureState>(
    MeasureState_descriptor(), name, value);
}
// ===================================================================

class Uncertainty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.Uncertainty) */ {
 public:
  Uncertainty();
  virtual ~Uncertainty();

  Uncertainty(const Uncertainty& from);

  inline Uncertainty& operator=(const Uncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uncertainty(Uncertainty&& from) noexcept
    : Uncertainty() {
    *this = ::std::move(from);
  }

  inline Uncertainty& operator=(Uncertainty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Uncertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uncertainty* internal_default_instance() {
    return reinterpret_cast<const Uncertainty*>(
               &_Uncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Uncertainty* other);
  friend void swap(Uncertainty& a, Uncertainty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uncertainty* New() const final {
    return CreateMaybeMessage<Uncertainty>(NULL);
  }

  Uncertainty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uncertainty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uncertainty& from);
  void MergeFrom(const Uncertainty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uncertainty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Point3D position_std_dev = 1;
  bool has_position_std_dev() const;
  void clear_position_std_dev();
  static const int kPositionStdDevFieldNumber = 1;
  private:
  const ::apollo::common::Point3D& _internal_position_std_dev() const;
  public:
  const ::apollo::common::Point3D& position_std_dev() const;
  ::apollo::common::Point3D* release_position_std_dev();
  ::apollo::common::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev);

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  bool has_orientation_std_dev() const;
  void clear_orientation_std_dev();
  static const int kOrientationStdDevFieldNumber = 2;
  private:
  const ::apollo::common::Point3D& _internal_orientation_std_dev() const;
  public:
  const ::apollo::common::Point3D& orientation_std_dev() const;
  ::apollo::common::Point3D* release_orientation_std_dev();
  ::apollo::common::Point3D* mutable_orientation_std_dev();
  void set_allocated_orientation_std_dev(::apollo::common::Point3D* orientation_std_dev);

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev();
  static const int kLinearVelocityStdDevFieldNumber = 3;
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity_std_dev() const;
  public:
  const ::apollo::common::Point3D& linear_velocity_std_dev() const;
  ::apollo::common::Point3D* release_linear_velocity_std_dev();
  ::apollo::common::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev);

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  bool has_linear_acceleration_std_dev() const;
  void clear_linear_acceleration_std_dev();
  static const int kLinearAccelerationStdDevFieldNumber = 4;
  private:
  const ::apollo::common::Point3D& _internal_linear_acceleration_std_dev() const;
  public:
  const ::apollo::common::Point3D& linear_acceleration_std_dev() const;
  ::apollo::common::Point3D* release_linear_acceleration_std_dev();
  ::apollo::common::Point3D* mutable_linear_acceleration_std_dev();
  void set_allocated_linear_acceleration_std_dev(::apollo::common::Point3D* linear_acceleration_std_dev);

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  bool has_angular_velocity_std_dev() const;
  void clear_angular_velocity_std_dev();
  static const int kAngularVelocityStdDevFieldNumber = 5;
  private:
  const ::apollo::common::Point3D& _internal_angular_velocity_std_dev() const;
  public:
  const ::apollo::common::Point3D& angular_velocity_std_dev() const;
  ::apollo::common::Point3D* release_angular_velocity_std_dev();
  ::apollo::common::Point3D* mutable_angular_velocity_std_dev();
  void set_allocated_angular_velocity_std_dev(::apollo::common::Point3D* angular_velocity_std_dev);

  // @@protoc_insertion_point(class_scope:apollo.localization.Uncertainty)
 private:
  void set_has_position_std_dev();
  void clear_has_position_std_dev();
  void set_has_orientation_std_dev();
  void clear_has_orientation_std_dev();
  void set_has_linear_velocity_std_dev();
  void clear_has_linear_velocity_std_dev();
  void set_has_linear_acceleration_std_dev();
  void clear_has_linear_acceleration_std_dev();
  void set_has_angular_velocity_std_dev();
  void clear_has_angular_velocity_std_dev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Point3D* position_std_dev_;
  ::apollo::common::Point3D* orientation_std_dev_;
  ::apollo::common::Point3D* linear_velocity_std_dev_;
  ::apollo::common::Point3D* linear_acceleration_std_dev_;
  ::apollo::common::Point3D* angular_velocity_std_dev_;
  friend struct ::protobuf_localization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocalizationEstimate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.LocalizationEstimate) */ {
 public:
  LocalizationEstimate();
  virtual ~LocalizationEstimate();

  LocalizationEstimate(const LocalizationEstimate& from);

  inline LocalizationEstimate& operator=(const LocalizationEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalizationEstimate(LocalizationEstimate&& from) noexcept
    : LocalizationEstimate() {
    *this = ::std::move(from);
  }

  inline LocalizationEstimate& operator=(LocalizationEstimate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalizationEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationEstimate* internal_default_instance() {
    return reinterpret_cast<const LocalizationEstimate*>(
               &_LocalizationEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LocalizationEstimate* other);
  friend void swap(LocalizationEstimate& a, LocalizationEstimate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalizationEstimate* New() const final {
    return CreateMaybeMessage<LocalizationEstimate>(NULL);
  }

  LocalizationEstimate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationEstimate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalizationEstimate& from);
  void MergeFrom(const LocalizationEstimate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationEstimate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 5;
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::apollo::common::Pose& _internal_pose() const;
  public:
  const ::apollo::common::Pose& pose() const;
  ::apollo::common::Pose* release_pose();
  ::apollo::common::Pose* mutable_pose();
  void set_allocated_pose(::apollo::common::Pose* pose);

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  bool has_uncertainty() const;
  void clear_uncertainty();
  static const int kUncertaintyFieldNumber = 3;
  private:
  const ::apollo::localization::Uncertainty& _internal_uncertainty() const;
  public:
  const ::apollo::localization::Uncertainty& uncertainty() const;
  ::apollo::localization::Uncertainty* release_uncertainty();
  ::apollo::localization::Uncertainty* mutable_uncertainty();
  void set_allocated_uncertainty(::apollo::localization::Uncertainty* uncertainty);

  // optional .apollo.localization.MsfStatus msf_status = 6;
  bool has_msf_status() const;
  void clear_msf_status();
  static const int kMsfStatusFieldNumber = 6;
  private:
  const ::apollo::localization::MsfStatus& _internal_msf_status() const;
  public:
  const ::apollo::localization::MsfStatus& msf_status() const;
  ::apollo::localization::MsfStatus* release_msf_status();
  ::apollo::localization::MsfStatus* mutable_msf_status();
  void set_allocated_msf_status(::apollo::localization::MsfStatus* msf_status);

  // optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
  bool has_sensor_status() const;
  void clear_sensor_status();
  static const int kSensorStatusFieldNumber = 7;
  private:
  const ::apollo::localization::MsfSensorMsgStatus& _internal_sensor_status() const;
  public:
  const ::apollo::localization::MsfSensorMsgStatus& sensor_status() const;
  ::apollo::localization::MsfSensorMsgStatus* release_sensor_status();
  ::apollo::localization::MsfSensorMsgStatus* mutable_sensor_status();
  void set_allocated_sensor_status(::apollo::localization::MsfSensorMsgStatus* sensor_status);

  // optional double measurement_time = 4;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 4;
  double measurement_time() const;
  void set_measurement_time(double value);

  // @@protoc_insertion_point(class_scope:apollo.localization.LocalizationEstimate)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_pose();
  void clear_has_pose();
  void set_has_uncertainty();
  void clear_has_uncertainty();
  void set_has_measurement_time();
  void clear_has_measurement_time();
  void set_has_msf_status();
  void clear_has_msf_status();
  void set_has_sensor_status();
  void clear_has_sensor_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
  ::apollo::common::Header* header_;
  ::apollo::common::Pose* pose_;
  ::apollo::localization::Uncertainty* uncertainty_;
  ::apollo::localization::MsfStatus* msf_status_;
  ::apollo::localization::MsfSensorMsgStatus* sensor_status_;
  double measurement_time_;
  friend struct ::protobuf_localization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocalizationStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.LocalizationStatus) */ {
 public:
  LocalizationStatus();
  virtual ~LocalizationStatus();

  LocalizationStatus(const LocalizationStatus& from);

  inline LocalizationStatus& operator=(const LocalizationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalizationStatus(LocalizationStatus&& from) noexcept
    : LocalizationStatus() {
    *this = ::std::move(from);
  }

  inline LocalizationStatus& operator=(LocalizationStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalizationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationStatus* internal_default_instance() {
    return reinterpret_cast<const LocalizationStatus*>(
               &_LocalizationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LocalizationStatus* other);
  friend void swap(LocalizationStatus& a, LocalizationStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalizationStatus* New() const final {
    return CreateMaybeMessage<LocalizationStatus>(NULL);
  }

  LocalizationStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalizationStatus& from);
  void MergeFrom(const LocalizationStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string state_message = 6;
  bool has_state_message() const;
  void clear_state_message();
  static const int kStateMessageFieldNumber = 6;
  const ::std::string& state_message() const;
  void set_state_message(const ::std::string& value);
  #if LANG_CXX11
  void set_state_message(::std::string&& value);
  #endif
  void set_state_message(const char* value);
  void set_state_message(const char* value, size_t size);
  ::std::string* mutable_state_message();
  ::std::string* release_state_message();
  void set_allocated_state_message(::std::string* state_message);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.localization.MeasureState fusion_status = 2;
  bool has_fusion_status() const;
  void clear_fusion_status();
  static const int kFusionStatusFieldNumber = 2;
  ::apollo::localization::MeasureState fusion_status() const;
  void set_fusion_status(::apollo::localization::MeasureState value);

  // optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_gnss_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_gnss_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kGnssStatusFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::localization::MeasureState gnss_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_gnss_status(::apollo::localization::MeasureState value);

  // optional double measurement_time = 5;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 5;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_lidar_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_lidar_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLidarStatusFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::localization::MeasureState lidar_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_lidar_status(::apollo::localization::MeasureState value);

  // @@protoc_insertion_point(class_scope:apollo.localization.LocalizationStatus)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_fusion_status();
  void clear_has_fusion_status();
  void set_has_gnss_status();
  void clear_has_gnss_status();
  void set_has_lidar_status();
  void clear_has_lidar_status();
  void set_has_measurement_time();
  void clear_has_measurement_time();
  void set_has_state_message();
  void clear_has_state_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr state_message_;
  ::apollo::common::Header* header_;
  int fusion_status_;
  int gnss_status_;
  double measurement_time_;
  int lidar_status_;
  friend struct ::protobuf_localization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uncertainty

// optional .apollo.common.Point3D position_std_dev = 1;
inline bool Uncertainty::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Uncertainty::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Uncertainty::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Point3D& Uncertainty::_internal_position_std_dev() const {
  return *position_std_dev_;
}
inline const ::apollo::common::Point3D& Uncertainty::position_std_dev() const {
  const ::apollo::common::Point3D* p = position_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.position_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.position_std_dev)
  clear_has_position_std_dev();
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Uncertainty::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.position_std_dev)
  return position_std_dev_;
}
inline void Uncertainty::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.position_std_dev)
}

// optional .apollo.common.Point3D orientation_std_dev = 2;
inline bool Uncertainty::has_orientation_std_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Uncertainty::set_has_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Uncertainty::clear_has_orientation_std_dev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Point3D& Uncertainty::_internal_orientation_std_dev() const {
  return *orientation_std_dev_;
}
inline const ::apollo::common::Point3D& Uncertainty::orientation_std_dev() const {
  const ::apollo::common::Point3D* p = orientation_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.orientation_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.orientation_std_dev)
  clear_has_orientation_std_dev();
  ::apollo::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  set_has_orientation_std_dev();
  if (orientation_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    orientation_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
inline void Uncertainty::set_allocated_orientation_std_dev(::apollo::common::Point3D* orientation_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_std_dev_);
  }
  if (orientation_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_std_dev, submessage_arena);
    }
    set_has_orientation_std_dev();
  } else {
    clear_has_orientation_std_dev();
  }
  orientation_std_dev_ = orientation_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.orientation_std_dev)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 3;
inline bool Uncertainty::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Uncertainty::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Uncertainty::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::Point3D& Uncertainty::_internal_linear_velocity_std_dev() const {
  return *linear_velocity_std_dev_;
}
inline const ::apollo::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  const ::apollo::common::Point3D* p = linear_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
inline bool Uncertainty::has_linear_acceleration_std_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Uncertainty::set_has_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Uncertainty::clear_has_linear_acceleration_std_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::common::Point3D& Uncertainty::_internal_linear_acceleration_std_dev() const {
  return *linear_acceleration_std_dev_;
}
inline const ::apollo::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  const ::apollo::common::Point3D* p = linear_acceleration_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  clear_has_linear_acceleration_std_dev();
  ::apollo::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  set_has_linear_acceleration_std_dev();
  if (linear_acceleration_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_acceleration_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
inline void Uncertainty::set_allocated_linear_acceleration_std_dev(::apollo::common::Point3D* linear_acceleration_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_acceleration_std_dev_);
  }
  if (linear_acceleration_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration_std_dev, submessage_arena);
    }
    set_has_linear_acceleration_std_dev();
  } else {
    clear_has_linear_acceleration_std_dev();
  }
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .apollo.common.Point3D angular_velocity_std_dev = 5;
inline bool Uncertainty::has_angular_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Uncertainty::set_has_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Uncertainty::clear_has_angular_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::common::Point3D& Uncertainty::_internal_angular_velocity_std_dev() const {
  return *angular_velocity_std_dev_;
}
inline const ::apollo::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  const ::apollo::common::Point3D* p = angular_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.localization.Uncertainty.angular_velocity_std_dev)
  clear_has_angular_velocity_std_dev();
  ::apollo::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  set_has_angular_velocity_std_dev();
  if (angular_velocity_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    angular_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
inline void Uncertainty::set_allocated_angular_velocity_std_dev(::apollo::common::Point3D* angular_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_velocity_std_dev_);
  }
  if (angular_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity_std_dev, submessage_arena);
    }
    set_has_angular_velocity_std_dev();
  } else {
    clear_has_angular_velocity_std_dev();
  }
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.Uncertainty.angular_velocity_std_dev)
}

// -------------------------------------------------------------------

// LocalizationEstimate

// optional .apollo.common.Header header = 1;
inline bool LocalizationEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalizationEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalizationEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& LocalizationEstimate::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& LocalizationEstimate::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* LocalizationEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.header)
  return header_;
}
inline void LocalizationEstimate::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.header)
}

// optional .apollo.common.Pose pose = 2;
inline bool LocalizationEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalizationEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalizationEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Pose& LocalizationEstimate::_internal_pose() const {
  return *pose_;
}
inline const ::apollo::common::Pose& LocalizationEstimate::pose() const {
  const ::apollo::common::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Pose*>(
      &::apollo::common::_Pose_default_instance_);
}
inline ::apollo::common::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.pose)
  clear_has_pose();
  ::apollo::common::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::apollo::common::Pose* LocalizationEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.pose)
  return pose_;
}
inline void LocalizationEstimate::set_allocated_pose(::apollo::common::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.pose)
}

// optional .apollo.localization.Uncertainty uncertainty = 3;
inline bool LocalizationEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalizationEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalizationEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->Clear();
  clear_has_uncertainty();
}
inline const ::apollo::localization::Uncertainty& LocalizationEstimate::_internal_uncertainty() const {
  return *uncertainty_;
}
inline const ::apollo::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  const ::apollo::localization::Uncertainty* p = uncertainty_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.uncertainty)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::localization::Uncertainty*>(
      &::apollo::localization::_Uncertainty_default_instance_);
}
inline ::apollo::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.uncertainty)
  clear_has_uncertainty();
  ::apollo::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
inline ::apollo::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::localization::Uncertainty>(GetArenaNoVirtual());
    uncertainty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
inline void LocalizationEstimate::set_allocated_uncertainty(::apollo::localization::Uncertainty* uncertainty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete uncertainty_;
  }
  if (uncertainty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uncertainty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uncertainty, submessage_arena);
    }
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  uncertainty_ = uncertainty;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.uncertainty)
}

// optional double measurement_time = 4;
inline bool LocalizationEstimate::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalizationEstimate::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocalizationEstimate::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocalizationEstimate::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double LocalizationEstimate::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.measurement_time)
  return measurement_time_;
}
inline void LocalizationEstimate::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationEstimate.measurement_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
inline int LocalizationEstimate::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline ::apollo::common::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
LocalizationEstimate::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.LocalizationEstimate.trajectory_point)
  return &trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::apollo::common::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
LocalizationEstimate::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_;
}

// optional .apollo.localization.MsfStatus msf_status = 6;
inline bool LocalizationEstimate::has_msf_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalizationEstimate::set_has_msf_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalizationEstimate::clear_has_msf_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::localization::MsfStatus& LocalizationEstimate::_internal_msf_status() const {
  return *msf_status_;
}
inline const ::apollo::localization::MsfStatus& LocalizationEstimate::msf_status() const {
  const ::apollo::localization::MsfStatus* p = msf_status_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.msf_status)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::localization::MsfStatus*>(
      &::apollo::localization::_MsfStatus_default_instance_);
}
inline ::apollo::localization::MsfStatus* LocalizationEstimate::release_msf_status() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.msf_status)
  clear_has_msf_status();
  ::apollo::localization::MsfStatus* temp = msf_status_;
  msf_status_ = NULL;
  return temp;
}
inline ::apollo::localization::MsfStatus* LocalizationEstimate::mutable_msf_status() {
  set_has_msf_status();
  if (msf_status_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::localization::MsfStatus>(GetArenaNoVirtual());
    msf_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.msf_status)
  return msf_status_;
}
inline void LocalizationEstimate::set_allocated_msf_status(::apollo::localization::MsfStatus* msf_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msf_status_);
  }
  if (msf_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msf_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msf_status, submessage_arena);
    }
    set_has_msf_status();
  } else {
    clear_has_msf_status();
  }
  msf_status_ = msf_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.msf_status)
}

// optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
inline bool LocalizationEstimate::has_sensor_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalizationEstimate::set_has_sensor_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalizationEstimate::clear_has_sensor_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::localization::MsfSensorMsgStatus& LocalizationEstimate::_internal_sensor_status() const {
  return *sensor_status_;
}
inline const ::apollo::localization::MsfSensorMsgStatus& LocalizationEstimate::sensor_status() const {
  const ::apollo::localization::MsfSensorMsgStatus* p = sensor_status_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationEstimate.sensor_status)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::localization::MsfSensorMsgStatus*>(
      &::apollo::localization::_MsfSensorMsgStatus_default_instance_);
}
inline ::apollo::localization::MsfSensorMsgStatus* LocalizationEstimate::release_sensor_status() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationEstimate.sensor_status)
  clear_has_sensor_status();
  ::apollo::localization::MsfSensorMsgStatus* temp = sensor_status_;
  sensor_status_ = NULL;
  return temp;
}
inline ::apollo::localization::MsfSensorMsgStatus* LocalizationEstimate::mutable_sensor_status() {
  set_has_sensor_status();
  if (sensor_status_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::localization::MsfSensorMsgStatus>(GetArenaNoVirtual());
    sensor_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationEstimate.sensor_status)
  return sensor_status_;
}
inline void LocalizationEstimate::set_allocated_sensor_status(::apollo::localization::MsfSensorMsgStatus* sensor_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sensor_status_);
  }
  if (sensor_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_status, submessage_arena);
    }
    set_has_sensor_status();
  } else {
    clear_has_sensor_status();
  }
  sensor_status_ = sensor_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationEstimate.sensor_status)
}

// -------------------------------------------------------------------

// LocalizationStatus

// optional .apollo.common.Header header = 1;
inline bool LocalizationStatus::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalizationStatus::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalizationStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Header& LocalizationStatus::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& LocalizationStatus::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* LocalizationStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* LocalizationStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationStatus.header)
  return header_;
}
inline void LocalizationStatus::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationStatus.header)
}

// optional .apollo.localization.MeasureState fusion_status = 2;
inline bool LocalizationStatus::has_fusion_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalizationStatus::set_has_fusion_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalizationStatus::clear_has_fusion_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalizationStatus::clear_fusion_status() {
  fusion_status_ = 0;
  clear_has_fusion_status();
}
inline ::apollo::localization::MeasureState LocalizationStatus::fusion_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.fusion_status)
  return static_cast< ::apollo::localization::MeasureState >(fusion_status_);
}
inline void LocalizationStatus::set_fusion_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_fusion_status();
  fusion_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.fusion_status)
}

// optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
inline bool LocalizationStatus::has_gnss_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalizationStatus::set_has_gnss_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalizationStatus::clear_has_gnss_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalizationStatus::clear_gnss_status() {
  gnss_status_ = 0;
  clear_has_gnss_status();
}
inline ::apollo::localization::MeasureState LocalizationStatus::gnss_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.gnss_status)
  return static_cast< ::apollo::localization::MeasureState >(gnss_status_);
}
inline void LocalizationStatus::set_gnss_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_gnss_status();
  gnss_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.gnss_status)
}

// optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
inline bool LocalizationStatus::has_lidar_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalizationStatus::set_has_lidar_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocalizationStatus::clear_has_lidar_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocalizationStatus::clear_lidar_status() {
  lidar_status_ = 0;
  clear_has_lidar_status();
}
inline ::apollo::localization::MeasureState LocalizationStatus::lidar_status() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.lidar_status)
  return static_cast< ::apollo::localization::MeasureState >(lidar_status_);
}
inline void LocalizationStatus::set_lidar_status(::apollo::localization::MeasureState value) {
  assert(::apollo::localization::MeasureState_IsValid(value));
  set_has_lidar_status();
  lidar_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.lidar_status)
}

// optional double measurement_time = 5;
inline bool LocalizationStatus::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalizationStatus::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalizationStatus::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocalizationStatus::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double LocalizationStatus::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.measurement_time)
  return measurement_time_;
}
inline void LocalizationStatus::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.measurement_time)
}

// optional string state_message = 6;
inline bool LocalizationStatus::has_state_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalizationStatus::set_has_state_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalizationStatus::clear_has_state_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalizationStatus::clear_state_message() {
  state_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state_message();
}
inline const ::std::string& LocalizationStatus::state_message() const {
  // @@protoc_insertion_point(field_get:apollo.localization.LocalizationStatus.state_message)
  return state_message_.GetNoArena();
}
inline void LocalizationStatus::set_state_message(const ::std::string& value) {
  set_has_state_message();
  state_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.LocalizationStatus.state_message)
}
#if LANG_CXX11
inline void LocalizationStatus::set_state_message(::std::string&& value) {
  set_has_state_message();
  state_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.LocalizationStatus.state_message)
}
#endif
inline void LocalizationStatus::set_state_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state_message();
  state_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.LocalizationStatus.state_message)
}
inline void LocalizationStatus::set_state_message(const char* value, size_t size) {
  set_has_state_message();
  state_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.LocalizationStatus.state_message)
}
inline ::std::string* LocalizationStatus::mutable_state_message() {
  set_has_state_message();
  // @@protoc_insertion_point(field_mutable:apollo.localization.LocalizationStatus.state_message)
  return state_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalizationStatus::release_state_message() {
  // @@protoc_insertion_point(field_release:apollo.localization.LocalizationStatus.state_message)
  if (!has_state_message()) {
    return NULL;
  }
  clear_has_state_message();
  return state_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalizationStatus::set_allocated_state_message(::std::string* state_message) {
  if (state_message != NULL) {
    set_has_state_message();
  } else {
    clear_has_state_message();
  }
  state_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_message);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.LocalizationStatus.state_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::localization::MeasureState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::localization::MeasureState>() {
  return ::apollo::localization::MeasureState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_localization_2eproto
