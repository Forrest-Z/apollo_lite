// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: latency_record.proto

#ifndef PROTOBUF_INCLUDED_latency_5frecord_2eproto
#define PROTOBUF_INCLUDED_latency_5frecord_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_latency_5frecord_2eproto 

namespace protobuf_latency_5frecord_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_latency_5frecord_2eproto
namespace apollo {
namespace common {
class LatencyRecord;
class LatencyRecordDefaultTypeInternal;
extern LatencyRecordDefaultTypeInternal _LatencyRecord_default_instance_;
class LatencyRecordMap;
class LatencyRecordMapDefaultTypeInternal;
extern LatencyRecordMapDefaultTypeInternal _LatencyRecordMap_default_instance_;
class LatencyReport;
class LatencyReportDefaultTypeInternal;
extern LatencyReportDefaultTypeInternal _LatencyReport_default_instance_;
class LatencyStat;
class LatencyStatDefaultTypeInternal;
extern LatencyStatDefaultTypeInternal _LatencyStat_default_instance_;
class LatencyTrack;
class LatencyTrackDefaultTypeInternal;
extern LatencyTrackDefaultTypeInternal _LatencyTrack_default_instance_;
class LatencyTrack_LatencyTrackMessage;
class LatencyTrack_LatencyTrackMessageDefaultTypeInternal;
extern LatencyTrack_LatencyTrackMessageDefaultTypeInternal _LatencyTrack_LatencyTrackMessage_default_instance_;
}  // namespace common
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::common::LatencyRecord* Arena::CreateMaybeMessage<::apollo::common::LatencyRecord>(Arena*);
template<> ::apollo::common::LatencyRecordMap* Arena::CreateMaybeMessage<::apollo::common::LatencyRecordMap>(Arena*);
template<> ::apollo::common::LatencyReport* Arena::CreateMaybeMessage<::apollo::common::LatencyReport>(Arena*);
template<> ::apollo::common::LatencyStat* Arena::CreateMaybeMessage<::apollo::common::LatencyStat>(Arena*);
template<> ::apollo::common::LatencyTrack* Arena::CreateMaybeMessage<::apollo::common::LatencyTrack>(Arena*);
template<> ::apollo::common::LatencyTrack_LatencyTrackMessage* Arena::CreateMaybeMessage<::apollo::common::LatencyTrack_LatencyTrackMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace common {

// ===================================================================

class LatencyRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyRecord) */ {
 public:
  LatencyRecord();
  virtual ~LatencyRecord();

  LatencyRecord(const LatencyRecord& from);

  inline LatencyRecord& operator=(const LatencyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyRecord(LatencyRecord&& from) noexcept
    : LatencyRecord() {
    *this = ::std::move(from);
  }

  inline LatencyRecord& operator=(LatencyRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyRecord* internal_default_instance() {
    return reinterpret_cast<const LatencyRecord*>(
               &_LatencyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LatencyRecord* other);
  friend void swap(LatencyRecord& a, LatencyRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyRecord* New() const final {
    return CreateMaybeMessage<LatencyRecord>(NULL);
  }

  LatencyRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyRecord& from);
  void MergeFrom(const LatencyRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 begin_time = 1;
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 1;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 message_id = 3;
  bool has_message_id() const;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  ::google::protobuf::uint64 message_id() const;
  void set_message_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyRecord)
 private:
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_message_id();
  void clear_has_message_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 message_id_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyRecordMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyRecordMap) */ {
 public:
  LatencyRecordMap();
  virtual ~LatencyRecordMap();

  LatencyRecordMap(const LatencyRecordMap& from);

  inline LatencyRecordMap& operator=(const LatencyRecordMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyRecordMap(LatencyRecordMap&& from) noexcept
    : LatencyRecordMap() {
    *this = ::std::move(from);
  }

  inline LatencyRecordMap& operator=(LatencyRecordMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyRecordMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyRecordMap* internal_default_instance() {
    return reinterpret_cast<const LatencyRecordMap*>(
               &_LatencyRecordMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LatencyRecordMap* other);
  friend void swap(LatencyRecordMap& a, LatencyRecordMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyRecordMap* New() const final {
    return CreateMaybeMessage<LatencyRecordMap>(NULL);
  }

  LatencyRecordMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyRecordMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyRecordMap& from);
  void MergeFrom(const LatencyRecordMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyRecordMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.LatencyRecord latency_records = 3;
  int latency_records_size() const;
  void clear_latency_records();
  static const int kLatencyRecordsFieldNumber = 3;
  ::apollo::common::LatencyRecord* mutable_latency_records(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyRecord >*
      mutable_latency_records();
  const ::apollo::common::LatencyRecord& latency_records(int index) const;
  ::apollo::common::LatencyRecord* add_latency_records();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyRecord >&
      latency_records() const;

  // optional string module_name = 2;
  bool has_module_name() const;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 2;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyRecordMap)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_module_name();
  void clear_has_module_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyRecord > latency_records_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::apollo::common::Header* header_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyStat) */ {
 public:
  LatencyStat();
  virtual ~LatencyStat();

  LatencyStat(const LatencyStat& from);

  inline LatencyStat& operator=(const LatencyStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyStat(LatencyStat&& from) noexcept
    : LatencyStat() {
    *this = ::std::move(from);
  }

  inline LatencyStat& operator=(LatencyStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStat* internal_default_instance() {
    return reinterpret_cast<const LatencyStat*>(
               &_LatencyStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LatencyStat* other);
  friend void swap(LatencyStat& a, LatencyStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyStat* New() const final {
    return CreateMaybeMessage<LatencyStat>(NULL);
  }

  LatencyStat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyStat& from);
  void MergeFrom(const LatencyStat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 max_duration = 2;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 2;
  ::google::protobuf::uint64 max_duration() const;
  void set_max_duration(::google::protobuf::uint64 value);

  // optional uint64 aver_duration = 3;
  bool has_aver_duration() const;
  void clear_aver_duration();
  static const int kAverDurationFieldNumber = 3;
  ::google::protobuf::uint64 aver_duration() const;
  void set_aver_duration(::google::protobuf::uint64 value);

  // optional uint32 sample_size = 4;
  bool has_sample_size() const;
  void clear_sample_size();
  static const int kSampleSizeFieldNumber = 4;
  ::google::protobuf::uint32 sample_size() const;
  void set_sample_size(::google::protobuf::uint32 value);

  // optional uint64 min_duration = 1 [default = 9223372036854775808];
  bool has_min_duration() const;
  void clear_min_duration();
  static const int kMinDurationFieldNumber = 1;
  ::google::protobuf::uint64 min_duration() const;
  void set_min_duration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyStat)
 private:
  void set_has_min_duration();
  void clear_has_min_duration();
  void set_has_max_duration();
  void clear_has_max_duration();
  void set_has_aver_duration();
  void clear_has_aver_duration();
  void set_has_sample_size();
  void clear_has_sample_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 max_duration_;
  ::google::protobuf::uint64 aver_duration_;
  ::google::protobuf::uint32 sample_size_;
  ::google::protobuf::uint64 min_duration_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyTrack_LatencyTrackMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyTrack.LatencyTrackMessage) */ {
 public:
  LatencyTrack_LatencyTrackMessage();
  virtual ~LatencyTrack_LatencyTrackMessage();

  LatencyTrack_LatencyTrackMessage(const LatencyTrack_LatencyTrackMessage& from);

  inline LatencyTrack_LatencyTrackMessage& operator=(const LatencyTrack_LatencyTrackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyTrack_LatencyTrackMessage(LatencyTrack_LatencyTrackMessage&& from) noexcept
    : LatencyTrack_LatencyTrackMessage() {
    *this = ::std::move(from);
  }

  inline LatencyTrack_LatencyTrackMessage& operator=(LatencyTrack_LatencyTrackMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyTrack_LatencyTrackMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyTrack_LatencyTrackMessage* internal_default_instance() {
    return reinterpret_cast<const LatencyTrack_LatencyTrackMessage*>(
               &_LatencyTrack_LatencyTrackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LatencyTrack_LatencyTrackMessage* other);
  friend void swap(LatencyTrack_LatencyTrackMessage& a, LatencyTrack_LatencyTrackMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyTrack_LatencyTrackMessage* New() const final {
    return CreateMaybeMessage<LatencyTrack_LatencyTrackMessage>(NULL);
  }

  LatencyTrack_LatencyTrackMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyTrack_LatencyTrackMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyTrack_LatencyTrackMessage& from);
  void MergeFrom(const LatencyTrack_LatencyTrackMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyTrack_LatencyTrackMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string latency_name = 1;
  bool has_latency_name() const;
  void clear_latency_name();
  static const int kLatencyNameFieldNumber = 1;
  const ::std::string& latency_name() const;
  void set_latency_name(const ::std::string& value);
  #if LANG_CXX11
  void set_latency_name(::std::string&& value);
  #endif
  void set_latency_name(const char* value);
  void set_latency_name(const char* value, size_t size);
  ::std::string* mutable_latency_name();
  ::std::string* release_latency_name();
  void set_allocated_latency_name(::std::string* latency_name);

  // optional .apollo.common.LatencyStat latency_stat = 2;
  bool has_latency_stat() const;
  void clear_latency_stat();
  static const int kLatencyStatFieldNumber = 2;
  private:
  const ::apollo::common::LatencyStat& _internal_latency_stat() const;
  public:
  const ::apollo::common::LatencyStat& latency_stat() const;
  ::apollo::common::LatencyStat* release_latency_stat();
  ::apollo::common::LatencyStat* mutable_latency_stat();
  void set_allocated_latency_stat(::apollo::common::LatencyStat* latency_stat);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyTrack.LatencyTrackMessage)
 private:
  void set_has_latency_name();
  void clear_has_latency_name();
  void set_has_latency_stat();
  void clear_has_latency_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr latency_name_;
  ::apollo::common::LatencyStat* latency_stat_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyTrack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyTrack) */ {
 public:
  LatencyTrack();
  virtual ~LatencyTrack();

  LatencyTrack(const LatencyTrack& from);

  inline LatencyTrack& operator=(const LatencyTrack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyTrack(LatencyTrack&& from) noexcept
    : LatencyTrack() {
    *this = ::std::move(from);
  }

  inline LatencyTrack& operator=(LatencyTrack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyTrack* internal_default_instance() {
    return reinterpret_cast<const LatencyTrack*>(
               &_LatencyTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LatencyTrack* other);
  friend void swap(LatencyTrack& a, LatencyTrack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyTrack* New() const final {
    return CreateMaybeMessage<LatencyTrack>(NULL);
  }

  LatencyTrack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyTrack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyTrack& from);
  void MergeFrom(const LatencyTrack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyTrack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LatencyTrack_LatencyTrackMessage LatencyTrackMessage;

  // accessors -------------------------------------------------------

  // repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
  int latency_track_size() const;
  void clear_latency_track();
  static const int kLatencyTrackFieldNumber = 1;
  ::apollo::common::LatencyTrack_LatencyTrackMessage* mutable_latency_track(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >*
      mutable_latency_track();
  const ::apollo::common::LatencyTrack_LatencyTrackMessage& latency_track(int index) const;
  ::apollo::common::LatencyTrack_LatencyTrackMessage* add_latency_track();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >&
      latency_track() const;

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyTrack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage > latency_track_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatencyReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.common.LatencyReport) */ {
 public:
  LatencyReport();
  virtual ~LatencyReport();

  LatencyReport(const LatencyReport& from);

  inline LatencyReport& operator=(const LatencyReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyReport(LatencyReport&& from) noexcept
    : LatencyReport() {
    *this = ::std::move(from);
  }

  inline LatencyReport& operator=(LatencyReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyReport* internal_default_instance() {
    return reinterpret_cast<const LatencyReport*>(
               &_LatencyReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LatencyReport* other);
  friend void swap(LatencyReport& a, LatencyReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyReport* New() const final {
    return CreateMaybeMessage<LatencyReport>(NULL);
  }

  LatencyReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencyReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencyReport& from);
  void MergeFrom(const LatencyReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.LatencyTrack e2es_latency = 2;
  bool has_e2es_latency() const;
  void clear_e2es_latency();
  static const int kE2EsLatencyFieldNumber = 2;
  private:
  const ::apollo::common::LatencyTrack& _internal_e2es_latency() const;
  public:
  const ::apollo::common::LatencyTrack& e2es_latency() const;
  ::apollo::common::LatencyTrack* release_e2es_latency();
  ::apollo::common::LatencyTrack* mutable_e2es_latency();
  void set_allocated_e2es_latency(::apollo::common::LatencyTrack* e2es_latency);

  // optional .apollo.common.LatencyTrack modules_latency = 3;
  bool has_modules_latency() const;
  void clear_modules_latency();
  static const int kModulesLatencyFieldNumber = 3;
  private:
  const ::apollo::common::LatencyTrack& _internal_modules_latency() const;
  public:
  const ::apollo::common::LatencyTrack& modules_latency() const;
  ::apollo::common::LatencyTrack* release_modules_latency();
  ::apollo::common::LatencyTrack* mutable_modules_latency();
  void set_allocated_modules_latency(::apollo::common::LatencyTrack* modules_latency);

  // @@protoc_insertion_point(class_scope:apollo.common.LatencyReport)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_e2es_latency();
  void clear_has_e2es_latency();
  void set_has_modules_latency();
  void clear_has_modules_latency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::LatencyTrack* e2es_latency_;
  ::apollo::common::LatencyTrack* modules_latency_;
  friend struct ::protobuf_latency_5frecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatencyRecord

// optional uint64 begin_time = 1;
inline bool LatencyRecord::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyRecord::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyRecord::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyRecord::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::uint64 LatencyRecord::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.begin_time)
  return begin_time_;
}
inline void LatencyRecord::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.begin_time)
}

// optional uint64 end_time = 2;
inline bool LatencyRecord::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyRecord::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyRecord::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyRecord::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 LatencyRecord::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.end_time)
  return end_time_;
}
inline void LatencyRecord::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.end_time)
}

// optional uint64 message_id = 3;
inline bool LatencyRecord::has_message_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyRecord::set_has_message_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyRecord::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyRecord::clear_message_id() {
  message_id_ = GOOGLE_ULONGLONG(0);
  clear_has_message_id();
}
inline ::google::protobuf::uint64 LatencyRecord::message_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecord.message_id)
  return message_id_;
}
inline void LatencyRecord::set_message_id(::google::protobuf::uint64 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecord.message_id)
}

// -------------------------------------------------------------------

// LatencyRecordMap

// optional .apollo.common.Header header = 1;
inline bool LatencyRecordMap::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyRecordMap::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyRecordMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Header& LatencyRecordMap::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& LatencyRecordMap::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* LatencyRecordMap::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyRecordMap.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* LatencyRecordMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.header)
  return header_;
}
inline void LatencyRecordMap::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyRecordMap.header)
}

// optional string module_name = 2;
inline bool LatencyRecordMap::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyRecordMap::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyRecordMap::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyRecordMap::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module_name();
}
inline const ::std::string& LatencyRecordMap::module_name() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.module_name)
  return module_name_.GetNoArena();
}
inline void LatencyRecordMap::set_module_name(const ::std::string& value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyRecordMap.module_name)
}
#if LANG_CXX11
inline void LatencyRecordMap::set_module_name(::std::string&& value) {
  set_has_module_name();
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.LatencyRecordMap.module_name)
}
#endif
inline void LatencyRecordMap::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.LatencyRecordMap.module_name)
}
inline void LatencyRecordMap::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.LatencyRecordMap.module_name)
}
inline ::std::string* LatencyRecordMap::mutable_module_name() {
  set_has_module_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LatencyRecordMap::release_module_name() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyRecordMap.module_name)
  if (!has_module_name()) {
    return NULL;
  }
  clear_has_module_name();
  return module_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LatencyRecordMap::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyRecordMap.module_name)
}

// repeated .apollo.common.LatencyRecord latency_records = 3;
inline int LatencyRecordMap::latency_records_size() const {
  return latency_records_.size();
}
inline void LatencyRecordMap::clear_latency_records() {
  latency_records_.Clear();
}
inline ::apollo::common::LatencyRecord* LatencyRecordMap::mutable_latency_records(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyRecord >*
LatencyRecordMap::mutable_latency_records() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.LatencyRecordMap.latency_records)
  return &latency_records_;
}
inline const ::apollo::common::LatencyRecord& LatencyRecordMap::latency_records(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_.Get(index);
}
inline ::apollo::common::LatencyRecord* LatencyRecordMap::add_latency_records() {
  // @@protoc_insertion_point(field_add:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyRecord >&
LatencyRecordMap::latency_records() const {
  // @@protoc_insertion_point(field_list:apollo.common.LatencyRecordMap.latency_records)
  return latency_records_;
}

// -------------------------------------------------------------------

// LatencyStat

// optional uint64 min_duration = 1 [default = 9223372036854775808];
inline bool LatencyStat::has_min_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatencyStat::set_has_min_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatencyStat::clear_has_min_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatencyStat::clear_min_duration() {
  min_duration_ = GOOGLE_ULONGLONG(9223372036854775808);
  clear_has_min_duration();
}
inline ::google::protobuf::uint64 LatencyStat::min_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.min_duration)
  return min_duration_;
}
inline void LatencyStat::set_min_duration(::google::protobuf::uint64 value) {
  set_has_min_duration();
  min_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.min_duration)
}

// optional uint64 max_duration = 2;
inline bool LatencyStat::has_max_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyStat::set_has_max_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyStat::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyStat::clear_max_duration() {
  max_duration_ = GOOGLE_ULONGLONG(0);
  clear_has_max_duration();
}
inline ::google::protobuf::uint64 LatencyStat::max_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.max_duration)
  return max_duration_;
}
inline void LatencyStat::set_max_duration(::google::protobuf::uint64 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.max_duration)
}

// optional uint64 aver_duration = 3;
inline bool LatencyStat::has_aver_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyStat::set_has_aver_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyStat::clear_has_aver_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyStat::clear_aver_duration() {
  aver_duration_ = GOOGLE_ULONGLONG(0);
  clear_has_aver_duration();
}
inline ::google::protobuf::uint64 LatencyStat::aver_duration() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.aver_duration)
  return aver_duration_;
}
inline void LatencyStat::set_aver_duration(::google::protobuf::uint64 value) {
  set_has_aver_duration();
  aver_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.aver_duration)
}

// optional uint32 sample_size = 4;
inline bool LatencyStat::has_sample_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyStat::set_has_sample_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyStat::clear_has_sample_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyStat::clear_sample_size() {
  sample_size_ = 0u;
  clear_has_sample_size();
}
inline ::google::protobuf::uint32 LatencyStat::sample_size() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyStat.sample_size)
  return sample_size_;
}
inline void LatencyStat::set_sample_size(::google::protobuf::uint32 value) {
  set_has_sample_size();
  sample_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.LatencyStat.sample_size)
}

// -------------------------------------------------------------------

// LatencyTrack_LatencyTrackMessage

// optional string latency_name = 1;
inline bool LatencyTrack_LatencyTrackMessage::has_latency_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyTrack_LatencyTrackMessage::set_has_latency_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyTrack_LatencyTrackMessage::clear_has_latency_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyTrack_LatencyTrackMessage::clear_latency_name() {
  latency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latency_name();
}
inline const ::std::string& LatencyTrack_LatencyTrackMessage::latency_name() const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  return latency_name_.GetNoArena();
}
inline void LatencyTrack_LatencyTrackMessage::set_latency_name(const ::std::string& value) {
  set_has_latency_name();
  latency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}
#if LANG_CXX11
inline void LatencyTrack_LatencyTrackMessage::set_latency_name(::std::string&& value) {
  set_has_latency_name();
  latency_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}
#endif
inline void LatencyTrack_LatencyTrackMessage::set_latency_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_latency_name();
  latency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}
inline void LatencyTrack_LatencyTrackMessage::set_latency_name(const char* value, size_t size) {
  set_has_latency_name();
  latency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}
inline ::std::string* LatencyTrack_LatencyTrackMessage::mutable_latency_name() {
  set_has_latency_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  return latency_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LatencyTrack_LatencyTrackMessage::release_latency_name() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
  if (!has_latency_name()) {
    return NULL;
  }
  clear_has_latency_name();
  return latency_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LatencyTrack_LatencyTrackMessage::set_allocated_latency_name(::std::string* latency_name) {
  if (latency_name != NULL) {
    set_has_latency_name();
  } else {
    clear_has_latency_name();
  }
  latency_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latency_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyTrack.LatencyTrackMessage.latency_name)
}

// optional .apollo.common.LatencyStat latency_stat = 2;
inline bool LatencyTrack_LatencyTrackMessage::has_latency_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyTrack_LatencyTrackMessage::set_has_latency_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyTrack_LatencyTrackMessage::clear_has_latency_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyTrack_LatencyTrackMessage::clear_latency_stat() {
  if (latency_stat_ != NULL) latency_stat_->Clear();
  clear_has_latency_stat();
}
inline const ::apollo::common::LatencyStat& LatencyTrack_LatencyTrackMessage::_internal_latency_stat() const {
  return *latency_stat_;
}
inline const ::apollo::common::LatencyStat& LatencyTrack_LatencyTrackMessage::latency_stat() const {
  const ::apollo::common::LatencyStat* p = latency_stat_;
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyStat*>(
      &::apollo::common::_LatencyStat_default_instance_);
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::release_latency_stat() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  clear_has_latency_stat();
  ::apollo::common::LatencyStat* temp = latency_stat_;
  latency_stat_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyStat* LatencyTrack_LatencyTrackMessage::mutable_latency_stat() {
  set_has_latency_stat();
  if (latency_stat_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyStat>(GetArenaNoVirtual());
    latency_stat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
  return latency_stat_;
}
inline void LatencyTrack_LatencyTrackMessage::set_allocated_latency_stat(::apollo::common::LatencyStat* latency_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latency_stat_;
  }
  if (latency_stat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latency_stat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency_stat, submessage_arena);
    }
    set_has_latency_stat();
  } else {
    clear_has_latency_stat();
  }
  latency_stat_ = latency_stat;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyTrack.LatencyTrackMessage.latency_stat)
}

// -------------------------------------------------------------------

// LatencyTrack

// repeated .apollo.common.LatencyTrack.LatencyTrackMessage latency_track = 1;
inline int LatencyTrack::latency_track_size() const {
  return latency_track_.size();
}
inline void LatencyTrack::clear_latency_track() {
  latency_track_.Clear();
}
inline ::apollo::common::LatencyTrack_LatencyTrackMessage* LatencyTrack::mutable_latency_track(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyTrack.latency_track)
  return latency_track_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >*
LatencyTrack::mutable_latency_track() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.LatencyTrack.latency_track)
  return &latency_track_;
}
inline const ::apollo::common::LatencyTrack_LatencyTrackMessage& LatencyTrack::latency_track(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.LatencyTrack.latency_track)
  return latency_track_.Get(index);
}
inline ::apollo::common::LatencyTrack_LatencyTrackMessage* LatencyTrack::add_latency_track() {
  // @@protoc_insertion_point(field_add:apollo.common.LatencyTrack.latency_track)
  return latency_track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::LatencyTrack_LatencyTrackMessage >&
LatencyTrack::latency_track() const {
  // @@protoc_insertion_point(field_list:apollo.common.LatencyTrack.latency_track)
  return latency_track_;
}

// -------------------------------------------------------------------

// LatencyReport

// optional .apollo.common.Header header = 1;
inline bool LatencyReport::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyReport::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyReport::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& LatencyReport::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& LatencyReport::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* LatencyReport::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* LatencyReport::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.header)
  return header_;
}
inline void LatencyReport::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.header)
}

// optional .apollo.common.LatencyTrack e2es_latency = 2;
inline bool LatencyReport::has_e2es_latency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyReport::set_has_e2es_latency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyReport::clear_has_e2es_latency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyReport::clear_e2es_latency() {
  if (e2es_latency_ != NULL) e2es_latency_->Clear();
  clear_has_e2es_latency();
}
inline const ::apollo::common::LatencyTrack& LatencyReport::_internal_e2es_latency() const {
  return *e2es_latency_;
}
inline const ::apollo::common::LatencyTrack& LatencyReport::e2es_latency() const {
  const ::apollo::common::LatencyTrack* p = e2es_latency_;
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.e2es_latency)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyTrack*>(
      &::apollo::common::_LatencyTrack_default_instance_);
}
inline ::apollo::common::LatencyTrack* LatencyReport::release_e2es_latency() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.e2es_latency)
  clear_has_e2es_latency();
  ::apollo::common::LatencyTrack* temp = e2es_latency_;
  e2es_latency_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::mutable_e2es_latency() {
  set_has_e2es_latency();
  if (e2es_latency_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyTrack>(GetArenaNoVirtual());
    e2es_latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.e2es_latency)
  return e2es_latency_;
}
inline void LatencyReport::set_allocated_e2es_latency(::apollo::common::LatencyTrack* e2es_latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete e2es_latency_;
  }
  if (e2es_latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      e2es_latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, e2es_latency, submessage_arena);
    }
    set_has_e2es_latency();
  } else {
    clear_has_e2es_latency();
  }
  e2es_latency_ = e2es_latency;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.e2es_latency)
}

// optional .apollo.common.LatencyTrack modules_latency = 3;
inline bool LatencyReport::has_modules_latency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatencyReport::set_has_modules_latency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatencyReport::clear_has_modules_latency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatencyReport::clear_modules_latency() {
  if (modules_latency_ != NULL) modules_latency_->Clear();
  clear_has_modules_latency();
}
inline const ::apollo::common::LatencyTrack& LatencyReport::_internal_modules_latency() const {
  return *modules_latency_;
}
inline const ::apollo::common::LatencyTrack& LatencyReport::modules_latency() const {
  const ::apollo::common::LatencyTrack* p = modules_latency_;
  // @@protoc_insertion_point(field_get:apollo.common.LatencyReport.modules_latency)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::LatencyTrack*>(
      &::apollo::common::_LatencyTrack_default_instance_);
}
inline ::apollo::common::LatencyTrack* LatencyReport::release_modules_latency() {
  // @@protoc_insertion_point(field_release:apollo.common.LatencyReport.modules_latency)
  clear_has_modules_latency();
  ::apollo::common::LatencyTrack* temp = modules_latency_;
  modules_latency_ = NULL;
  return temp;
}
inline ::apollo::common::LatencyTrack* LatencyReport::mutable_modules_latency() {
  set_has_modules_latency();
  if (modules_latency_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::LatencyTrack>(GetArenaNoVirtual());
    modules_latency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.LatencyReport.modules_latency)
  return modules_latency_;
}
inline void LatencyReport::set_allocated_modules_latency(::apollo::common::LatencyTrack* modules_latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete modules_latency_;
  }
  if (modules_latency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      modules_latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modules_latency, submessage_arena);
    }
    set_has_modules_latency();
  } else {
    clear_has_modules_latency();
  }
  modules_latency_ = modules_latency;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.LatencyReport.modules_latency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_latency_5frecord_2eproto
